"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_queryDescribeClusterSecurityGroupsCommand = exports.serializeAws_queryDescribeClustersCommand = exports.serializeAws_queryDescribeClusterParametersCommand = exports.serializeAws_queryDescribeClusterParameterGroupsCommand = exports.serializeAws_queryDescribeClusterDbRevisionsCommand = exports.serializeAws_queryDescribeAuthenticationProfilesCommand = exports.serializeAws_queryDescribeAccountAttributesCommand = exports.serializeAws_queryDeleteUsageLimitCommand = exports.serializeAws_queryDeleteTagsCommand = exports.serializeAws_queryDeleteSnapshotScheduleCommand = exports.serializeAws_queryDeleteSnapshotCopyGrantCommand = exports.serializeAws_queryDeleteScheduledActionCommand = exports.serializeAws_queryDeletePartnerCommand = exports.serializeAws_queryDeleteHsmConfigurationCommand = exports.serializeAws_queryDeleteHsmClientCertificateCommand = exports.serializeAws_queryDeleteEventSubscriptionCommand = exports.serializeAws_queryDeleteEndpointAccessCommand = exports.serializeAws_queryDeleteClusterSubnetGroupCommand = exports.serializeAws_queryDeleteClusterSnapshotCommand = exports.serializeAws_queryDeleteClusterSecurityGroupCommand = exports.serializeAws_queryDeleteClusterParameterGroupCommand = exports.serializeAws_queryDeleteClusterCommand = exports.serializeAws_queryDeleteAuthenticationProfileCommand = exports.serializeAws_queryDeauthorizeDataShareCommand = exports.serializeAws_queryCreateUsageLimitCommand = exports.serializeAws_queryCreateTagsCommand = exports.serializeAws_queryCreateSnapshotScheduleCommand = exports.serializeAws_queryCreateSnapshotCopyGrantCommand = exports.serializeAws_queryCreateScheduledActionCommand = exports.serializeAws_queryCreateHsmConfigurationCommand = exports.serializeAws_queryCreateHsmClientCertificateCommand = exports.serializeAws_queryCreateEventSubscriptionCommand = exports.serializeAws_queryCreateEndpointAccessCommand = exports.serializeAws_queryCreateClusterSubnetGroupCommand = exports.serializeAws_queryCreateClusterSnapshotCommand = exports.serializeAws_queryCreateClusterSecurityGroupCommand = exports.serializeAws_queryCreateClusterParameterGroupCommand = exports.serializeAws_queryCreateClusterCommand = exports.serializeAws_queryCreateAuthenticationProfileCommand = exports.serializeAws_queryCopyClusterSnapshotCommand = exports.serializeAws_queryCancelResizeCommand = exports.serializeAws_queryBatchModifyClusterSnapshotsCommand = exports.serializeAws_queryBatchDeleteClusterSnapshotsCommand = exports.serializeAws_queryAuthorizeSnapshotAccessCommand = exports.serializeAws_queryAuthorizeEndpointAccessCommand = exports.serializeAws_queryAuthorizeDataShareCommand = exports.serializeAws_queryAuthorizeClusterSecurityGroupIngressCommand = exports.serializeAws_queryAssociateDataShareConsumerCommand = exports.serializeAws_queryAddPartnerCommand = exports.serializeAws_queryAcceptReservedNodeExchangeCommand = void 0;
exports.serializeAws_queryModifyEndpointAccessCommand = exports.serializeAws_queryModifyClusterSubnetGroupCommand = exports.serializeAws_queryModifyClusterSnapshotScheduleCommand = exports.serializeAws_queryModifyClusterSnapshotCommand = exports.serializeAws_queryModifyClusterParameterGroupCommand = exports.serializeAws_queryModifyClusterMaintenanceCommand = exports.serializeAws_queryModifyClusterIamRolesCommand = exports.serializeAws_queryModifyClusterDbRevisionCommand = exports.serializeAws_queryModifyClusterCommand = exports.serializeAws_queryModifyAuthenticationProfileCommand = exports.serializeAws_queryModifyAquaConfigurationCommand = exports.serializeAws_queryGetReservedNodeExchangeOfferingsCommand = exports.serializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommand = exports.serializeAws_queryGetClusterCredentialsWithIAMCommand = exports.serializeAws_queryGetClusterCredentialsCommand = exports.serializeAws_queryEnableSnapshotCopyCommand = exports.serializeAws_queryEnableLoggingCommand = exports.serializeAws_queryDisassociateDataShareConsumerCommand = exports.serializeAws_queryDisableSnapshotCopyCommand = exports.serializeAws_queryDisableLoggingCommand = exports.serializeAws_queryDescribeUsageLimitsCommand = exports.serializeAws_queryDescribeTagsCommand = exports.serializeAws_queryDescribeTableRestoreStatusCommand = exports.serializeAws_queryDescribeStorageCommand = exports.serializeAws_queryDescribeSnapshotSchedulesCommand = exports.serializeAws_queryDescribeSnapshotCopyGrantsCommand = exports.serializeAws_queryDescribeScheduledActionsCommand = exports.serializeAws_queryDescribeResizeCommand = exports.serializeAws_queryDescribeReservedNodesCommand = exports.serializeAws_queryDescribeReservedNodeOfferingsCommand = exports.serializeAws_queryDescribeReservedNodeExchangeStatusCommand = exports.serializeAws_queryDescribePartnersCommand = exports.serializeAws_queryDescribeOrderableClusterOptionsCommand = exports.serializeAws_queryDescribeNodeConfigurationOptionsCommand = exports.serializeAws_queryDescribeLoggingStatusCommand = exports.serializeAws_queryDescribeHsmConfigurationsCommand = exports.serializeAws_queryDescribeHsmClientCertificatesCommand = exports.serializeAws_queryDescribeEventSubscriptionsCommand = exports.serializeAws_queryDescribeEventsCommand = exports.serializeAws_queryDescribeEventCategoriesCommand = exports.serializeAws_queryDescribeEndpointAuthorizationCommand = exports.serializeAws_queryDescribeEndpointAccessCommand = exports.serializeAws_queryDescribeDefaultClusterParametersCommand = exports.serializeAws_queryDescribeDataSharesForProducerCommand = exports.serializeAws_queryDescribeDataSharesForConsumerCommand = exports.serializeAws_queryDescribeDataSharesCommand = exports.serializeAws_queryDescribeClusterVersionsCommand = exports.serializeAws_queryDescribeClusterTracksCommand = exports.serializeAws_queryDescribeClusterSubnetGroupsCommand = exports.serializeAws_queryDescribeClusterSnapshotsCommand = void 0;
exports.deserializeAws_queryDeleteClusterSecurityGroupCommand = exports.deserializeAws_queryDeleteClusterParameterGroupCommand = exports.deserializeAws_queryDeleteClusterCommand = exports.deserializeAws_queryDeleteAuthenticationProfileCommand = exports.deserializeAws_queryDeauthorizeDataShareCommand = exports.deserializeAws_queryCreateUsageLimitCommand = exports.deserializeAws_queryCreateTagsCommand = exports.deserializeAws_queryCreateSnapshotScheduleCommand = exports.deserializeAws_queryCreateSnapshotCopyGrantCommand = exports.deserializeAws_queryCreateScheduledActionCommand = exports.deserializeAws_queryCreateHsmConfigurationCommand = exports.deserializeAws_queryCreateHsmClientCertificateCommand = exports.deserializeAws_queryCreateEventSubscriptionCommand = exports.deserializeAws_queryCreateEndpointAccessCommand = exports.deserializeAws_queryCreateClusterSubnetGroupCommand = exports.deserializeAws_queryCreateClusterSnapshotCommand = exports.deserializeAws_queryCreateClusterSecurityGroupCommand = exports.deserializeAws_queryCreateClusterParameterGroupCommand = exports.deserializeAws_queryCreateClusterCommand = exports.deserializeAws_queryCreateAuthenticationProfileCommand = exports.deserializeAws_queryCopyClusterSnapshotCommand = exports.deserializeAws_queryCancelResizeCommand = exports.deserializeAws_queryBatchModifyClusterSnapshotsCommand = exports.deserializeAws_queryBatchDeleteClusterSnapshotsCommand = exports.deserializeAws_queryAuthorizeSnapshotAccessCommand = exports.deserializeAws_queryAuthorizeEndpointAccessCommand = exports.deserializeAws_queryAuthorizeDataShareCommand = exports.deserializeAws_queryAuthorizeClusterSecurityGroupIngressCommand = exports.deserializeAws_queryAssociateDataShareConsumerCommand = exports.deserializeAws_queryAddPartnerCommand = exports.deserializeAws_queryAcceptReservedNodeExchangeCommand = exports.serializeAws_queryUpdatePartnerStatusCommand = exports.serializeAws_queryRotateEncryptionKeyCommand = exports.serializeAws_queryRevokeSnapshotAccessCommand = exports.serializeAws_queryRevokeEndpointAccessCommand = exports.serializeAws_queryRevokeClusterSecurityGroupIngressCommand = exports.serializeAws_queryResumeClusterCommand = exports.serializeAws_queryRestoreTableFromClusterSnapshotCommand = exports.serializeAws_queryRestoreFromClusterSnapshotCommand = exports.serializeAws_queryResizeClusterCommand = exports.serializeAws_queryResetClusterParameterGroupCommand = exports.serializeAws_queryRejectDataShareCommand = exports.serializeAws_queryRebootClusterCommand = exports.serializeAws_queryPurchaseReservedNodeOfferingCommand = exports.serializeAws_queryPauseClusterCommand = exports.serializeAws_queryModifyUsageLimitCommand = exports.serializeAws_queryModifySnapshotScheduleCommand = exports.serializeAws_queryModifySnapshotCopyRetentionPeriodCommand = exports.serializeAws_queryModifyScheduledActionCommand = exports.serializeAws_queryModifyEventSubscriptionCommand = void 0;
exports.deserializeAws_queryDisableLoggingCommand = exports.deserializeAws_queryDescribeUsageLimitsCommand = exports.deserializeAws_queryDescribeTagsCommand = exports.deserializeAws_queryDescribeTableRestoreStatusCommand = exports.deserializeAws_queryDescribeStorageCommand = exports.deserializeAws_queryDescribeSnapshotSchedulesCommand = exports.deserializeAws_queryDescribeSnapshotCopyGrantsCommand = exports.deserializeAws_queryDescribeScheduledActionsCommand = exports.deserializeAws_queryDescribeResizeCommand = exports.deserializeAws_queryDescribeReservedNodesCommand = exports.deserializeAws_queryDescribeReservedNodeOfferingsCommand = exports.deserializeAws_queryDescribeReservedNodeExchangeStatusCommand = exports.deserializeAws_queryDescribePartnersCommand = exports.deserializeAws_queryDescribeOrderableClusterOptionsCommand = exports.deserializeAws_queryDescribeNodeConfigurationOptionsCommand = exports.deserializeAws_queryDescribeLoggingStatusCommand = exports.deserializeAws_queryDescribeHsmConfigurationsCommand = exports.deserializeAws_queryDescribeHsmClientCertificatesCommand = exports.deserializeAws_queryDescribeEventSubscriptionsCommand = exports.deserializeAws_queryDescribeEventsCommand = exports.deserializeAws_queryDescribeEventCategoriesCommand = exports.deserializeAws_queryDescribeEndpointAuthorizationCommand = exports.deserializeAws_queryDescribeEndpointAccessCommand = exports.deserializeAws_queryDescribeDefaultClusterParametersCommand = exports.deserializeAws_queryDescribeDataSharesForProducerCommand = exports.deserializeAws_queryDescribeDataSharesForConsumerCommand = exports.deserializeAws_queryDescribeDataSharesCommand = exports.deserializeAws_queryDescribeClusterVersionsCommand = exports.deserializeAws_queryDescribeClusterTracksCommand = exports.deserializeAws_queryDescribeClusterSubnetGroupsCommand = exports.deserializeAws_queryDescribeClusterSnapshotsCommand = exports.deserializeAws_queryDescribeClusterSecurityGroupsCommand = exports.deserializeAws_queryDescribeClustersCommand = exports.deserializeAws_queryDescribeClusterParametersCommand = exports.deserializeAws_queryDescribeClusterParameterGroupsCommand = exports.deserializeAws_queryDescribeClusterDbRevisionsCommand = exports.deserializeAws_queryDescribeAuthenticationProfilesCommand = exports.deserializeAws_queryDescribeAccountAttributesCommand = exports.deserializeAws_queryDeleteUsageLimitCommand = exports.deserializeAws_queryDeleteTagsCommand = exports.deserializeAws_queryDeleteSnapshotScheduleCommand = exports.deserializeAws_queryDeleteSnapshotCopyGrantCommand = exports.deserializeAws_queryDeleteScheduledActionCommand = exports.deserializeAws_queryDeletePartnerCommand = exports.deserializeAws_queryDeleteHsmConfigurationCommand = exports.deserializeAws_queryDeleteHsmClientCertificateCommand = exports.deserializeAws_queryDeleteEventSubscriptionCommand = exports.deserializeAws_queryDeleteEndpointAccessCommand = exports.deserializeAws_queryDeleteClusterSubnetGroupCommand = exports.deserializeAws_queryDeleteClusterSnapshotCommand = void 0;
exports.deserializeAws_queryUpdatePartnerStatusCommand = exports.deserializeAws_queryRotateEncryptionKeyCommand = exports.deserializeAws_queryRevokeSnapshotAccessCommand = exports.deserializeAws_queryRevokeEndpointAccessCommand = exports.deserializeAws_queryRevokeClusterSecurityGroupIngressCommand = exports.deserializeAws_queryResumeClusterCommand = exports.deserializeAws_queryRestoreTableFromClusterSnapshotCommand = exports.deserializeAws_queryRestoreFromClusterSnapshotCommand = exports.deserializeAws_queryResizeClusterCommand = exports.deserializeAws_queryResetClusterParameterGroupCommand = exports.deserializeAws_queryRejectDataShareCommand = exports.deserializeAws_queryRebootClusterCommand = exports.deserializeAws_queryPurchaseReservedNodeOfferingCommand = exports.deserializeAws_queryPauseClusterCommand = exports.deserializeAws_queryModifyUsageLimitCommand = exports.deserializeAws_queryModifySnapshotScheduleCommand = exports.deserializeAws_queryModifySnapshotCopyRetentionPeriodCommand = exports.deserializeAws_queryModifyScheduledActionCommand = exports.deserializeAws_queryModifyEventSubscriptionCommand = exports.deserializeAws_queryModifyEndpointAccessCommand = exports.deserializeAws_queryModifyClusterSubnetGroupCommand = exports.deserializeAws_queryModifyClusterSnapshotScheduleCommand = exports.deserializeAws_queryModifyClusterSnapshotCommand = exports.deserializeAws_queryModifyClusterParameterGroupCommand = exports.deserializeAws_queryModifyClusterMaintenanceCommand = exports.deserializeAws_queryModifyClusterIamRolesCommand = exports.deserializeAws_queryModifyClusterDbRevisionCommand = exports.deserializeAws_queryModifyClusterCommand = exports.deserializeAws_queryModifyAuthenticationProfileCommand = exports.deserializeAws_queryModifyAquaConfigurationCommand = exports.deserializeAws_queryGetReservedNodeExchangeOfferingsCommand = exports.deserializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommand = exports.deserializeAws_queryGetClusterCredentialsWithIAMCommand = exports.deserializeAws_queryGetClusterCredentialsCommand = exports.deserializeAws_queryEnableSnapshotCopyCommand = exports.deserializeAws_queryEnableLoggingCommand = exports.deserializeAws_queryDisassociateDataShareConsumerCommand = exports.deserializeAws_queryDisableSnapshotCopyCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const entities_1 = require("entities");
const fast_xml_parser_1 = require("fast-xml-parser");
const models_0_1 = require("../models/models_0");
const models_1_1 = require("../models/models_1");
const RedshiftServiceException_1 = require("../models/RedshiftServiceException");
const serializeAws_queryAcceptReservedNodeExchangeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAcceptReservedNodeExchangeInputMessage(input, context),
        Action: "AcceptReservedNodeExchange",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAcceptReservedNodeExchangeCommand = serializeAws_queryAcceptReservedNodeExchangeCommand;
const serializeAws_queryAddPartnerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPartnerIntegrationInputMessage(input, context),
        Action: "AddPartner",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAddPartnerCommand = serializeAws_queryAddPartnerCommand;
const serializeAws_queryAssociateDataShareConsumerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAssociateDataShareConsumerMessage(input, context),
        Action: "AssociateDataShareConsumer",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAssociateDataShareConsumerCommand = serializeAws_queryAssociateDataShareConsumerCommand;
const serializeAws_queryAuthorizeClusterSecurityGroupIngressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAuthorizeClusterSecurityGroupIngressMessage(input, context),
        Action: "AuthorizeClusterSecurityGroupIngress",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAuthorizeClusterSecurityGroupIngressCommand = serializeAws_queryAuthorizeClusterSecurityGroupIngressCommand;
const serializeAws_queryAuthorizeDataShareCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAuthorizeDataShareMessage(input, context),
        Action: "AuthorizeDataShare",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAuthorizeDataShareCommand = serializeAws_queryAuthorizeDataShareCommand;
const serializeAws_queryAuthorizeEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAuthorizeEndpointAccessMessage(input, context),
        Action: "AuthorizeEndpointAccess",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAuthorizeEndpointAccessCommand = serializeAws_queryAuthorizeEndpointAccessCommand;
const serializeAws_queryAuthorizeSnapshotAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAuthorizeSnapshotAccessMessage(input, context),
        Action: "AuthorizeSnapshotAccess",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAuthorizeSnapshotAccessCommand = serializeAws_queryAuthorizeSnapshotAccessCommand;
const serializeAws_queryBatchDeleteClusterSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryBatchDeleteClusterSnapshotsRequest(input, context),
        Action: "BatchDeleteClusterSnapshots",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryBatchDeleteClusterSnapshotsCommand = serializeAws_queryBatchDeleteClusterSnapshotsCommand;
const serializeAws_queryBatchModifyClusterSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryBatchModifyClusterSnapshotsMessage(input, context),
        Action: "BatchModifyClusterSnapshots",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryBatchModifyClusterSnapshotsCommand = serializeAws_queryBatchModifyClusterSnapshotsCommand;
const serializeAws_queryCancelResizeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCancelResizeMessage(input, context),
        Action: "CancelResize",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCancelResizeCommand = serializeAws_queryCancelResizeCommand;
const serializeAws_queryCopyClusterSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCopyClusterSnapshotMessage(input, context),
        Action: "CopyClusterSnapshot",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCopyClusterSnapshotCommand = serializeAws_queryCopyClusterSnapshotCommand;
const serializeAws_queryCreateAuthenticationProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateAuthenticationProfileMessage(input, context),
        Action: "CreateAuthenticationProfile",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateAuthenticationProfileCommand = serializeAws_queryCreateAuthenticationProfileCommand;
const serializeAws_queryCreateClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateClusterMessage(input, context),
        Action: "CreateCluster",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateClusterCommand = serializeAws_queryCreateClusterCommand;
const serializeAws_queryCreateClusterParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateClusterParameterGroupMessage(input, context),
        Action: "CreateClusterParameterGroup",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateClusterParameterGroupCommand = serializeAws_queryCreateClusterParameterGroupCommand;
const serializeAws_queryCreateClusterSecurityGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateClusterSecurityGroupMessage(input, context),
        Action: "CreateClusterSecurityGroup",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateClusterSecurityGroupCommand = serializeAws_queryCreateClusterSecurityGroupCommand;
const serializeAws_queryCreateClusterSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateClusterSnapshotMessage(input, context),
        Action: "CreateClusterSnapshot",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateClusterSnapshotCommand = serializeAws_queryCreateClusterSnapshotCommand;
const serializeAws_queryCreateClusterSubnetGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateClusterSubnetGroupMessage(input, context),
        Action: "CreateClusterSubnetGroup",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateClusterSubnetGroupCommand = serializeAws_queryCreateClusterSubnetGroupCommand;
const serializeAws_queryCreateEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateEndpointAccessMessage(input, context),
        Action: "CreateEndpointAccess",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateEndpointAccessCommand = serializeAws_queryCreateEndpointAccessCommand;
const serializeAws_queryCreateEventSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateEventSubscriptionMessage(input, context),
        Action: "CreateEventSubscription",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateEventSubscriptionCommand = serializeAws_queryCreateEventSubscriptionCommand;
const serializeAws_queryCreateHsmClientCertificateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateHsmClientCertificateMessage(input, context),
        Action: "CreateHsmClientCertificate",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateHsmClientCertificateCommand = serializeAws_queryCreateHsmClientCertificateCommand;
const serializeAws_queryCreateHsmConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateHsmConfigurationMessage(input, context),
        Action: "CreateHsmConfiguration",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateHsmConfigurationCommand = serializeAws_queryCreateHsmConfigurationCommand;
const serializeAws_queryCreateScheduledActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateScheduledActionMessage(input, context),
        Action: "CreateScheduledAction",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateScheduledActionCommand = serializeAws_queryCreateScheduledActionCommand;
const serializeAws_queryCreateSnapshotCopyGrantCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateSnapshotCopyGrantMessage(input, context),
        Action: "CreateSnapshotCopyGrant",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateSnapshotCopyGrantCommand = serializeAws_queryCreateSnapshotCopyGrantCommand;
const serializeAws_queryCreateSnapshotScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateSnapshotScheduleMessage(input, context),
        Action: "CreateSnapshotSchedule",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateSnapshotScheduleCommand = serializeAws_queryCreateSnapshotScheduleCommand;
const serializeAws_queryCreateTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateTagsMessage(input, context),
        Action: "CreateTags",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateTagsCommand = serializeAws_queryCreateTagsCommand;
const serializeAws_queryCreateUsageLimitCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateUsageLimitMessage(input, context),
        Action: "CreateUsageLimit",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateUsageLimitCommand = serializeAws_queryCreateUsageLimitCommand;
const serializeAws_queryDeauthorizeDataShareCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeauthorizeDataShareMessage(input, context),
        Action: "DeauthorizeDataShare",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeauthorizeDataShareCommand = serializeAws_queryDeauthorizeDataShareCommand;
const serializeAws_queryDeleteAuthenticationProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteAuthenticationProfileMessage(input, context),
        Action: "DeleteAuthenticationProfile",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteAuthenticationProfileCommand = serializeAws_queryDeleteAuthenticationProfileCommand;
const serializeAws_queryDeleteClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteClusterMessage(input, context),
        Action: "DeleteCluster",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteClusterCommand = serializeAws_queryDeleteClusterCommand;
const serializeAws_queryDeleteClusterParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteClusterParameterGroupMessage(input, context),
        Action: "DeleteClusterParameterGroup",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteClusterParameterGroupCommand = serializeAws_queryDeleteClusterParameterGroupCommand;
const serializeAws_queryDeleteClusterSecurityGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteClusterSecurityGroupMessage(input, context),
        Action: "DeleteClusterSecurityGroup",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteClusterSecurityGroupCommand = serializeAws_queryDeleteClusterSecurityGroupCommand;
const serializeAws_queryDeleteClusterSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteClusterSnapshotMessage(input, context),
        Action: "DeleteClusterSnapshot",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteClusterSnapshotCommand = serializeAws_queryDeleteClusterSnapshotCommand;
const serializeAws_queryDeleteClusterSubnetGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteClusterSubnetGroupMessage(input, context),
        Action: "DeleteClusterSubnetGroup",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteClusterSubnetGroupCommand = serializeAws_queryDeleteClusterSubnetGroupCommand;
const serializeAws_queryDeleteEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteEndpointAccessMessage(input, context),
        Action: "DeleteEndpointAccess",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteEndpointAccessCommand = serializeAws_queryDeleteEndpointAccessCommand;
const serializeAws_queryDeleteEventSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteEventSubscriptionMessage(input, context),
        Action: "DeleteEventSubscription",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteEventSubscriptionCommand = serializeAws_queryDeleteEventSubscriptionCommand;
const serializeAws_queryDeleteHsmClientCertificateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteHsmClientCertificateMessage(input, context),
        Action: "DeleteHsmClientCertificate",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteHsmClientCertificateCommand = serializeAws_queryDeleteHsmClientCertificateCommand;
const serializeAws_queryDeleteHsmConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteHsmConfigurationMessage(input, context),
        Action: "DeleteHsmConfiguration",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteHsmConfigurationCommand = serializeAws_queryDeleteHsmConfigurationCommand;
const serializeAws_queryDeletePartnerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPartnerIntegrationInputMessage(input, context),
        Action: "DeletePartner",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeletePartnerCommand = serializeAws_queryDeletePartnerCommand;
const serializeAws_queryDeleteScheduledActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteScheduledActionMessage(input, context),
        Action: "DeleteScheduledAction",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteScheduledActionCommand = serializeAws_queryDeleteScheduledActionCommand;
const serializeAws_queryDeleteSnapshotCopyGrantCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteSnapshotCopyGrantMessage(input, context),
        Action: "DeleteSnapshotCopyGrant",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteSnapshotCopyGrantCommand = serializeAws_queryDeleteSnapshotCopyGrantCommand;
const serializeAws_queryDeleteSnapshotScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteSnapshotScheduleMessage(input, context),
        Action: "DeleteSnapshotSchedule",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteSnapshotScheduleCommand = serializeAws_queryDeleteSnapshotScheduleCommand;
const serializeAws_queryDeleteTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteTagsMessage(input, context),
        Action: "DeleteTags",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteTagsCommand = serializeAws_queryDeleteTagsCommand;
const serializeAws_queryDeleteUsageLimitCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteUsageLimitMessage(input, context),
        Action: "DeleteUsageLimit",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteUsageLimitCommand = serializeAws_queryDeleteUsageLimitCommand;
const serializeAws_queryDescribeAccountAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeAccountAttributesMessage(input, context),
        Action: "DescribeAccountAttributes",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeAccountAttributesCommand = serializeAws_queryDescribeAccountAttributesCommand;
const serializeAws_queryDescribeAuthenticationProfilesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeAuthenticationProfilesMessage(input, context),
        Action: "DescribeAuthenticationProfiles",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeAuthenticationProfilesCommand = serializeAws_queryDescribeAuthenticationProfilesCommand;
const serializeAws_queryDescribeClusterDbRevisionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeClusterDbRevisionsMessage(input, context),
        Action: "DescribeClusterDbRevisions",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeClusterDbRevisionsCommand = serializeAws_queryDescribeClusterDbRevisionsCommand;
const serializeAws_queryDescribeClusterParameterGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeClusterParameterGroupsMessage(input, context),
        Action: "DescribeClusterParameterGroups",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeClusterParameterGroupsCommand = serializeAws_queryDescribeClusterParameterGroupsCommand;
const serializeAws_queryDescribeClusterParametersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeClusterParametersMessage(input, context),
        Action: "DescribeClusterParameters",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeClusterParametersCommand = serializeAws_queryDescribeClusterParametersCommand;
const serializeAws_queryDescribeClustersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeClustersMessage(input, context),
        Action: "DescribeClusters",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeClustersCommand = serializeAws_queryDescribeClustersCommand;
const serializeAws_queryDescribeClusterSecurityGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeClusterSecurityGroupsMessage(input, context),
        Action: "DescribeClusterSecurityGroups",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeClusterSecurityGroupsCommand = serializeAws_queryDescribeClusterSecurityGroupsCommand;
const serializeAws_queryDescribeClusterSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeClusterSnapshotsMessage(input, context),
        Action: "DescribeClusterSnapshots",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeClusterSnapshotsCommand = serializeAws_queryDescribeClusterSnapshotsCommand;
const serializeAws_queryDescribeClusterSubnetGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeClusterSubnetGroupsMessage(input, context),
        Action: "DescribeClusterSubnetGroups",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeClusterSubnetGroupsCommand = serializeAws_queryDescribeClusterSubnetGroupsCommand;
const serializeAws_queryDescribeClusterTracksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeClusterTracksMessage(input, context),
        Action: "DescribeClusterTracks",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeClusterTracksCommand = serializeAws_queryDescribeClusterTracksCommand;
const serializeAws_queryDescribeClusterVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeClusterVersionsMessage(input, context),
        Action: "DescribeClusterVersions",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeClusterVersionsCommand = serializeAws_queryDescribeClusterVersionsCommand;
const serializeAws_queryDescribeDataSharesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDataSharesMessage(input, context),
        Action: "DescribeDataShares",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeDataSharesCommand = serializeAws_queryDescribeDataSharesCommand;
const serializeAws_queryDescribeDataSharesForConsumerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDataSharesForConsumerMessage(input, context),
        Action: "DescribeDataSharesForConsumer",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeDataSharesForConsumerCommand = serializeAws_queryDescribeDataSharesForConsumerCommand;
const serializeAws_queryDescribeDataSharesForProducerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDataSharesForProducerMessage(input, context),
        Action: "DescribeDataSharesForProducer",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeDataSharesForProducerCommand = serializeAws_queryDescribeDataSharesForProducerCommand;
const serializeAws_queryDescribeDefaultClusterParametersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDefaultClusterParametersMessage(input, context),
        Action: "DescribeDefaultClusterParameters",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeDefaultClusterParametersCommand = serializeAws_queryDescribeDefaultClusterParametersCommand;
const serializeAws_queryDescribeEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEndpointAccessMessage(input, context),
        Action: "DescribeEndpointAccess",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEndpointAccessCommand = serializeAws_queryDescribeEndpointAccessCommand;
const serializeAws_queryDescribeEndpointAuthorizationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEndpointAuthorizationMessage(input, context),
        Action: "DescribeEndpointAuthorization",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEndpointAuthorizationCommand = serializeAws_queryDescribeEndpointAuthorizationCommand;
const serializeAws_queryDescribeEventCategoriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEventCategoriesMessage(input, context),
        Action: "DescribeEventCategories",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEventCategoriesCommand = serializeAws_queryDescribeEventCategoriesCommand;
const serializeAws_queryDescribeEventsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEventsMessage(input, context),
        Action: "DescribeEvents",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEventsCommand = serializeAws_queryDescribeEventsCommand;
const serializeAws_queryDescribeEventSubscriptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEventSubscriptionsMessage(input, context),
        Action: "DescribeEventSubscriptions",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEventSubscriptionsCommand = serializeAws_queryDescribeEventSubscriptionsCommand;
const serializeAws_queryDescribeHsmClientCertificatesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeHsmClientCertificatesMessage(input, context),
        Action: "DescribeHsmClientCertificates",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeHsmClientCertificatesCommand = serializeAws_queryDescribeHsmClientCertificatesCommand;
const serializeAws_queryDescribeHsmConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeHsmConfigurationsMessage(input, context),
        Action: "DescribeHsmConfigurations",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeHsmConfigurationsCommand = serializeAws_queryDescribeHsmConfigurationsCommand;
const serializeAws_queryDescribeLoggingStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeLoggingStatusMessage(input, context),
        Action: "DescribeLoggingStatus",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeLoggingStatusCommand = serializeAws_queryDescribeLoggingStatusCommand;
const serializeAws_queryDescribeNodeConfigurationOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeNodeConfigurationOptionsMessage(input, context),
        Action: "DescribeNodeConfigurationOptions",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeNodeConfigurationOptionsCommand = serializeAws_queryDescribeNodeConfigurationOptionsCommand;
const serializeAws_queryDescribeOrderableClusterOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeOrderableClusterOptionsMessage(input, context),
        Action: "DescribeOrderableClusterOptions",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeOrderableClusterOptionsCommand = serializeAws_queryDescribeOrderableClusterOptionsCommand;
const serializeAws_queryDescribePartnersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribePartnersInputMessage(input, context),
        Action: "DescribePartners",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribePartnersCommand = serializeAws_queryDescribePartnersCommand;
const serializeAws_queryDescribeReservedNodeExchangeStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeReservedNodeExchangeStatusInputMessage(input, context),
        Action: "DescribeReservedNodeExchangeStatus",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeReservedNodeExchangeStatusCommand = serializeAws_queryDescribeReservedNodeExchangeStatusCommand;
const serializeAws_queryDescribeReservedNodeOfferingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeReservedNodeOfferingsMessage(input, context),
        Action: "DescribeReservedNodeOfferings",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeReservedNodeOfferingsCommand = serializeAws_queryDescribeReservedNodeOfferingsCommand;
const serializeAws_queryDescribeReservedNodesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeReservedNodesMessage(input, context),
        Action: "DescribeReservedNodes",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeReservedNodesCommand = serializeAws_queryDescribeReservedNodesCommand;
const serializeAws_queryDescribeResizeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeResizeMessage(input, context),
        Action: "DescribeResize",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeResizeCommand = serializeAws_queryDescribeResizeCommand;
const serializeAws_queryDescribeScheduledActionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeScheduledActionsMessage(input, context),
        Action: "DescribeScheduledActions",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeScheduledActionsCommand = serializeAws_queryDescribeScheduledActionsCommand;
const serializeAws_queryDescribeSnapshotCopyGrantsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeSnapshotCopyGrantsMessage(input, context),
        Action: "DescribeSnapshotCopyGrants",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeSnapshotCopyGrantsCommand = serializeAws_queryDescribeSnapshotCopyGrantsCommand;
const serializeAws_queryDescribeSnapshotSchedulesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeSnapshotSchedulesMessage(input, context),
        Action: "DescribeSnapshotSchedules",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeSnapshotSchedulesCommand = serializeAws_queryDescribeSnapshotSchedulesCommand;
const serializeAws_queryDescribeStorageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "DescribeStorage",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeStorageCommand = serializeAws_queryDescribeStorageCommand;
const serializeAws_queryDescribeTableRestoreStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeTableRestoreStatusMessage(input, context),
        Action: "DescribeTableRestoreStatus",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeTableRestoreStatusCommand = serializeAws_queryDescribeTableRestoreStatusCommand;
const serializeAws_queryDescribeTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeTagsMessage(input, context),
        Action: "DescribeTags",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeTagsCommand = serializeAws_queryDescribeTagsCommand;
const serializeAws_queryDescribeUsageLimitsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeUsageLimitsMessage(input, context),
        Action: "DescribeUsageLimits",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeUsageLimitsCommand = serializeAws_queryDescribeUsageLimitsCommand;
const serializeAws_queryDisableLoggingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDisableLoggingMessage(input, context),
        Action: "DisableLogging",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDisableLoggingCommand = serializeAws_queryDisableLoggingCommand;
const serializeAws_queryDisableSnapshotCopyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDisableSnapshotCopyMessage(input, context),
        Action: "DisableSnapshotCopy",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDisableSnapshotCopyCommand = serializeAws_queryDisableSnapshotCopyCommand;
const serializeAws_queryDisassociateDataShareConsumerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDisassociateDataShareConsumerMessage(input, context),
        Action: "DisassociateDataShareConsumer",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDisassociateDataShareConsumerCommand = serializeAws_queryDisassociateDataShareConsumerCommand;
const serializeAws_queryEnableLoggingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryEnableLoggingMessage(input, context),
        Action: "EnableLogging",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryEnableLoggingCommand = serializeAws_queryEnableLoggingCommand;
const serializeAws_queryEnableSnapshotCopyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryEnableSnapshotCopyMessage(input, context),
        Action: "EnableSnapshotCopy",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryEnableSnapshotCopyCommand = serializeAws_queryEnableSnapshotCopyCommand;
const serializeAws_queryGetClusterCredentialsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetClusterCredentialsMessage(input, context),
        Action: "GetClusterCredentials",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryGetClusterCredentialsCommand = serializeAws_queryGetClusterCredentialsCommand;
const serializeAws_queryGetClusterCredentialsWithIAMCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetClusterCredentialsWithIAMMessage(input, context),
        Action: "GetClusterCredentialsWithIAM",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryGetClusterCredentialsWithIAMCommand = serializeAws_queryGetClusterCredentialsWithIAMCommand;
const serializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetReservedNodeExchangeConfigurationOptionsInputMessage(input, context),
        Action: "GetReservedNodeExchangeConfigurationOptions",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommand = serializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommand;
const serializeAws_queryGetReservedNodeExchangeOfferingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetReservedNodeExchangeOfferingsInputMessage(input, context),
        Action: "GetReservedNodeExchangeOfferings",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryGetReservedNodeExchangeOfferingsCommand = serializeAws_queryGetReservedNodeExchangeOfferingsCommand;
const serializeAws_queryModifyAquaConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyAquaInputMessage(input, context),
        Action: "ModifyAquaConfiguration",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyAquaConfigurationCommand = serializeAws_queryModifyAquaConfigurationCommand;
const serializeAws_queryModifyAuthenticationProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyAuthenticationProfileMessage(input, context),
        Action: "ModifyAuthenticationProfile",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyAuthenticationProfileCommand = serializeAws_queryModifyAuthenticationProfileCommand;
const serializeAws_queryModifyClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyClusterMessage(input, context),
        Action: "ModifyCluster",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyClusterCommand = serializeAws_queryModifyClusterCommand;
const serializeAws_queryModifyClusterDbRevisionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyClusterDbRevisionMessage(input, context),
        Action: "ModifyClusterDbRevision",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyClusterDbRevisionCommand = serializeAws_queryModifyClusterDbRevisionCommand;
const serializeAws_queryModifyClusterIamRolesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyClusterIamRolesMessage(input, context),
        Action: "ModifyClusterIamRoles",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyClusterIamRolesCommand = serializeAws_queryModifyClusterIamRolesCommand;
const serializeAws_queryModifyClusterMaintenanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyClusterMaintenanceMessage(input, context),
        Action: "ModifyClusterMaintenance",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyClusterMaintenanceCommand = serializeAws_queryModifyClusterMaintenanceCommand;
const serializeAws_queryModifyClusterParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyClusterParameterGroupMessage(input, context),
        Action: "ModifyClusterParameterGroup",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyClusterParameterGroupCommand = serializeAws_queryModifyClusterParameterGroupCommand;
const serializeAws_queryModifyClusterSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyClusterSnapshotMessage(input, context),
        Action: "ModifyClusterSnapshot",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyClusterSnapshotCommand = serializeAws_queryModifyClusterSnapshotCommand;
const serializeAws_queryModifyClusterSnapshotScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyClusterSnapshotScheduleMessage(input, context),
        Action: "ModifyClusterSnapshotSchedule",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyClusterSnapshotScheduleCommand = serializeAws_queryModifyClusterSnapshotScheduleCommand;
const serializeAws_queryModifyClusterSubnetGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyClusterSubnetGroupMessage(input, context),
        Action: "ModifyClusterSubnetGroup",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyClusterSubnetGroupCommand = serializeAws_queryModifyClusterSubnetGroupCommand;
const serializeAws_queryModifyEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyEndpointAccessMessage(input, context),
        Action: "ModifyEndpointAccess",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyEndpointAccessCommand = serializeAws_queryModifyEndpointAccessCommand;
const serializeAws_queryModifyEventSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyEventSubscriptionMessage(input, context),
        Action: "ModifyEventSubscription",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyEventSubscriptionCommand = serializeAws_queryModifyEventSubscriptionCommand;
const serializeAws_queryModifyScheduledActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyScheduledActionMessage(input, context),
        Action: "ModifyScheduledAction",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyScheduledActionCommand = serializeAws_queryModifyScheduledActionCommand;
const serializeAws_queryModifySnapshotCopyRetentionPeriodCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifySnapshotCopyRetentionPeriodMessage(input, context),
        Action: "ModifySnapshotCopyRetentionPeriod",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifySnapshotCopyRetentionPeriodCommand = serializeAws_queryModifySnapshotCopyRetentionPeriodCommand;
const serializeAws_queryModifySnapshotScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifySnapshotScheduleMessage(input, context),
        Action: "ModifySnapshotSchedule",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifySnapshotScheduleCommand = serializeAws_queryModifySnapshotScheduleCommand;
const serializeAws_queryModifyUsageLimitCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyUsageLimitMessage(input, context),
        Action: "ModifyUsageLimit",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryModifyUsageLimitCommand = serializeAws_queryModifyUsageLimitCommand;
const serializeAws_queryPauseClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPauseClusterMessage(input, context),
        Action: "PauseCluster",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryPauseClusterCommand = serializeAws_queryPauseClusterCommand;
const serializeAws_queryPurchaseReservedNodeOfferingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPurchaseReservedNodeOfferingMessage(input, context),
        Action: "PurchaseReservedNodeOffering",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryPurchaseReservedNodeOfferingCommand = serializeAws_queryPurchaseReservedNodeOfferingCommand;
const serializeAws_queryRebootClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRebootClusterMessage(input, context),
        Action: "RebootCluster",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRebootClusterCommand = serializeAws_queryRebootClusterCommand;
const serializeAws_queryRejectDataShareCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRejectDataShareMessage(input, context),
        Action: "RejectDataShare",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRejectDataShareCommand = serializeAws_queryRejectDataShareCommand;
const serializeAws_queryResetClusterParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryResetClusterParameterGroupMessage(input, context),
        Action: "ResetClusterParameterGroup",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryResetClusterParameterGroupCommand = serializeAws_queryResetClusterParameterGroupCommand;
const serializeAws_queryResizeClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryResizeClusterMessage(input, context),
        Action: "ResizeCluster",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryResizeClusterCommand = serializeAws_queryResizeClusterCommand;
const serializeAws_queryRestoreFromClusterSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRestoreFromClusterSnapshotMessage(input, context),
        Action: "RestoreFromClusterSnapshot",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRestoreFromClusterSnapshotCommand = serializeAws_queryRestoreFromClusterSnapshotCommand;
const serializeAws_queryRestoreTableFromClusterSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRestoreTableFromClusterSnapshotMessage(input, context),
        Action: "RestoreTableFromClusterSnapshot",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRestoreTableFromClusterSnapshotCommand = serializeAws_queryRestoreTableFromClusterSnapshotCommand;
const serializeAws_queryResumeClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryResumeClusterMessage(input, context),
        Action: "ResumeCluster",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryResumeClusterCommand = serializeAws_queryResumeClusterCommand;
const serializeAws_queryRevokeClusterSecurityGroupIngressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRevokeClusterSecurityGroupIngressMessage(input, context),
        Action: "RevokeClusterSecurityGroupIngress",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRevokeClusterSecurityGroupIngressCommand = serializeAws_queryRevokeClusterSecurityGroupIngressCommand;
const serializeAws_queryRevokeEndpointAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRevokeEndpointAccessMessage(input, context),
        Action: "RevokeEndpointAccess",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRevokeEndpointAccessCommand = serializeAws_queryRevokeEndpointAccessCommand;
const serializeAws_queryRevokeSnapshotAccessCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRevokeSnapshotAccessMessage(input, context),
        Action: "RevokeSnapshotAccess",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRevokeSnapshotAccessCommand = serializeAws_queryRevokeSnapshotAccessCommand;
const serializeAws_queryRotateEncryptionKeyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRotateEncryptionKeyMessage(input, context),
        Action: "RotateEncryptionKey",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRotateEncryptionKeyCommand = serializeAws_queryRotateEncryptionKeyCommand;
const serializeAws_queryUpdatePartnerStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdatePartnerStatusInputMessage(input, context),
        Action: "UpdatePartnerStatus",
        Version: "2012-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryUpdatePartnerStatusCommand = serializeAws_queryUpdatePartnerStatusCommand;
const deserializeAws_queryAcceptReservedNodeExchangeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAcceptReservedNodeExchangeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAcceptReservedNodeExchangeOutputMessage(data.AcceptReservedNodeExchangeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAcceptReservedNodeExchangeCommand = deserializeAws_queryAcceptReservedNodeExchangeCommand;
const deserializeAws_queryAcceptReservedNodeExchangeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DependentServiceUnavailableFault":
        case "com.amazonaws.redshift#DependentServiceUnavailableFault":
            throw await deserializeAws_queryDependentServiceUnavailableFaultResponse(parsedOutput, context);
        case "InvalidReservedNodeState":
        case "com.amazonaws.redshift#InvalidReservedNodeStateFault":
            throw await deserializeAws_queryInvalidReservedNodeStateFaultResponse(parsedOutput, context);
        case "ReservedNodeAlreadyExists":
        case "com.amazonaws.redshift#ReservedNodeAlreadyExistsFault":
            throw await deserializeAws_queryReservedNodeAlreadyExistsFaultResponse(parsedOutput, context);
        case "ReservedNodeAlreadyMigrated":
        case "com.amazonaws.redshift#ReservedNodeAlreadyMigratedFault":
            throw await deserializeAws_queryReservedNodeAlreadyMigratedFaultResponse(parsedOutput, context);
        case "ReservedNodeNotFound":
        case "com.amazonaws.redshift#ReservedNodeNotFoundFault":
            throw await deserializeAws_queryReservedNodeNotFoundFaultResponse(parsedOutput, context);
        case "ReservedNodeOfferingNotFound":
        case "com.amazonaws.redshift#ReservedNodeOfferingNotFoundFault":
            throw await deserializeAws_queryReservedNodeOfferingNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAddPartnerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAddPartnerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPartnerIntegrationOutputMessage(data.AddPartnerResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAddPartnerCommand = deserializeAws_queryAddPartnerCommand;
const deserializeAws_queryAddPartnerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "PartnerNotFound":
        case "com.amazonaws.redshift#PartnerNotFoundFault":
            throw await deserializeAws_queryPartnerNotFoundFaultResponse(parsedOutput, context);
        case "UnauthorizedPartnerIntegration":
        case "com.amazonaws.redshift#UnauthorizedPartnerIntegrationFault":
            throw await deserializeAws_queryUnauthorizedPartnerIntegrationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAssociateDataShareConsumerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAssociateDataShareConsumerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDataShare(data.AssociateDataShareConsumerResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAssociateDataShareConsumerCommand = deserializeAws_queryAssociateDataShareConsumerCommand;
const deserializeAws_queryAssociateDataShareConsumerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDataShareFault":
        case "com.amazonaws.redshift#InvalidDataShareFault":
            throw await deserializeAws_queryInvalidDataShareFaultResponse(parsedOutput, context);
        case "InvalidNamespaceFault":
        case "com.amazonaws.redshift#InvalidNamespaceFault":
            throw await deserializeAws_queryInvalidNamespaceFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAuthorizeClusterSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAuthorizeClusterSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAuthorizeClusterSecurityGroupIngressResult(data.AuthorizeClusterSecurityGroupIngressResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAuthorizeClusterSecurityGroupIngressCommand = deserializeAws_queryAuthorizeClusterSecurityGroupIngressCommand;
const deserializeAws_queryAuthorizeClusterSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationAlreadyExists":
        case "com.amazonaws.redshift#AuthorizationAlreadyExistsFault":
            throw await deserializeAws_queryAuthorizationAlreadyExistsFaultResponse(parsedOutput, context);
        case "AuthorizationQuotaExceeded":
        case "com.amazonaws.redshift#AuthorizationQuotaExceededFault":
            throw await deserializeAws_queryAuthorizationQuotaExceededFaultResponse(parsedOutput, context);
        case "ClusterSecurityGroupNotFound":
        case "com.amazonaws.redshift#ClusterSecurityGroupNotFoundFault":
            throw await deserializeAws_queryClusterSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSecurityGroupState":
        case "com.amazonaws.redshift#InvalidClusterSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSecurityGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAuthorizeDataShareCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAuthorizeDataShareCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDataShare(data.AuthorizeDataShareResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAuthorizeDataShareCommand = deserializeAws_queryAuthorizeDataShareCommand;
const deserializeAws_queryAuthorizeDataShareCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDataShareFault":
        case "com.amazonaws.redshift#InvalidDataShareFault":
            throw await deserializeAws_queryInvalidDataShareFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAuthorizeEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAuthorizeEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEndpointAuthorization(data.AuthorizeEndpointAccessResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAuthorizeEndpointAccessCommand = deserializeAws_queryAuthorizeEndpointAccessCommand;
const deserializeAws_queryAuthorizeEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "EndpointAuthorizationAlreadyExists":
        case "com.amazonaws.redshift#EndpointAuthorizationAlreadyExistsFault":
            throw await deserializeAws_queryEndpointAuthorizationAlreadyExistsFaultResponse(parsedOutput, context);
        case "EndpointAuthorizationsPerClusterLimitExceeded":
        case "com.amazonaws.redshift#EndpointAuthorizationsPerClusterLimitExceededFault":
            throw await deserializeAws_queryEndpointAuthorizationsPerClusterLimitExceededFaultResponse(parsedOutput, context);
        case "InvalidAuthorizationState":
        case "com.amazonaws.redshift#InvalidAuthorizationStateFault":
            throw await deserializeAws_queryInvalidAuthorizationStateFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAuthorizeSnapshotAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAuthorizeSnapshotAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAuthorizeSnapshotAccessResult(data.AuthorizeSnapshotAccessResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAuthorizeSnapshotAccessCommand = deserializeAws_queryAuthorizeSnapshotAccessCommand;
const deserializeAws_queryAuthorizeSnapshotAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationAlreadyExists":
        case "com.amazonaws.redshift#AuthorizationAlreadyExistsFault":
            throw await deserializeAws_queryAuthorizationAlreadyExistsFaultResponse(parsedOutput, context);
        case "AuthorizationQuotaExceeded":
        case "com.amazonaws.redshift#AuthorizationQuotaExceededFault":
            throw await deserializeAws_queryAuthorizationQuotaExceededFaultResponse(parsedOutput, context);
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DependentServiceRequestThrottlingFault":
        case "com.amazonaws.redshift#DependentServiceRequestThrottlingFault":
            throw await deserializeAws_queryDependentServiceRequestThrottlingFaultResponse(parsedOutput, context);
        case "InvalidClusterSnapshotState":
        case "com.amazonaws.redshift#InvalidClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "LimitExceededFault":
        case "com.amazonaws.redshift#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryBatchDeleteClusterSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryBatchDeleteClusterSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryBatchDeleteClusterSnapshotsResult(data.BatchDeleteClusterSnapshotsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryBatchDeleteClusterSnapshotsCommand = deserializeAws_queryBatchDeleteClusterSnapshotsCommand;
const deserializeAws_queryBatchDeleteClusterSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BatchDeleteRequestSizeExceeded":
        case "com.amazonaws.redshift#BatchDeleteRequestSizeExceededFault":
            throw await deserializeAws_queryBatchDeleteRequestSizeExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryBatchModifyClusterSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryBatchModifyClusterSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryBatchModifyClusterSnapshotsOutputMessage(data.BatchModifyClusterSnapshotsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryBatchModifyClusterSnapshotsCommand = deserializeAws_queryBatchModifyClusterSnapshotsCommand;
const deserializeAws_queryBatchModifyClusterSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BatchModifyClusterSnapshotsLimitExceededFault":
        case "com.amazonaws.redshift#BatchModifyClusterSnapshotsLimitExceededFault":
            throw await deserializeAws_queryBatchModifyClusterSnapshotsLimitExceededFaultResponse(parsedOutput, context);
        case "InvalidRetentionPeriodFault":
        case "com.amazonaws.redshift#InvalidRetentionPeriodFault":
            throw await deserializeAws_queryInvalidRetentionPeriodFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCancelResizeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCancelResizeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryResizeProgressMessage(data.CancelResizeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCancelResizeCommand = deserializeAws_queryCancelResizeCommand;
const deserializeAws_queryCancelResizeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "ResizeNotFound":
        case "com.amazonaws.redshift#ResizeNotFoundFault":
            throw await deserializeAws_queryResizeNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCopyClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCopyClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCopyClusterSnapshotResult(data.CopyClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCopyClusterSnapshotCommand = deserializeAws_queryCopyClusterSnapshotCommand;
const deserializeAws_queryCopyClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSnapshotAlreadyExists":
        case "com.amazonaws.redshift#ClusterSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSnapshotQuotaExceeded":
        case "com.amazonaws.redshift#ClusterSnapshotQuotaExceededFault":
            throw await deserializeAws_queryClusterSnapshotQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidClusterSnapshotState":
        case "com.amazonaws.redshift#InvalidClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidRetentionPeriodFault":
        case "com.amazonaws.redshift#InvalidRetentionPeriodFault":
            throw await deserializeAws_queryInvalidRetentionPeriodFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateAuthenticationProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateAuthenticationProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateAuthenticationProfileResult(data.CreateAuthenticationProfileResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateAuthenticationProfileCommand = deserializeAws_queryCreateAuthenticationProfileCommand;
const deserializeAws_queryCreateAuthenticationProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthenticationProfileAlreadyExistsFault":
        case "com.amazonaws.redshift#AuthenticationProfileAlreadyExistsFault":
            throw await deserializeAws_queryAuthenticationProfileAlreadyExistsFaultResponse(parsedOutput, context);
        case "AuthenticationProfileQuotaExceededFault":
        case "com.amazonaws.redshift#AuthenticationProfileQuotaExceededFault":
            throw await deserializeAws_queryAuthenticationProfileQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidAuthenticationProfileRequestFault":
        case "com.amazonaws.redshift#InvalidAuthenticationProfileRequestFault":
            throw await deserializeAws_queryInvalidAuthenticationProfileRequestFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateClusterResult(data.CreateClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateClusterCommand = deserializeAws_queryCreateClusterCommand;
const deserializeAws_queryCreateClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterAlreadyExists":
        case "com.amazonaws.redshift#ClusterAlreadyExistsFault":
            throw await deserializeAws_queryClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "ClusterParameterGroupNotFound":
        case "com.amazonaws.redshift#ClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "ClusterQuotaExceeded":
        case "com.amazonaws.redshift#ClusterQuotaExceededFault":
            throw await deserializeAws_queryClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "ClusterSecurityGroupNotFound":
        case "com.amazonaws.redshift#ClusterSecurityGroupNotFoundFault":
            throw await deserializeAws_queryClusterSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSubnetGroupNotFoundFault":
        case "com.amazonaws.redshift#ClusterSubnetGroupNotFoundFault":
            throw await deserializeAws_queryClusterSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DependentServiceRequestThrottlingFault":
        case "com.amazonaws.redshift#DependentServiceRequestThrottlingFault":
            throw await deserializeAws_queryDependentServiceRequestThrottlingFaultResponse(parsedOutput, context);
        case "HsmClientCertificateNotFoundFault":
        case "com.amazonaws.redshift#HsmClientCertificateNotFoundFault":
            throw await deserializeAws_queryHsmClientCertificateNotFoundFaultResponse(parsedOutput, context);
        case "HsmConfigurationNotFoundFault":
        case "com.amazonaws.redshift#HsmConfigurationNotFoundFault":
            throw await deserializeAws_queryHsmConfigurationNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientClusterCapacity":
        case "com.amazonaws.redshift#InsufficientClusterCapacityFault":
            throw await deserializeAws_queryInsufficientClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidClusterSubnetGroupStateFault":
        case "com.amazonaws.redshift#InvalidClusterSubnetGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidClusterTrack":
        case "com.amazonaws.redshift#InvalidClusterTrackFault":
            throw await deserializeAws_queryInvalidClusterTrackFaultResponse(parsedOutput, context);
        case "InvalidElasticIpFault":
        case "com.amazonaws.redshift#InvalidElasticIpFault":
            throw await deserializeAws_queryInvalidElasticIpFaultResponse(parsedOutput, context);
        case "InvalidRetentionPeriodFault":
        case "com.amazonaws.redshift#InvalidRetentionPeriodFault":
            throw await deserializeAws_queryInvalidRetentionPeriodFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.redshift#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.redshift#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "LimitExceededFault":
        case "com.amazonaws.redshift#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "NumberOfNodesPerClusterLimitExceeded":
        case "com.amazonaws.redshift#NumberOfNodesPerClusterLimitExceededFault":
            throw await deserializeAws_queryNumberOfNodesPerClusterLimitExceededFaultResponse(parsedOutput, context);
        case "NumberOfNodesQuotaExceeded":
        case "com.amazonaws.redshift#NumberOfNodesQuotaExceededFault":
            throw await deserializeAws_queryNumberOfNodesQuotaExceededFaultResponse(parsedOutput, context);
        case "SnapshotScheduleNotFound":
        case "com.amazonaws.redshift#SnapshotScheduleNotFoundFault":
            throw await deserializeAws_querySnapshotScheduleNotFoundFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateClusterParameterGroupResult(data.CreateClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateClusterParameterGroupCommand = deserializeAws_queryCreateClusterParameterGroupCommand;
const deserializeAws_queryCreateClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterParameterGroupAlreadyExists":
        case "com.amazonaws.redshift#ClusterParameterGroupAlreadyExistsFault":
            throw await deserializeAws_queryClusterParameterGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "ClusterParameterGroupQuotaExceeded":
        case "com.amazonaws.redshift#ClusterParameterGroupQuotaExceededFault":
            throw await deserializeAws_queryClusterParameterGroupQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateClusterSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateClusterSecurityGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateClusterSecurityGroupResult(data.CreateClusterSecurityGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateClusterSecurityGroupCommand = deserializeAws_queryCreateClusterSecurityGroupCommand;
const deserializeAws_queryCreateClusterSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSecurityGroupAlreadyExists":
        case "com.amazonaws.redshift#ClusterSecurityGroupAlreadyExistsFault":
            throw await deserializeAws_queryClusterSecurityGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "QuotaExceeded.ClusterSecurityGroup":
        case "com.amazonaws.redshift#ClusterSecurityGroupQuotaExceededFault":
            throw await deserializeAws_queryClusterSecurityGroupQuotaExceededFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateClusterSnapshotResult(data.CreateClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateClusterSnapshotCommand = deserializeAws_queryCreateClusterSnapshotCommand;
const deserializeAws_queryCreateClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSnapshotAlreadyExists":
        case "com.amazonaws.redshift#ClusterSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "ClusterSnapshotQuotaExceeded":
        case "com.amazonaws.redshift#ClusterSnapshotQuotaExceededFault":
            throw await deserializeAws_queryClusterSnapshotQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidRetentionPeriodFault":
        case "com.amazonaws.redshift#InvalidRetentionPeriodFault":
            throw await deserializeAws_queryInvalidRetentionPeriodFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateClusterSubnetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateClusterSubnetGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateClusterSubnetGroupResult(data.CreateClusterSubnetGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateClusterSubnetGroupCommand = deserializeAws_queryCreateClusterSubnetGroupCommand;
const deserializeAws_queryCreateClusterSubnetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSubnetGroupAlreadyExists":
        case "com.amazonaws.redshift#ClusterSubnetGroupAlreadyExistsFault":
            throw await deserializeAws_queryClusterSubnetGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "ClusterSubnetGroupQuotaExceeded":
        case "com.amazonaws.redshift#ClusterSubnetGroupQuotaExceededFault":
            throw await deserializeAws_queryClusterSubnetGroupQuotaExceededFaultResponse(parsedOutput, context);
        case "ClusterSubnetQuotaExceededFault":
        case "com.amazonaws.redshift#ClusterSubnetQuotaExceededFault":
            throw await deserializeAws_queryClusterSubnetQuotaExceededFaultResponse(parsedOutput, context);
        case "DependentServiceRequestThrottlingFault":
        case "com.amazonaws.redshift#DependentServiceRequestThrottlingFault":
            throw await deserializeAws_queryDependentServiceRequestThrottlingFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.redshift#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEndpointAccess(data.CreateEndpointAccessResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateEndpointAccessCommand = deserializeAws_queryCreateEndpointAccessCommand;
const deserializeAws_queryCreateEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessToClusterDenied":
        case "com.amazonaws.redshift#AccessToClusterDeniedFault":
            throw await deserializeAws_queryAccessToClusterDeniedFaultResponse(parsedOutput, context);
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSubnetGroupNotFoundFault":
        case "com.amazonaws.redshift#ClusterSubnetGroupNotFoundFault":
            throw await deserializeAws_queryClusterSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "EndpointAlreadyExists":
        case "com.amazonaws.redshift#EndpointAlreadyExistsFault":
            throw await deserializeAws_queryEndpointAlreadyExistsFaultResponse(parsedOutput, context);
        case "EndpointsPerAuthorizationLimitExceeded":
        case "com.amazonaws.redshift#EndpointsPerAuthorizationLimitExceededFault":
            throw await deserializeAws_queryEndpointsPerAuthorizationLimitExceededFaultResponse(parsedOutput, context);
        case "EndpointsPerClusterLimitExceeded":
        case "com.amazonaws.redshift#EndpointsPerClusterLimitExceededFault":
            throw await deserializeAws_queryEndpointsPerClusterLimitExceededFaultResponse(parsedOutput, context);
        case "InvalidClusterSecurityGroupState":
        case "com.amazonaws.redshift#InvalidClusterSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSecurityGroupStateFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateEventSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateEventSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateEventSubscriptionResult(data.CreateEventSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateEventSubscriptionCommand = deserializeAws_queryCreateEventSubscriptionCommand;
const deserializeAws_queryCreateEventSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EventSubscriptionQuotaExceeded":
        case "com.amazonaws.redshift#EventSubscriptionQuotaExceededFault":
            throw await deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "SNSInvalidTopic":
        case "com.amazonaws.redshift#SNSInvalidTopicFault":
            throw await deserializeAws_querySNSInvalidTopicFaultResponse(parsedOutput, context);
        case "SNSNoAuthorization":
        case "com.amazonaws.redshift#SNSNoAuthorizationFault":
            throw await deserializeAws_querySNSNoAuthorizationFaultResponse(parsedOutput, context);
        case "SNSTopicArnNotFound":
        case "com.amazonaws.redshift#SNSTopicArnNotFoundFault":
            throw await deserializeAws_querySNSTopicArnNotFoundFaultResponse(parsedOutput, context);
        case "SourceNotFound":
        case "com.amazonaws.redshift#SourceNotFoundFault":
            throw await deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionAlreadyExist":
        case "com.amazonaws.redshift#SubscriptionAlreadyExistFault":
            throw await deserializeAws_querySubscriptionAlreadyExistFaultResponse(parsedOutput, context);
        case "SubscriptionCategoryNotFound":
        case "com.amazonaws.redshift#SubscriptionCategoryNotFoundFault":
            throw await deserializeAws_querySubscriptionCategoryNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionEventIdNotFound":
        case "com.amazonaws.redshift#SubscriptionEventIdNotFoundFault":
            throw await deserializeAws_querySubscriptionEventIdNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionSeverityNotFound":
        case "com.amazonaws.redshift#SubscriptionSeverityNotFoundFault":
            throw await deserializeAws_querySubscriptionSeverityNotFoundFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateHsmClientCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateHsmClientCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateHsmClientCertificateResult(data.CreateHsmClientCertificateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateHsmClientCertificateCommand = deserializeAws_queryCreateHsmClientCertificateCommand;
const deserializeAws_queryCreateHsmClientCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HsmClientCertificateAlreadyExistsFault":
        case "com.amazonaws.redshift#HsmClientCertificateAlreadyExistsFault":
            throw await deserializeAws_queryHsmClientCertificateAlreadyExistsFaultResponse(parsedOutput, context);
        case "HsmClientCertificateQuotaExceededFault":
        case "com.amazonaws.redshift#HsmClientCertificateQuotaExceededFault":
            throw await deserializeAws_queryHsmClientCertificateQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateHsmConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateHsmConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateHsmConfigurationResult(data.CreateHsmConfigurationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateHsmConfigurationCommand = deserializeAws_queryCreateHsmConfigurationCommand;
const deserializeAws_queryCreateHsmConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HsmConfigurationAlreadyExistsFault":
        case "com.amazonaws.redshift#HsmConfigurationAlreadyExistsFault":
            throw await deserializeAws_queryHsmConfigurationAlreadyExistsFaultResponse(parsedOutput, context);
        case "HsmConfigurationQuotaExceededFault":
        case "com.amazonaws.redshift#HsmConfigurationQuotaExceededFault":
            throw await deserializeAws_queryHsmConfigurationQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateScheduledActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateScheduledActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryScheduledAction(data.CreateScheduledActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateScheduledActionCommand = deserializeAws_queryCreateScheduledActionCommand;
const deserializeAws_queryCreateScheduledActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidSchedule":
        case "com.amazonaws.redshift#InvalidScheduleFault":
            throw await deserializeAws_queryInvalidScheduleFaultResponse(parsedOutput, context);
        case "InvalidScheduledAction":
        case "com.amazonaws.redshift#InvalidScheduledActionFault":
            throw await deserializeAws_queryInvalidScheduledActionFaultResponse(parsedOutput, context);
        case "ScheduledActionAlreadyExists":
        case "com.amazonaws.redshift#ScheduledActionAlreadyExistsFault":
            throw await deserializeAws_queryScheduledActionAlreadyExistsFaultResponse(parsedOutput, context);
        case "ScheduledActionQuotaExceeded":
        case "com.amazonaws.redshift#ScheduledActionQuotaExceededFault":
            throw await deserializeAws_queryScheduledActionQuotaExceededFaultResponse(parsedOutput, context);
        case "ScheduledActionTypeUnsupported":
        case "com.amazonaws.redshift#ScheduledActionTypeUnsupportedFault":
            throw await deserializeAws_queryScheduledActionTypeUnsupportedFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateSnapshotCopyGrantCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateSnapshotCopyGrantCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateSnapshotCopyGrantResult(data.CreateSnapshotCopyGrantResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateSnapshotCopyGrantCommand = deserializeAws_queryCreateSnapshotCopyGrantCommand;
const deserializeAws_queryCreateSnapshotCopyGrantCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DependentServiceRequestThrottlingFault":
        case "com.amazonaws.redshift#DependentServiceRequestThrottlingFault":
            throw await deserializeAws_queryDependentServiceRequestThrottlingFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "LimitExceededFault":
        case "com.amazonaws.redshift#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "SnapshotCopyGrantAlreadyExistsFault":
        case "com.amazonaws.redshift#SnapshotCopyGrantAlreadyExistsFault":
            throw await deserializeAws_querySnapshotCopyGrantAlreadyExistsFaultResponse(parsedOutput, context);
        case "SnapshotCopyGrantQuotaExceededFault":
        case "com.amazonaws.redshift#SnapshotCopyGrantQuotaExceededFault":
            throw await deserializeAws_querySnapshotCopyGrantQuotaExceededFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateSnapshotScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateSnapshotScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySnapshotSchedule(data.CreateSnapshotScheduleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateSnapshotScheduleCommand = deserializeAws_queryCreateSnapshotScheduleCommand;
const deserializeAws_queryCreateSnapshotScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidSchedule":
        case "com.amazonaws.redshift#InvalidScheduleFault":
            throw await deserializeAws_queryInvalidScheduleFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "ScheduleDefinitionTypeUnsupported":
        case "com.amazonaws.redshift#ScheduleDefinitionTypeUnsupportedFault":
            throw await deserializeAws_queryScheduleDefinitionTypeUnsupportedFaultResponse(parsedOutput, context);
        case "SnapshotScheduleAlreadyExists":
        case "com.amazonaws.redshift#SnapshotScheduleAlreadyExistsFault":
            throw await deserializeAws_querySnapshotScheduleAlreadyExistsFaultResponse(parsedOutput, context);
        case "SnapshotScheduleQuotaExceeded":
        case "com.amazonaws.redshift#SnapshotScheduleQuotaExceededFault":
            throw await deserializeAws_querySnapshotScheduleQuotaExceededFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateTagsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateTagsCommand = deserializeAws_queryCreateTagsCommand;
const deserializeAws_queryCreateTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.redshift#ResourceNotFoundFault":
            throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateUsageLimitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateUsageLimitCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUsageLimit(data.CreateUsageLimitResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateUsageLimitCommand = deserializeAws_queryCreateUsageLimitCommand;
const deserializeAws_queryCreateUsageLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidUsageLimit":
        case "com.amazonaws.redshift#InvalidUsageLimitFault":
            throw await deserializeAws_queryInvalidUsageLimitFaultResponse(parsedOutput, context);
        case "LimitExceededFault":
        case "com.amazonaws.redshift#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        case "UsageLimitAlreadyExists":
        case "com.amazonaws.redshift#UsageLimitAlreadyExistsFault":
            throw await deserializeAws_queryUsageLimitAlreadyExistsFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeauthorizeDataShareCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeauthorizeDataShareCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDataShare(data.DeauthorizeDataShareResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeauthorizeDataShareCommand = deserializeAws_queryDeauthorizeDataShareCommand;
const deserializeAws_queryDeauthorizeDataShareCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDataShareFault":
        case "com.amazonaws.redshift#InvalidDataShareFault":
            throw await deserializeAws_queryInvalidDataShareFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteAuthenticationProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteAuthenticationProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteAuthenticationProfileResult(data.DeleteAuthenticationProfileResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteAuthenticationProfileCommand = deserializeAws_queryDeleteAuthenticationProfileCommand;
const deserializeAws_queryDeleteAuthenticationProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthenticationProfileNotFoundFault":
        case "com.amazonaws.redshift#AuthenticationProfileNotFoundFault":
            throw await deserializeAws_queryAuthenticationProfileNotFoundFaultResponse(parsedOutput, context);
        case "InvalidAuthenticationProfileRequestFault":
        case "com.amazonaws.redshift#InvalidAuthenticationProfileRequestFault":
            throw await deserializeAws_queryInvalidAuthenticationProfileRequestFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteClusterResult(data.DeleteClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteClusterCommand = deserializeAws_queryDeleteClusterCommand;
const deserializeAws_queryDeleteClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSnapshotAlreadyExists":
        case "com.amazonaws.redshift#ClusterSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "ClusterSnapshotQuotaExceeded":
        case "com.amazonaws.redshift#ClusterSnapshotQuotaExceededFault":
            throw await deserializeAws_queryClusterSnapshotQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidRetentionPeriodFault":
        case "com.amazonaws.redshift#InvalidRetentionPeriodFault":
            throw await deserializeAws_queryInvalidRetentionPeriodFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteClusterParameterGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteClusterParameterGroupCommand = deserializeAws_queryDeleteClusterParameterGroupCommand;
const deserializeAws_queryDeleteClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterParameterGroupNotFound":
        case "com.amazonaws.redshift#ClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterParameterGroupState":
        case "com.amazonaws.redshift#InvalidClusterParameterGroupStateFault":
            throw await deserializeAws_queryInvalidClusterParameterGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteClusterSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteClusterSecurityGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteClusterSecurityGroupCommand = deserializeAws_queryDeleteClusterSecurityGroupCommand;
const deserializeAws_queryDeleteClusterSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSecurityGroupNotFound":
        case "com.amazonaws.redshift#ClusterSecurityGroupNotFoundFault":
            throw await deserializeAws_queryClusterSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSecurityGroupState":
        case "com.amazonaws.redshift#InvalidClusterSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSecurityGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteClusterSnapshotResult(data.DeleteClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteClusterSnapshotCommand = deserializeAws_queryDeleteClusterSnapshotCommand;
const deserializeAws_queryDeleteClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSnapshotState":
        case "com.amazonaws.redshift#InvalidClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidClusterSnapshotStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteClusterSubnetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteClusterSubnetGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteClusterSubnetGroupCommand = deserializeAws_queryDeleteClusterSubnetGroupCommand;
const deserializeAws_queryDeleteClusterSubnetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSubnetGroupNotFoundFault":
        case "com.amazonaws.redshift#ClusterSubnetGroupNotFoundFault":
            throw await deserializeAws_queryClusterSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSubnetGroupStateFault":
        case "com.amazonaws.redshift#InvalidClusterSubnetGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidClusterSubnetStateFault":
        case "com.amazonaws.redshift#InvalidClusterSubnetStateFault":
            throw await deserializeAws_queryInvalidClusterSubnetStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEndpointAccess(data.DeleteEndpointAccessResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteEndpointAccessCommand = deserializeAws_queryDeleteEndpointAccessCommand;
const deserializeAws_queryDeleteEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "EndpointNotFound":
        case "com.amazonaws.redshift#EndpointNotFoundFault":
            throw await deserializeAws_queryEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSecurityGroupState":
        case "com.amazonaws.redshift#InvalidClusterSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSecurityGroupStateFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidEndpointState":
        case "com.amazonaws.redshift#InvalidEndpointStateFault":
            throw await deserializeAws_queryInvalidEndpointStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteEventSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteEventSubscriptionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteEventSubscriptionCommand = deserializeAws_queryDeleteEventSubscriptionCommand;
const deserializeAws_queryDeleteEventSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidSubscriptionStateFault":
        case "com.amazonaws.redshift#InvalidSubscriptionStateFault":
            throw await deserializeAws_queryInvalidSubscriptionStateFaultResponse(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.redshift#SubscriptionNotFoundFault":
            throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteHsmClientCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteHsmClientCertificateCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteHsmClientCertificateCommand = deserializeAws_queryDeleteHsmClientCertificateCommand;
const deserializeAws_queryDeleteHsmClientCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HsmClientCertificateNotFoundFault":
        case "com.amazonaws.redshift#HsmClientCertificateNotFoundFault":
            throw await deserializeAws_queryHsmClientCertificateNotFoundFaultResponse(parsedOutput, context);
        case "InvalidHsmClientCertificateStateFault":
        case "com.amazonaws.redshift#InvalidHsmClientCertificateStateFault":
            throw await deserializeAws_queryInvalidHsmClientCertificateStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteHsmConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteHsmConfigurationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteHsmConfigurationCommand = deserializeAws_queryDeleteHsmConfigurationCommand;
const deserializeAws_queryDeleteHsmConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HsmConfigurationNotFoundFault":
        case "com.amazonaws.redshift#HsmConfigurationNotFoundFault":
            throw await deserializeAws_queryHsmConfigurationNotFoundFaultResponse(parsedOutput, context);
        case "InvalidHsmConfigurationStateFault":
        case "com.amazonaws.redshift#InvalidHsmConfigurationStateFault":
            throw await deserializeAws_queryInvalidHsmConfigurationStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeletePartnerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeletePartnerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPartnerIntegrationOutputMessage(data.DeletePartnerResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeletePartnerCommand = deserializeAws_queryDeletePartnerCommand;
const deserializeAws_queryDeletePartnerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "PartnerNotFound":
        case "com.amazonaws.redshift#PartnerNotFoundFault":
            throw await deserializeAws_queryPartnerNotFoundFaultResponse(parsedOutput, context);
        case "UnauthorizedPartnerIntegration":
        case "com.amazonaws.redshift#UnauthorizedPartnerIntegrationFault":
            throw await deserializeAws_queryUnauthorizedPartnerIntegrationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteScheduledActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteScheduledActionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteScheduledActionCommand = deserializeAws_queryDeleteScheduledActionCommand;
const deserializeAws_queryDeleteScheduledActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ScheduledActionNotFound":
        case "com.amazonaws.redshift#ScheduledActionNotFoundFault":
            throw await deserializeAws_queryScheduledActionNotFoundFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteSnapshotCopyGrantCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteSnapshotCopyGrantCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteSnapshotCopyGrantCommand = deserializeAws_queryDeleteSnapshotCopyGrantCommand;
const deserializeAws_queryDeleteSnapshotCopyGrantCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidSnapshotCopyGrantStateFault":
        case "com.amazonaws.redshift#InvalidSnapshotCopyGrantStateFault":
            throw await deserializeAws_queryInvalidSnapshotCopyGrantStateFaultResponse(parsedOutput, context);
        case "SnapshotCopyGrantNotFoundFault":
        case "com.amazonaws.redshift#SnapshotCopyGrantNotFoundFault":
            throw await deserializeAws_querySnapshotCopyGrantNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteSnapshotScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteSnapshotScheduleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteSnapshotScheduleCommand = deserializeAws_queryDeleteSnapshotScheduleCommand;
const deserializeAws_queryDeleteSnapshotScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidClusterSnapshotScheduleState":
        case "com.amazonaws.redshift#InvalidClusterSnapshotScheduleStateFault":
            throw await deserializeAws_queryInvalidClusterSnapshotScheduleStateFaultResponse(parsedOutput, context);
        case "SnapshotScheduleNotFound":
        case "com.amazonaws.redshift#SnapshotScheduleNotFoundFault":
            throw await deserializeAws_querySnapshotScheduleNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteTagsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteTagsCommand = deserializeAws_queryDeleteTagsCommand;
const deserializeAws_queryDeleteTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.redshift#ResourceNotFoundFault":
            throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteUsageLimitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteUsageLimitCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteUsageLimitCommand = deserializeAws_queryDeleteUsageLimitCommand;
const deserializeAws_queryDeleteUsageLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        case "UsageLimitNotFound":
        case "com.amazonaws.redshift#UsageLimitNotFoundFault":
            throw await deserializeAws_queryUsageLimitNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAccountAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAccountAttributeList(data.DescribeAccountAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeAccountAttributesCommand = deserializeAws_queryDescribeAccountAttributesCommand;
const deserializeAws_queryDescribeAccountAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeAuthenticationProfilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAuthenticationProfilesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeAuthenticationProfilesResult(data.DescribeAuthenticationProfilesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeAuthenticationProfilesCommand = deserializeAws_queryDescribeAuthenticationProfilesCommand;
const deserializeAws_queryDescribeAuthenticationProfilesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthenticationProfileNotFoundFault":
        case "com.amazonaws.redshift#AuthenticationProfileNotFoundFault":
            throw await deserializeAws_queryAuthenticationProfileNotFoundFaultResponse(parsedOutput, context);
        case "InvalidAuthenticationProfileRequestFault":
        case "com.amazonaws.redshift#InvalidAuthenticationProfileRequestFault":
            throw await deserializeAws_queryInvalidAuthenticationProfileRequestFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeClusterDbRevisionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeClusterDbRevisionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterDbRevisionsMessage(data.DescribeClusterDbRevisionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeClusterDbRevisionsCommand = deserializeAws_queryDescribeClusterDbRevisionsCommand;
const deserializeAws_queryDescribeClusterDbRevisionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeClusterParameterGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeClusterParameterGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterParameterGroupsMessage(data.DescribeClusterParameterGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeClusterParameterGroupsCommand = deserializeAws_queryDescribeClusterParameterGroupsCommand;
const deserializeAws_queryDescribeClusterParameterGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterParameterGroupNotFound":
        case "com.amazonaws.redshift#ClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeClusterParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeClusterParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterParameterGroupDetails(data.DescribeClusterParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeClusterParametersCommand = deserializeAws_queryDescribeClusterParametersCommand;
const deserializeAws_queryDescribeClusterParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterParameterGroupNotFound":
        case "com.amazonaws.redshift#ClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeClustersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClustersMessage(data.DescribeClustersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeClustersCommand = deserializeAws_queryDescribeClustersCommand;
const deserializeAws_queryDescribeClustersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeClusterSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeClusterSecurityGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterSecurityGroupMessage(data.DescribeClusterSecurityGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeClusterSecurityGroupsCommand = deserializeAws_queryDescribeClusterSecurityGroupsCommand;
const deserializeAws_queryDescribeClusterSecurityGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSecurityGroupNotFound":
        case "com.amazonaws.redshift#ClusterSecurityGroupNotFoundFault":
            throw await deserializeAws_queryClusterSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeClusterSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeClusterSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySnapshotMessage(data.DescribeClusterSnapshotsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeClusterSnapshotsCommand = deserializeAws_queryDescribeClusterSnapshotsCommand;
const deserializeAws_queryDescribeClusterSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeClusterSubnetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeClusterSubnetGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterSubnetGroupMessage(data.DescribeClusterSubnetGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeClusterSubnetGroupsCommand = deserializeAws_queryDescribeClusterSubnetGroupsCommand;
const deserializeAws_queryDescribeClusterSubnetGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSubnetGroupNotFoundFault":
        case "com.amazonaws.redshift#ClusterSubnetGroupNotFoundFault":
            throw await deserializeAws_queryClusterSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeClusterTracksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeClusterTracksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryTrackListMessage(data.DescribeClusterTracksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeClusterTracksCommand = deserializeAws_queryDescribeClusterTracksCommand;
const deserializeAws_queryDescribeClusterTracksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidClusterTrack":
        case "com.amazonaws.redshift#InvalidClusterTrackFault":
            throw await deserializeAws_queryInvalidClusterTrackFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeClusterVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeClusterVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterVersionsMessage(data.DescribeClusterVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeClusterVersionsCommand = deserializeAws_queryDescribeClusterVersionsCommand;
const deserializeAws_queryDescribeClusterVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeDataSharesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDataSharesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDataSharesResult(data.DescribeDataSharesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeDataSharesCommand = deserializeAws_queryDescribeDataSharesCommand;
const deserializeAws_queryDescribeDataSharesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDataShareFault":
        case "com.amazonaws.redshift#InvalidDataShareFault":
            throw await deserializeAws_queryInvalidDataShareFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeDataSharesForConsumerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDataSharesForConsumerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDataSharesForConsumerResult(data.DescribeDataSharesForConsumerResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeDataSharesForConsumerCommand = deserializeAws_queryDescribeDataSharesForConsumerCommand;
const deserializeAws_queryDescribeDataSharesForConsumerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNamespaceFault":
        case "com.amazonaws.redshift#InvalidNamespaceFault":
            throw await deserializeAws_queryInvalidNamespaceFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeDataSharesForProducerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDataSharesForProducerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDataSharesForProducerResult(data.DescribeDataSharesForProducerResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeDataSharesForProducerCommand = deserializeAws_queryDescribeDataSharesForProducerCommand;
const deserializeAws_queryDescribeDataSharesForProducerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidNamespaceFault":
        case "com.amazonaws.redshift#InvalidNamespaceFault":
            throw await deserializeAws_queryInvalidNamespaceFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeDefaultClusterParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDefaultClusterParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDefaultClusterParametersResult(data.DescribeDefaultClusterParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeDefaultClusterParametersCommand = deserializeAws_queryDescribeDefaultClusterParametersCommand;
const deserializeAws_queryDescribeDefaultClusterParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEndpointAccessList(data.DescribeEndpointAccessResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEndpointAccessCommand = deserializeAws_queryDescribeEndpointAccessCommand;
const deserializeAws_queryDescribeEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "EndpointNotFound":
        case "com.amazonaws.redshift#EndpointNotFoundFault":
            throw await deserializeAws_queryEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeEndpointAuthorizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEndpointAuthorizationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEndpointAuthorizationList(data.DescribeEndpointAuthorizationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEndpointAuthorizationCommand = deserializeAws_queryDescribeEndpointAuthorizationCommand;
const deserializeAws_queryDescribeEndpointAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeEventCategoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventCategoriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEventCategoriesMessage(data.DescribeEventCategoriesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEventCategoriesCommand = deserializeAws_queryDescribeEventCategoriesCommand;
const deserializeAws_queryDescribeEventCategoriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEventsMessage(data.DescribeEventsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEventsCommand = deserializeAws_queryDescribeEventsCommand;
const deserializeAws_queryDescribeEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeEventSubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventSubscriptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEventSubscriptionsMessage(data.DescribeEventSubscriptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEventSubscriptionsCommand = deserializeAws_queryDescribeEventSubscriptionsCommand;
const deserializeAws_queryDescribeEventSubscriptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.redshift#SubscriptionNotFoundFault":
            throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeHsmClientCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeHsmClientCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryHsmClientCertificateMessage(data.DescribeHsmClientCertificatesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeHsmClientCertificatesCommand = deserializeAws_queryDescribeHsmClientCertificatesCommand;
const deserializeAws_queryDescribeHsmClientCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HsmClientCertificateNotFoundFault":
        case "com.amazonaws.redshift#HsmClientCertificateNotFoundFault":
            throw await deserializeAws_queryHsmClientCertificateNotFoundFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeHsmConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeHsmConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryHsmConfigurationMessage(data.DescribeHsmConfigurationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeHsmConfigurationsCommand = deserializeAws_queryDescribeHsmConfigurationsCommand;
const deserializeAws_queryDescribeHsmConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HsmConfigurationNotFoundFault":
        case "com.amazonaws.redshift#HsmConfigurationNotFoundFault":
            throw await deserializeAws_queryHsmConfigurationNotFoundFaultResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeLoggingStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeLoggingStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryLoggingStatus(data.DescribeLoggingStatusResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeLoggingStatusCommand = deserializeAws_queryDescribeLoggingStatusCommand;
const deserializeAws_queryDescribeLoggingStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeNodeConfigurationOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeNodeConfigurationOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryNodeConfigurationOptionsMessage(data.DescribeNodeConfigurationOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeNodeConfigurationOptionsCommand = deserializeAws_queryDescribeNodeConfigurationOptionsCommand;
const deserializeAws_queryDescribeNodeConfigurationOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessToSnapshotDenied":
        case "com.amazonaws.redshift#AccessToSnapshotDeniedFault":
            throw await deserializeAws_queryAccessToSnapshotDeniedFaultResponse(parsedOutput, context);
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSnapshotState":
        case "com.amazonaws.redshift#InvalidClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeOrderableClusterOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeOrderableClusterOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryOrderableClusterOptionsMessage(data.DescribeOrderableClusterOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeOrderableClusterOptionsCommand = deserializeAws_queryDescribeOrderableClusterOptionsCommand;
const deserializeAws_queryDescribeOrderableClusterOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribePartnersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribePartnersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribePartnersOutputMessage(data.DescribePartnersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribePartnersCommand = deserializeAws_queryDescribePartnersCommand;
const deserializeAws_queryDescribePartnersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "UnauthorizedPartnerIntegration":
        case "com.amazonaws.redshift#UnauthorizedPartnerIntegrationFault":
            throw await deserializeAws_queryUnauthorizedPartnerIntegrationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeReservedNodeExchangeStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReservedNodeExchangeStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeReservedNodeExchangeStatusOutputMessage(data.DescribeReservedNodeExchangeStatusResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeReservedNodeExchangeStatusCommand = deserializeAws_queryDescribeReservedNodeExchangeStatusCommand;
const deserializeAws_queryDescribeReservedNodeExchangeStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ReservedNodeExchangeNotFond":
        case "com.amazonaws.redshift#ReservedNodeExchangeNotFoundFault":
            throw await deserializeAws_queryReservedNodeExchangeNotFoundFaultResponse(parsedOutput, context);
        case "ReservedNodeNotFound":
        case "com.amazonaws.redshift#ReservedNodeNotFoundFault":
            throw await deserializeAws_queryReservedNodeNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeReservedNodeOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReservedNodeOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryReservedNodeOfferingsMessage(data.DescribeReservedNodeOfferingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeReservedNodeOfferingsCommand = deserializeAws_queryDescribeReservedNodeOfferingsCommand;
const deserializeAws_queryDescribeReservedNodeOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DependentServiceUnavailableFault":
        case "com.amazonaws.redshift#DependentServiceUnavailableFault":
            throw await deserializeAws_queryDependentServiceUnavailableFaultResponse(parsedOutput, context);
        case "ReservedNodeOfferingNotFound":
        case "com.amazonaws.redshift#ReservedNodeOfferingNotFoundFault":
            throw await deserializeAws_queryReservedNodeOfferingNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeReservedNodesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReservedNodesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryReservedNodesMessage(data.DescribeReservedNodesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeReservedNodesCommand = deserializeAws_queryDescribeReservedNodesCommand;
const deserializeAws_queryDescribeReservedNodesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DependentServiceUnavailableFault":
        case "com.amazonaws.redshift#DependentServiceUnavailableFault":
            throw await deserializeAws_queryDependentServiceUnavailableFaultResponse(parsedOutput, context);
        case "ReservedNodeNotFound":
        case "com.amazonaws.redshift#ReservedNodeNotFoundFault":
            throw await deserializeAws_queryReservedNodeNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeResizeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeResizeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryResizeProgressMessage(data.DescribeResizeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeResizeCommand = deserializeAws_queryDescribeResizeCommand;
const deserializeAws_queryDescribeResizeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ResizeNotFound":
        case "com.amazonaws.redshift#ResizeNotFoundFault":
            throw await deserializeAws_queryResizeNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeScheduledActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeScheduledActionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryScheduledActionsMessage(data.DescribeScheduledActionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeScheduledActionsCommand = deserializeAws_queryDescribeScheduledActionsCommand;
const deserializeAws_queryDescribeScheduledActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ScheduledActionNotFound":
        case "com.amazonaws.redshift#ScheduledActionNotFoundFault":
            throw await deserializeAws_queryScheduledActionNotFoundFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeSnapshotCopyGrantsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeSnapshotCopyGrantsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySnapshotCopyGrantMessage(data.DescribeSnapshotCopyGrantsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeSnapshotCopyGrantsCommand = deserializeAws_queryDescribeSnapshotCopyGrantsCommand;
const deserializeAws_queryDescribeSnapshotCopyGrantsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "SnapshotCopyGrantNotFoundFault":
        case "com.amazonaws.redshift#SnapshotCopyGrantNotFoundFault":
            throw await deserializeAws_querySnapshotCopyGrantNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeSnapshotSchedulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeSnapshotSchedulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeSnapshotSchedulesOutputMessage(data.DescribeSnapshotSchedulesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeSnapshotSchedulesCommand = deserializeAws_queryDescribeSnapshotSchedulesCommand;
const deserializeAws_queryDescribeSnapshotSchedulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeStorageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStorageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCustomerStorageMessage(data.DescribeStorageResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeStorageCommand = deserializeAws_queryDescribeStorageCommand;
const deserializeAws_queryDescribeStorageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeTableRestoreStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeTableRestoreStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryTableRestoreStatusMessage(data.DescribeTableRestoreStatusResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeTableRestoreStatusCommand = deserializeAws_queryDescribeTableRestoreStatusCommand;
const deserializeAws_queryDescribeTableRestoreStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "TableRestoreNotFoundFault":
        case "com.amazonaws.redshift#TableRestoreNotFoundFault":
            throw await deserializeAws_queryTableRestoreNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryTaggedResourceListMessage(data.DescribeTagsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeTagsCommand = deserializeAws_queryDescribeTagsCommand;
const deserializeAws_queryDescribeTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.redshift#ResourceNotFoundFault":
            throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeUsageLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeUsageLimitsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUsageLimitList(data.DescribeUsageLimitsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeUsageLimitsCommand = deserializeAws_queryDescribeUsageLimitsCommand;
const deserializeAws_queryDescribeUsageLimitsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDisableLoggingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDisableLoggingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryLoggingStatus(data.DisableLoggingResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDisableLoggingCommand = deserializeAws_queryDisableLoggingCommand;
const deserializeAws_queryDisableLoggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDisableSnapshotCopyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDisableSnapshotCopyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDisableSnapshotCopyResult(data.DisableSnapshotCopyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDisableSnapshotCopyCommand = deserializeAws_queryDisableSnapshotCopyCommand;
const deserializeAws_queryDisableSnapshotCopyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "SnapshotCopyAlreadyDisabledFault":
        case "com.amazonaws.redshift#SnapshotCopyAlreadyDisabledFault":
            throw await deserializeAws_querySnapshotCopyAlreadyDisabledFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDisassociateDataShareConsumerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDisassociateDataShareConsumerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDataShare(data.DisassociateDataShareConsumerResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDisassociateDataShareConsumerCommand = deserializeAws_queryDisassociateDataShareConsumerCommand;
const deserializeAws_queryDisassociateDataShareConsumerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDataShareFault":
        case "com.amazonaws.redshift#InvalidDataShareFault":
            throw await deserializeAws_queryInvalidDataShareFaultResponse(parsedOutput, context);
        case "InvalidNamespaceFault":
        case "com.amazonaws.redshift#InvalidNamespaceFault":
            throw await deserializeAws_queryInvalidNamespaceFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryEnableLoggingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryEnableLoggingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryLoggingStatus(data.EnableLoggingResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryEnableLoggingCommand = deserializeAws_queryEnableLoggingCommand;
const deserializeAws_queryEnableLoggingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BucketNotFoundFault":
        case "com.amazonaws.redshift#BucketNotFoundFault":
            throw await deserializeAws_queryBucketNotFoundFaultResponse(parsedOutput, context);
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientS3BucketPolicyFault":
        case "com.amazonaws.redshift#InsufficientS3BucketPolicyFault":
            throw await deserializeAws_queryInsufficientS3BucketPolicyFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidS3BucketNameFault":
        case "com.amazonaws.redshift#InvalidS3BucketNameFault":
            throw await deserializeAws_queryInvalidS3BucketNameFaultResponse(parsedOutput, context);
        case "InvalidS3KeyPrefixFault":
        case "com.amazonaws.redshift#InvalidS3KeyPrefixFault":
            throw await deserializeAws_queryInvalidS3KeyPrefixFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryEnableSnapshotCopyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryEnableSnapshotCopyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEnableSnapshotCopyResult(data.EnableSnapshotCopyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryEnableSnapshotCopyCommand = deserializeAws_queryEnableSnapshotCopyCommand;
const deserializeAws_queryEnableSnapshotCopyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "CopyToRegionDisabledFault":
        case "com.amazonaws.redshift#CopyToRegionDisabledFault":
            throw await deserializeAws_queryCopyToRegionDisabledFaultResponse(parsedOutput, context);
        case "DependentServiceRequestThrottlingFault":
        case "com.amazonaws.redshift#DependentServiceRequestThrottlingFault":
            throw await deserializeAws_queryDependentServiceRequestThrottlingFaultResponse(parsedOutput, context);
        case "IncompatibleOrderableOptions":
        case "com.amazonaws.redshift#IncompatibleOrderableOptions":
            throw await deserializeAws_queryIncompatibleOrderableOptionsResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidRetentionPeriodFault":
        case "com.amazonaws.redshift#InvalidRetentionPeriodFault":
            throw await deserializeAws_queryInvalidRetentionPeriodFaultResponse(parsedOutput, context);
        case "LimitExceededFault":
        case "com.amazonaws.redshift#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "SnapshotCopyAlreadyEnabledFault":
        case "com.amazonaws.redshift#SnapshotCopyAlreadyEnabledFault":
            throw await deserializeAws_querySnapshotCopyAlreadyEnabledFaultResponse(parsedOutput, context);
        case "SnapshotCopyGrantNotFoundFault":
        case "com.amazonaws.redshift#SnapshotCopyGrantNotFoundFault":
            throw await deserializeAws_querySnapshotCopyGrantNotFoundFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        case "UnknownSnapshotCopyRegionFault":
        case "com.amazonaws.redshift#UnknownSnapshotCopyRegionFault":
            throw await deserializeAws_queryUnknownSnapshotCopyRegionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryGetClusterCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetClusterCredentialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterCredentials(data.GetClusterCredentialsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryGetClusterCredentialsCommand = deserializeAws_queryGetClusterCredentialsCommand;
const deserializeAws_queryGetClusterCredentialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryGetClusterCredentialsWithIAMCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetClusterCredentialsWithIAMCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterExtendedCredentials(data.GetClusterCredentialsWithIAMResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryGetClusterCredentialsWithIAMCommand = deserializeAws_queryGetClusterCredentialsWithIAMCommand;
const deserializeAws_queryGetClusterCredentialsWithIAMCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetReservedNodeExchangeConfigurationOptionsOutputMessage(data.GetReservedNodeExchangeConfigurationOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommand = deserializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommand;
const deserializeAws_queryGetReservedNodeExchangeConfigurationOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DependentServiceUnavailableFault":
        case "com.amazonaws.redshift#DependentServiceUnavailableFault":
            throw await deserializeAws_queryDependentServiceUnavailableFaultResponse(parsedOutput, context);
        case "InvalidReservedNodeState":
        case "com.amazonaws.redshift#InvalidReservedNodeStateFault":
            throw await deserializeAws_queryInvalidReservedNodeStateFaultResponse(parsedOutput, context);
        case "ReservedNodeAlreadyMigrated":
        case "com.amazonaws.redshift#ReservedNodeAlreadyMigratedFault":
            throw await deserializeAws_queryReservedNodeAlreadyMigratedFaultResponse(parsedOutput, context);
        case "ReservedNodeNotFound":
        case "com.amazonaws.redshift#ReservedNodeNotFoundFault":
            throw await deserializeAws_queryReservedNodeNotFoundFaultResponse(parsedOutput, context);
        case "ReservedNodeOfferingNotFound":
        case "com.amazonaws.redshift#ReservedNodeOfferingNotFoundFault":
            throw await deserializeAws_queryReservedNodeOfferingNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryGetReservedNodeExchangeOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetReservedNodeExchangeOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetReservedNodeExchangeOfferingsOutputMessage(data.GetReservedNodeExchangeOfferingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryGetReservedNodeExchangeOfferingsCommand = deserializeAws_queryGetReservedNodeExchangeOfferingsCommand;
const deserializeAws_queryGetReservedNodeExchangeOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DependentServiceUnavailableFault":
        case "com.amazonaws.redshift#DependentServiceUnavailableFault":
            throw await deserializeAws_queryDependentServiceUnavailableFaultResponse(parsedOutput, context);
        case "InvalidReservedNodeState":
        case "com.amazonaws.redshift#InvalidReservedNodeStateFault":
            throw await deserializeAws_queryInvalidReservedNodeStateFaultResponse(parsedOutput, context);
        case "ReservedNodeAlreadyMigrated":
        case "com.amazonaws.redshift#ReservedNodeAlreadyMigratedFault":
            throw await deserializeAws_queryReservedNodeAlreadyMigratedFaultResponse(parsedOutput, context);
        case "ReservedNodeNotFound":
        case "com.amazonaws.redshift#ReservedNodeNotFoundFault":
            throw await deserializeAws_queryReservedNodeNotFoundFaultResponse(parsedOutput, context);
        case "ReservedNodeOfferingNotFound":
        case "com.amazonaws.redshift#ReservedNodeOfferingNotFoundFault":
            throw await deserializeAws_queryReservedNodeOfferingNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyAquaConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyAquaConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyAquaOutputMessage(data.ModifyAquaConfigurationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyAquaConfigurationCommand = deserializeAws_queryModifyAquaConfigurationCommand;
const deserializeAws_queryModifyAquaConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyAuthenticationProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyAuthenticationProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyAuthenticationProfileResult(data.ModifyAuthenticationProfileResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyAuthenticationProfileCommand = deserializeAws_queryModifyAuthenticationProfileCommand;
const deserializeAws_queryModifyAuthenticationProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthenticationProfileNotFoundFault":
        case "com.amazonaws.redshift#AuthenticationProfileNotFoundFault":
            throw await deserializeAws_queryAuthenticationProfileNotFoundFaultResponse(parsedOutput, context);
        case "AuthenticationProfileQuotaExceededFault":
        case "com.amazonaws.redshift#AuthenticationProfileQuotaExceededFault":
            throw await deserializeAws_queryAuthenticationProfileQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidAuthenticationProfileRequestFault":
        case "com.amazonaws.redshift#InvalidAuthenticationProfileRequestFault":
            throw await deserializeAws_queryInvalidAuthenticationProfileRequestFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyClusterResult(data.ModifyClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyClusterCommand = deserializeAws_queryModifyClusterCommand;
const deserializeAws_queryModifyClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterAlreadyExists":
        case "com.amazonaws.redshift#ClusterAlreadyExistsFault":
            throw await deserializeAws_queryClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ClusterParameterGroupNotFound":
        case "com.amazonaws.redshift#ClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSecurityGroupNotFound":
        case "com.amazonaws.redshift#ClusterSecurityGroupNotFoundFault":
            throw await deserializeAws_queryClusterSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DependentServiceRequestThrottlingFault":
        case "com.amazonaws.redshift#DependentServiceRequestThrottlingFault":
            throw await deserializeAws_queryDependentServiceRequestThrottlingFaultResponse(parsedOutput, context);
        case "HsmClientCertificateNotFoundFault":
        case "com.amazonaws.redshift#HsmClientCertificateNotFoundFault":
            throw await deserializeAws_queryHsmClientCertificateNotFoundFaultResponse(parsedOutput, context);
        case "HsmConfigurationNotFoundFault":
        case "com.amazonaws.redshift#HsmConfigurationNotFoundFault":
            throw await deserializeAws_queryHsmConfigurationNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientClusterCapacity":
        case "com.amazonaws.redshift#InsufficientClusterCapacityFault":
            throw await deserializeAws_queryInsufficientClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidClusterSecurityGroupState":
        case "com.amazonaws.redshift#InvalidClusterSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSecurityGroupStateFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidClusterTrack":
        case "com.amazonaws.redshift#InvalidClusterTrackFault":
            throw await deserializeAws_queryInvalidClusterTrackFaultResponse(parsedOutput, context);
        case "InvalidElasticIpFault":
        case "com.amazonaws.redshift#InvalidElasticIpFault":
            throw await deserializeAws_queryInvalidElasticIpFaultResponse(parsedOutput, context);
        case "InvalidRetentionPeriodFault":
        case "com.amazonaws.redshift#InvalidRetentionPeriodFault":
            throw await deserializeAws_queryInvalidRetentionPeriodFaultResponse(parsedOutput, context);
        case "LimitExceededFault":
        case "com.amazonaws.redshift#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "NumberOfNodesPerClusterLimitExceeded":
        case "com.amazonaws.redshift#NumberOfNodesPerClusterLimitExceededFault":
            throw await deserializeAws_queryNumberOfNodesPerClusterLimitExceededFaultResponse(parsedOutput, context);
        case "NumberOfNodesQuotaExceeded":
        case "com.amazonaws.redshift#NumberOfNodesQuotaExceededFault":
            throw await deserializeAws_queryNumberOfNodesQuotaExceededFaultResponse(parsedOutput, context);
        case "TableLimitExceeded":
        case "com.amazonaws.redshift#TableLimitExceededFault":
            throw await deserializeAws_queryTableLimitExceededFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        case "UnsupportedOptionFault":
        case "com.amazonaws.redshift#UnsupportedOptionFault":
            throw await deserializeAws_queryUnsupportedOptionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyClusterDbRevisionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyClusterDbRevisionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyClusterDbRevisionResult(data.ModifyClusterDbRevisionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyClusterDbRevisionCommand = deserializeAws_queryModifyClusterDbRevisionCommand;
const deserializeAws_queryModifyClusterDbRevisionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ClusterOnLatestRevision":
        case "com.amazonaws.redshift#ClusterOnLatestRevisionFault":
            throw await deserializeAws_queryClusterOnLatestRevisionFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyClusterIamRolesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyClusterIamRolesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyClusterIamRolesResult(data.ModifyClusterIamRolesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyClusterIamRolesCommand = deserializeAws_queryModifyClusterIamRolesCommand;
const deserializeAws_queryModifyClusterIamRolesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyClusterMaintenanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyClusterMaintenanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyClusterMaintenanceResult(data.ModifyClusterMaintenanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyClusterMaintenanceCommand = deserializeAws_queryModifyClusterMaintenanceCommand;
const deserializeAws_queryModifyClusterMaintenanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterParameterGroupNameMessage(data.ModifyClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyClusterParameterGroupCommand = deserializeAws_queryModifyClusterParameterGroupCommand;
const deserializeAws_queryModifyClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterParameterGroupNotFound":
        case "com.amazonaws.redshift#ClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterParameterGroupState":
        case "com.amazonaws.redshift#InvalidClusterParameterGroupStateFault":
            throw await deserializeAws_queryInvalidClusterParameterGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyClusterSnapshotResult(data.ModifyClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyClusterSnapshotCommand = deserializeAws_queryModifyClusterSnapshotCommand;
const deserializeAws_queryModifyClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSnapshotState":
        case "com.amazonaws.redshift#InvalidClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidRetentionPeriodFault":
        case "com.amazonaws.redshift#InvalidRetentionPeriodFault":
            throw await deserializeAws_queryInvalidRetentionPeriodFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyClusterSnapshotScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyClusterSnapshotScheduleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyClusterSnapshotScheduleCommand = deserializeAws_queryModifyClusterSnapshotScheduleCommand;
const deserializeAws_queryModifyClusterSnapshotScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSnapshotScheduleState":
        case "com.amazonaws.redshift#InvalidClusterSnapshotScheduleStateFault":
            throw await deserializeAws_queryInvalidClusterSnapshotScheduleStateFaultResponse(parsedOutput, context);
        case "SnapshotScheduleNotFound":
        case "com.amazonaws.redshift#SnapshotScheduleNotFoundFault":
            throw await deserializeAws_querySnapshotScheduleNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyClusterSubnetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyClusterSubnetGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyClusterSubnetGroupResult(data.ModifyClusterSubnetGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyClusterSubnetGroupCommand = deserializeAws_queryModifyClusterSubnetGroupCommand;
const deserializeAws_queryModifyClusterSubnetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterSubnetGroupNotFoundFault":
        case "com.amazonaws.redshift#ClusterSubnetGroupNotFoundFault":
            throw await deserializeAws_queryClusterSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSubnetQuotaExceededFault":
        case "com.amazonaws.redshift#ClusterSubnetQuotaExceededFault":
            throw await deserializeAws_queryClusterSubnetQuotaExceededFaultResponse(parsedOutput, context);
        case "DependentServiceRequestThrottlingFault":
        case "com.amazonaws.redshift#DependentServiceRequestThrottlingFault":
            throw await deserializeAws_queryDependentServiceRequestThrottlingFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.redshift#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "SubnetAlreadyInUse":
        case "com.amazonaws.redshift#SubnetAlreadyInUse":
            throw await deserializeAws_querySubnetAlreadyInUseResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEndpointAccess(data.ModifyEndpointAccessResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyEndpointAccessCommand = deserializeAws_queryModifyEndpointAccessCommand;
const deserializeAws_queryModifyEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "EndpointNotFound":
        case "com.amazonaws.redshift#EndpointNotFoundFault":
            throw await deserializeAws_queryEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSecurityGroupState":
        case "com.amazonaws.redshift#InvalidClusterSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSecurityGroupStateFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidEndpointState":
        case "com.amazonaws.redshift#InvalidEndpointStateFault":
            throw await deserializeAws_queryInvalidEndpointStateFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyEventSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyEventSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyEventSubscriptionResult(data.ModifyEventSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyEventSubscriptionCommand = deserializeAws_queryModifyEventSubscriptionCommand;
const deserializeAws_queryModifyEventSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidSubscriptionStateFault":
        case "com.amazonaws.redshift#InvalidSubscriptionStateFault":
            throw await deserializeAws_queryInvalidSubscriptionStateFaultResponse(parsedOutput, context);
        case "SNSInvalidTopic":
        case "com.amazonaws.redshift#SNSInvalidTopicFault":
            throw await deserializeAws_querySNSInvalidTopicFaultResponse(parsedOutput, context);
        case "SNSNoAuthorization":
        case "com.amazonaws.redshift#SNSNoAuthorizationFault":
            throw await deserializeAws_querySNSNoAuthorizationFaultResponse(parsedOutput, context);
        case "SNSTopicArnNotFound":
        case "com.amazonaws.redshift#SNSTopicArnNotFoundFault":
            throw await deserializeAws_querySNSTopicArnNotFoundFaultResponse(parsedOutput, context);
        case "SourceNotFound":
        case "com.amazonaws.redshift#SourceNotFoundFault":
            throw await deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionCategoryNotFound":
        case "com.amazonaws.redshift#SubscriptionCategoryNotFoundFault":
            throw await deserializeAws_querySubscriptionCategoryNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionEventIdNotFound":
        case "com.amazonaws.redshift#SubscriptionEventIdNotFoundFault":
            throw await deserializeAws_querySubscriptionEventIdNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.redshift#SubscriptionNotFoundFault":
            throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionSeverityNotFound":
        case "com.amazonaws.redshift#SubscriptionSeverityNotFoundFault":
            throw await deserializeAws_querySubscriptionSeverityNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyScheduledActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyScheduledActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryScheduledAction(data.ModifyScheduledActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyScheduledActionCommand = deserializeAws_queryModifyScheduledActionCommand;
const deserializeAws_queryModifyScheduledActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidSchedule":
        case "com.amazonaws.redshift#InvalidScheduleFault":
            throw await deserializeAws_queryInvalidScheduleFaultResponse(parsedOutput, context);
        case "InvalidScheduledAction":
        case "com.amazonaws.redshift#InvalidScheduledActionFault":
            throw await deserializeAws_queryInvalidScheduledActionFaultResponse(parsedOutput, context);
        case "ScheduledActionNotFound":
        case "com.amazonaws.redshift#ScheduledActionNotFoundFault":
            throw await deserializeAws_queryScheduledActionNotFoundFaultResponse(parsedOutput, context);
        case "ScheduledActionTypeUnsupported":
        case "com.amazonaws.redshift#ScheduledActionTypeUnsupportedFault":
            throw await deserializeAws_queryScheduledActionTypeUnsupportedFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifySnapshotCopyRetentionPeriodCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifySnapshotCopyRetentionPeriodCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifySnapshotCopyRetentionPeriodResult(data.ModifySnapshotCopyRetentionPeriodResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifySnapshotCopyRetentionPeriodCommand = deserializeAws_queryModifySnapshotCopyRetentionPeriodCommand;
const deserializeAws_queryModifySnapshotCopyRetentionPeriodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidRetentionPeriodFault":
        case "com.amazonaws.redshift#InvalidRetentionPeriodFault":
            throw await deserializeAws_queryInvalidRetentionPeriodFaultResponse(parsedOutput, context);
        case "SnapshotCopyDisabledFault":
        case "com.amazonaws.redshift#SnapshotCopyDisabledFault":
            throw await deserializeAws_querySnapshotCopyDisabledFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifySnapshotScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifySnapshotScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySnapshotSchedule(data.ModifySnapshotScheduleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifySnapshotScheduleCommand = deserializeAws_queryModifySnapshotScheduleCommand;
const deserializeAws_queryModifySnapshotScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidSchedule":
        case "com.amazonaws.redshift#InvalidScheduleFault":
            throw await deserializeAws_queryInvalidScheduleFaultResponse(parsedOutput, context);
        case "SnapshotScheduleNotFound":
        case "com.amazonaws.redshift#SnapshotScheduleNotFoundFault":
            throw await deserializeAws_querySnapshotScheduleNotFoundFaultResponse(parsedOutput, context);
        case "SnapshotScheduleUpdateInProgress":
        case "com.amazonaws.redshift#SnapshotScheduleUpdateInProgressFault":
            throw await deserializeAws_querySnapshotScheduleUpdateInProgressFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryModifyUsageLimitCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyUsageLimitCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUsageLimit(data.ModifyUsageLimitResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryModifyUsageLimitCommand = deserializeAws_queryModifyUsageLimitCommand;
const deserializeAws_queryModifyUsageLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidUsageLimit":
        case "com.amazonaws.redshift#InvalidUsageLimitFault":
            throw await deserializeAws_queryInvalidUsageLimitFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        case "UsageLimitNotFound":
        case "com.amazonaws.redshift#UsageLimitNotFoundFault":
            throw await deserializeAws_queryUsageLimitNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryPauseClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPauseClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPauseClusterResult(data.PauseClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryPauseClusterCommand = deserializeAws_queryPauseClusterCommand;
const deserializeAws_queryPauseClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryPurchaseReservedNodeOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPurchaseReservedNodeOfferingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPurchaseReservedNodeOfferingResult(data.PurchaseReservedNodeOfferingResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryPurchaseReservedNodeOfferingCommand = deserializeAws_queryPurchaseReservedNodeOfferingCommand;
const deserializeAws_queryPurchaseReservedNodeOfferingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ReservedNodeAlreadyExists":
        case "com.amazonaws.redshift#ReservedNodeAlreadyExistsFault":
            throw await deserializeAws_queryReservedNodeAlreadyExistsFaultResponse(parsedOutput, context);
        case "ReservedNodeOfferingNotFound":
        case "com.amazonaws.redshift#ReservedNodeOfferingNotFoundFault":
            throw await deserializeAws_queryReservedNodeOfferingNotFoundFaultResponse(parsedOutput, context);
        case "ReservedNodeQuotaExceeded":
        case "com.amazonaws.redshift#ReservedNodeQuotaExceededFault":
            throw await deserializeAws_queryReservedNodeQuotaExceededFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRebootClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRebootClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRebootClusterResult(data.RebootClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRebootClusterCommand = deserializeAws_queryRebootClusterCommand;
const deserializeAws_queryRebootClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRejectDataShareCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRejectDataShareCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDataShare(data.RejectDataShareResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRejectDataShareCommand = deserializeAws_queryRejectDataShareCommand;
const deserializeAws_queryRejectDataShareCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDataShareFault":
        case "com.amazonaws.redshift#InvalidDataShareFault":
            throw await deserializeAws_queryInvalidDataShareFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryResetClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryResetClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryClusterParameterGroupNameMessage(data.ResetClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryResetClusterParameterGroupCommand = deserializeAws_queryResetClusterParameterGroupCommand;
const deserializeAws_queryResetClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterParameterGroupNotFound":
        case "com.amazonaws.redshift#ClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterParameterGroupState":
        case "com.amazonaws.redshift#InvalidClusterParameterGroupStateFault":
            throw await deserializeAws_queryInvalidClusterParameterGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryResizeClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryResizeClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryResizeClusterResult(data.ResizeClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryResizeClusterCommand = deserializeAws_queryResizeClusterCommand;
const deserializeAws_queryResizeClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "DependentServiceUnavailableFault":
        case "com.amazonaws.redshift#DependentServiceUnavailableFault":
            throw await deserializeAws_queryDependentServiceUnavailableFaultResponse(parsedOutput, context);
        case "InsufficientClusterCapacity":
        case "com.amazonaws.redshift#InsufficientClusterCapacityFault":
            throw await deserializeAws_queryInsufficientClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidReservedNodeState":
        case "com.amazonaws.redshift#InvalidReservedNodeStateFault":
            throw await deserializeAws_queryInvalidReservedNodeStateFaultResponse(parsedOutput, context);
        case "LimitExceededFault":
        case "com.amazonaws.redshift#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "NumberOfNodesPerClusterLimitExceeded":
        case "com.amazonaws.redshift#NumberOfNodesPerClusterLimitExceededFault":
            throw await deserializeAws_queryNumberOfNodesPerClusterLimitExceededFaultResponse(parsedOutput, context);
        case "NumberOfNodesQuotaExceeded":
        case "com.amazonaws.redshift#NumberOfNodesQuotaExceededFault":
            throw await deserializeAws_queryNumberOfNodesQuotaExceededFaultResponse(parsedOutput, context);
        case "ReservedNodeAlreadyExists":
        case "com.amazonaws.redshift#ReservedNodeAlreadyExistsFault":
            throw await deserializeAws_queryReservedNodeAlreadyExistsFaultResponse(parsedOutput, context);
        case "ReservedNodeAlreadyMigrated":
        case "com.amazonaws.redshift#ReservedNodeAlreadyMigratedFault":
            throw await deserializeAws_queryReservedNodeAlreadyMigratedFaultResponse(parsedOutput, context);
        case "ReservedNodeNotFound":
        case "com.amazonaws.redshift#ReservedNodeNotFoundFault":
            throw await deserializeAws_queryReservedNodeNotFoundFaultResponse(parsedOutput, context);
        case "ReservedNodeOfferingNotFound":
        case "com.amazonaws.redshift#ReservedNodeOfferingNotFoundFault":
            throw await deserializeAws_queryReservedNodeOfferingNotFoundFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        case "UnsupportedOptionFault":
        case "com.amazonaws.redshift#UnsupportedOptionFault":
            throw await deserializeAws_queryUnsupportedOptionFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRestoreFromClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreFromClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRestoreFromClusterSnapshotResult(data.RestoreFromClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRestoreFromClusterSnapshotCommand = deserializeAws_queryRestoreFromClusterSnapshotCommand;
const deserializeAws_queryRestoreFromClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessToSnapshotDenied":
        case "com.amazonaws.redshift#AccessToSnapshotDeniedFault":
            throw await deserializeAws_queryAccessToSnapshotDeniedFaultResponse(parsedOutput, context);
        case "ClusterAlreadyExists":
        case "com.amazonaws.redshift#ClusterAlreadyExistsFault":
            throw await deserializeAws_queryClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "ClusterParameterGroupNotFound":
        case "com.amazonaws.redshift#ClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "ClusterQuotaExceeded":
        case "com.amazonaws.redshift#ClusterQuotaExceededFault":
            throw await deserializeAws_queryClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "ClusterSecurityGroupNotFound":
        case "com.amazonaws.redshift#ClusterSecurityGroupNotFoundFault":
            throw await deserializeAws_queryClusterSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSubnetGroupNotFoundFault":
        case "com.amazonaws.redshift#ClusterSubnetGroupNotFoundFault":
            throw await deserializeAws_queryClusterSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DependentServiceRequestThrottlingFault":
        case "com.amazonaws.redshift#DependentServiceRequestThrottlingFault":
            throw await deserializeAws_queryDependentServiceRequestThrottlingFaultResponse(parsedOutput, context);
        case "DependentServiceUnavailableFault":
        case "com.amazonaws.redshift#DependentServiceUnavailableFault":
            throw await deserializeAws_queryDependentServiceUnavailableFaultResponse(parsedOutput, context);
        case "HsmClientCertificateNotFoundFault":
        case "com.amazonaws.redshift#HsmClientCertificateNotFoundFault":
            throw await deserializeAws_queryHsmClientCertificateNotFoundFaultResponse(parsedOutput, context);
        case "HsmConfigurationNotFoundFault":
        case "com.amazonaws.redshift#HsmConfigurationNotFoundFault":
            throw await deserializeAws_queryHsmConfigurationNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientClusterCapacity":
        case "com.amazonaws.redshift#InsufficientClusterCapacityFault":
            throw await deserializeAws_queryInsufficientClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidClusterSnapshotState":
        case "com.amazonaws.redshift#InvalidClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidClusterSubnetGroupStateFault":
        case "com.amazonaws.redshift#InvalidClusterSubnetGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidClusterTrack":
        case "com.amazonaws.redshift#InvalidClusterTrackFault":
            throw await deserializeAws_queryInvalidClusterTrackFaultResponse(parsedOutput, context);
        case "InvalidElasticIpFault":
        case "com.amazonaws.redshift#InvalidElasticIpFault":
            throw await deserializeAws_queryInvalidElasticIpFaultResponse(parsedOutput, context);
        case "InvalidReservedNodeState":
        case "com.amazonaws.redshift#InvalidReservedNodeStateFault":
            throw await deserializeAws_queryInvalidReservedNodeStateFaultResponse(parsedOutput, context);
        case "InvalidRestore":
        case "com.amazonaws.redshift#InvalidRestoreFault":
            throw await deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.redshift#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidTagFault":
        case "com.amazonaws.redshift#InvalidTagFault":
            throw await deserializeAws_queryInvalidTagFaultResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.redshift#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "LimitExceededFault":
        case "com.amazonaws.redshift#LimitExceededFault":
            throw await deserializeAws_queryLimitExceededFaultResponse(parsedOutput, context);
        case "NumberOfNodesPerClusterLimitExceeded":
        case "com.amazonaws.redshift#NumberOfNodesPerClusterLimitExceededFault":
            throw await deserializeAws_queryNumberOfNodesPerClusterLimitExceededFaultResponse(parsedOutput, context);
        case "NumberOfNodesQuotaExceeded":
        case "com.amazonaws.redshift#NumberOfNodesQuotaExceededFault":
            throw await deserializeAws_queryNumberOfNodesQuotaExceededFaultResponse(parsedOutput, context);
        case "ReservedNodeAlreadyExists":
        case "com.amazonaws.redshift#ReservedNodeAlreadyExistsFault":
            throw await deserializeAws_queryReservedNodeAlreadyExistsFaultResponse(parsedOutput, context);
        case "ReservedNodeAlreadyMigrated":
        case "com.amazonaws.redshift#ReservedNodeAlreadyMigratedFault":
            throw await deserializeAws_queryReservedNodeAlreadyMigratedFaultResponse(parsedOutput, context);
        case "ReservedNodeNotFound":
        case "com.amazonaws.redshift#ReservedNodeNotFoundFault":
            throw await deserializeAws_queryReservedNodeNotFoundFaultResponse(parsedOutput, context);
        case "ReservedNodeOfferingNotFound":
        case "com.amazonaws.redshift#ReservedNodeOfferingNotFoundFault":
            throw await deserializeAws_queryReservedNodeOfferingNotFoundFaultResponse(parsedOutput, context);
        case "SnapshotScheduleNotFound":
        case "com.amazonaws.redshift#SnapshotScheduleNotFoundFault":
            throw await deserializeAws_querySnapshotScheduleNotFoundFaultResponse(parsedOutput, context);
        case "TagLimitExceededFault":
        case "com.amazonaws.redshift#TagLimitExceededFault":
            throw await deserializeAws_queryTagLimitExceededFaultResponse(parsedOutput, context);
        case "UnauthorizedOperation":
        case "com.amazonaws.redshift#UnauthorizedOperation":
            throw await deserializeAws_queryUnauthorizedOperationResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRestoreTableFromClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreTableFromClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRestoreTableFromClusterSnapshotResult(data.RestoreTableFromClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRestoreTableFromClusterSnapshotCommand = deserializeAws_queryRestoreTableFromClusterSnapshotCommand;
const deserializeAws_queryRestoreTableFromClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InProgressTableRestoreQuotaExceededFault":
        case "com.amazonaws.redshift#InProgressTableRestoreQuotaExceededFault":
            throw await deserializeAws_queryInProgressTableRestoreQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidClusterSnapshotState":
        case "com.amazonaws.redshift#InvalidClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidTableRestoreArgument":
        case "com.amazonaws.redshift#InvalidTableRestoreArgumentFault":
            throw await deserializeAws_queryInvalidTableRestoreArgumentFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryResumeClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryResumeClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryResumeClusterResult(data.ResumeClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryResumeClusterCommand = deserializeAws_queryResumeClusterCommand;
const deserializeAws_queryResumeClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientClusterCapacity":
        case "com.amazonaws.redshift#InsufficientClusterCapacityFault":
            throw await deserializeAws_queryInsufficientClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRevokeClusterSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRevokeClusterSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRevokeClusterSecurityGroupIngressResult(data.RevokeClusterSecurityGroupIngressResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRevokeClusterSecurityGroupIngressCommand = deserializeAws_queryRevokeClusterSecurityGroupIngressCommand;
const deserializeAws_queryRevokeClusterSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.redshift#AuthorizationNotFoundFault":
            throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSecurityGroupNotFound":
        case "com.amazonaws.redshift#ClusterSecurityGroupNotFoundFault":
            throw await deserializeAws_queryClusterSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidClusterSecurityGroupState":
        case "com.amazonaws.redshift#InvalidClusterSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSecurityGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRevokeEndpointAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRevokeEndpointAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEndpointAuthorization(data.RevokeEndpointAccessResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRevokeEndpointAccessCommand = deserializeAws_queryRevokeEndpointAccessCommand;
const deserializeAws_queryRevokeEndpointAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "EndpointAuthorizationNotFound":
        case "com.amazonaws.redshift#EndpointAuthorizationNotFoundFault":
            throw await deserializeAws_queryEndpointAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "EndpointNotFound":
        case "com.amazonaws.redshift#EndpointNotFoundFault":
            throw await deserializeAws_queryEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidAuthorizationState":
        case "com.amazonaws.redshift#InvalidAuthorizationStateFault":
            throw await deserializeAws_queryInvalidAuthorizationStateFaultResponse(parsedOutput, context);
        case "InvalidClusterSecurityGroupState":
        case "com.amazonaws.redshift#InvalidClusterSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidClusterSecurityGroupStateFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        case "InvalidEndpointState":
        case "com.amazonaws.redshift#InvalidEndpointStateFault":
            throw await deserializeAws_queryInvalidEndpointStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRevokeSnapshotAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRevokeSnapshotAccessCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRevokeSnapshotAccessResult(data.RevokeSnapshotAccessResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRevokeSnapshotAccessCommand = deserializeAws_queryRevokeSnapshotAccessCommand;
const deserializeAws_queryRevokeSnapshotAccessCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessToSnapshotDenied":
        case "com.amazonaws.redshift#AccessToSnapshotDeniedFault":
            throw await deserializeAws_queryAccessToSnapshotDeniedFaultResponse(parsedOutput, context);
        case "AuthorizationNotFound":
        case "com.amazonaws.redshift#AuthorizationNotFoundFault":
            throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "ClusterSnapshotNotFound":
        case "com.amazonaws.redshift#ClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "UnsupportedOperation":
        case "com.amazonaws.redshift#UnsupportedOperationFault":
            throw await deserializeAws_queryUnsupportedOperationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRotateEncryptionKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRotateEncryptionKeyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRotateEncryptionKeyResult(data.RotateEncryptionKeyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRotateEncryptionKeyCommand = deserializeAws_queryRotateEncryptionKeyCommand;
const deserializeAws_queryRotateEncryptionKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "DependentServiceRequestThrottlingFault":
        case "com.amazonaws.redshift#DependentServiceRequestThrottlingFault":
            throw await deserializeAws_queryDependentServiceRequestThrottlingFaultResponse(parsedOutput, context);
        case "InvalidClusterState":
        case "com.amazonaws.redshift#InvalidClusterStateFault":
            throw await deserializeAws_queryInvalidClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryUpdatePartnerStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdatePartnerStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPartnerIntegrationOutputMessage(data.UpdatePartnerStatusResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryUpdatePartnerStatusCommand = deserializeAws_queryUpdatePartnerStatusCommand;
const deserializeAws_queryUpdatePartnerStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClusterNotFound":
        case "com.amazonaws.redshift#ClusterNotFoundFault":
            throw await deserializeAws_queryClusterNotFoundFaultResponse(parsedOutput, context);
        case "PartnerNotFound":
        case "com.amazonaws.redshift#PartnerNotFoundFault":
            throw await deserializeAws_queryPartnerNotFoundFaultResponse(parsedOutput, context);
        case "UnauthorizedPartnerIntegration":
        case "com.amazonaws.redshift#UnauthorizedPartnerIntegrationFault":
            throw await deserializeAws_queryUnauthorizedPartnerIntegrationFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: RedshiftServiceException_1.RedshiftServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAccessToClusterDeniedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAccessToClusterDeniedFault(body.Error, context);
    const exception = new models_0_1.AccessToClusterDeniedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryAccessToSnapshotDeniedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAccessToSnapshotDeniedFault(body.Error, context);
    const exception = new models_0_1.AccessToSnapshotDeniedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryAuthenticationProfileAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAuthenticationProfileAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.AuthenticationProfileAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryAuthenticationProfileNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAuthenticationProfileNotFoundFault(body.Error, context);
    const exception = new models_0_1.AuthenticationProfileNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryAuthenticationProfileQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAuthenticationProfileQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.AuthenticationProfileQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryAuthorizationAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAuthorizationAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.AuthorizationAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryAuthorizationNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAuthorizationNotFoundFault(body.Error, context);
    const exception = new models_0_1.AuthorizationNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryAuthorizationQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAuthorizationQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.AuthorizationQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryBatchDeleteRequestSizeExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryBatchDeleteRequestSizeExceededFault(body.Error, context);
    const exception = new models_0_1.BatchDeleteRequestSizeExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryBatchModifyClusterSnapshotsLimitExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryBatchModifyClusterSnapshotsLimitExceededFault(body.Error, context);
    const exception = new models_0_1.BatchModifyClusterSnapshotsLimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryBucketNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryBucketNotFoundFault(body.Error, context);
    const exception = new models_0_1.BucketNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.ClusterAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterNotFoundFault(body.Error, context);
    const exception = new models_0_1.ClusterNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterOnLatestRevisionFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterOnLatestRevisionFault(body.Error, context);
    const exception = new models_0_1.ClusterOnLatestRevisionFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterParameterGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterParameterGroupAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.ClusterParameterGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterParameterGroupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterParameterGroupNotFoundFault(body.Error, context);
    const exception = new models_0_1.ClusterParameterGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterParameterGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterParameterGroupQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.ClusterParameterGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.ClusterQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSecurityGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSecurityGroupAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.ClusterSecurityGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSecurityGroupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSecurityGroupNotFoundFault(body.Error, context);
    const exception = new models_0_1.ClusterSecurityGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSecurityGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSecurityGroupQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.ClusterSecurityGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSnapshotAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSnapshotAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.ClusterSnapshotAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSnapshotNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSnapshotNotFoundFault(body.Error, context);
    const exception = new models_0_1.ClusterSnapshotNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSnapshotQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSnapshotQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.ClusterSnapshotQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSubnetGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSubnetGroupAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.ClusterSubnetGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSubnetGroupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSubnetGroupNotFoundFault(body.Error, context);
    const exception = new models_0_1.ClusterSubnetGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSubnetGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSubnetGroupQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.ClusterSubnetGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryClusterSubnetQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryClusterSubnetQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.ClusterSubnetQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryCopyToRegionDisabledFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCopyToRegionDisabledFault(body.Error, context);
    const exception = new models_0_1.CopyToRegionDisabledFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryDependentServiceRequestThrottlingFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDependentServiceRequestThrottlingFault(body.Error, context);
    const exception = new models_0_1.DependentServiceRequestThrottlingFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryDependentServiceUnavailableFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDependentServiceUnavailableFault(body.Error, context);
    const exception = new models_0_1.DependentServiceUnavailableFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryEndpointAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEndpointAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.EndpointAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryEndpointAuthorizationAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEndpointAuthorizationAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.EndpointAuthorizationAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryEndpointAuthorizationNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEndpointAuthorizationNotFoundFault(body.Error, context);
    const exception = new models_1_1.EndpointAuthorizationNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryEndpointAuthorizationsPerClusterLimitExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEndpointAuthorizationsPerClusterLimitExceededFault(body.Error, context);
    const exception = new models_0_1.EndpointAuthorizationsPerClusterLimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryEndpointNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEndpointNotFoundFault(body.Error, context);
    const exception = new models_0_1.EndpointNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryEndpointsPerAuthorizationLimitExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEndpointsPerAuthorizationLimitExceededFault(body.Error, context);
    const exception = new models_0_1.EndpointsPerAuthorizationLimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryEndpointsPerClusterLimitExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEndpointsPerClusterLimitExceededFault(body.Error, context);
    const exception = new models_0_1.EndpointsPerClusterLimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEventSubscriptionQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.EventSubscriptionQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryHsmClientCertificateAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryHsmClientCertificateAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.HsmClientCertificateAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryHsmClientCertificateNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryHsmClientCertificateNotFoundFault(body.Error, context);
    const exception = new models_0_1.HsmClientCertificateNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryHsmClientCertificateQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryHsmClientCertificateQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.HsmClientCertificateQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryHsmConfigurationAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryHsmConfigurationAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.HsmConfigurationAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryHsmConfigurationNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryHsmConfigurationNotFoundFault(body.Error, context);
    const exception = new models_0_1.HsmConfigurationNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryHsmConfigurationQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryHsmConfigurationQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.HsmConfigurationQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryIncompatibleOrderableOptionsResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryIncompatibleOrderableOptions(body.Error, context);
    const exception = new models_1_1.IncompatibleOrderableOptions({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInProgressTableRestoreQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInProgressTableRestoreQuotaExceededFault(body.Error, context);
    const exception = new models_1_1.InProgressTableRestoreQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInsufficientClusterCapacityFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInsufficientClusterCapacityFault(body.Error, context);
    const exception = new models_0_1.InsufficientClusterCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInsufficientS3BucketPolicyFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInsufficientS3BucketPolicyFault(body.Error, context);
    const exception = new models_1_1.InsufficientS3BucketPolicyFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidAuthenticationProfileRequestFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidAuthenticationProfileRequestFault(body.Error, context);
    const exception = new models_0_1.InvalidAuthenticationProfileRequestFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidAuthorizationStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidAuthorizationStateFault(body.Error, context);
    const exception = new models_0_1.InvalidAuthorizationStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidClusterParameterGroupStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidClusterParameterGroupStateFault(body.Error, context);
    const exception = new models_0_1.InvalidClusterParameterGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidClusterSecurityGroupStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidClusterSecurityGroupStateFault(body.Error, context);
    const exception = new models_0_1.InvalidClusterSecurityGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidClusterSnapshotScheduleStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidClusterSnapshotScheduleStateFault(body.Error, context);
    const exception = new models_0_1.InvalidClusterSnapshotScheduleStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidClusterSnapshotStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidClusterSnapshotStateFault(body.Error, context);
    const exception = new models_0_1.InvalidClusterSnapshotStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidClusterStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidClusterStateFault(body.Error, context);
    const exception = new models_0_1.InvalidClusterStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidClusterSubnetGroupStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidClusterSubnetGroupStateFault(body.Error, context);
    const exception = new models_0_1.InvalidClusterSubnetGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidClusterSubnetStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidClusterSubnetStateFault(body.Error, context);
    const exception = new models_0_1.InvalidClusterSubnetStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidClusterTrackFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidClusterTrackFault(body.Error, context);
    const exception = new models_0_1.InvalidClusterTrackFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidDataShareFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDataShareFault(body.Error, context);
    const exception = new models_0_1.InvalidDataShareFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidElasticIpFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidElasticIpFault(body.Error, context);
    const exception = new models_0_1.InvalidElasticIpFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidEndpointStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidEndpointStateFault(body.Error, context);
    const exception = new models_0_1.InvalidEndpointStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidHsmClientCertificateStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidHsmClientCertificateStateFault(body.Error, context);
    const exception = new models_0_1.InvalidHsmClientCertificateStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidHsmConfigurationStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidHsmConfigurationStateFault(body.Error, context);
    const exception = new models_0_1.InvalidHsmConfigurationStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidNamespaceFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidNamespaceFault(body.Error, context);
    const exception = new models_0_1.InvalidNamespaceFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidReservedNodeStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidReservedNodeStateFault(body.Error, context);
    const exception = new models_0_1.InvalidReservedNodeStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidRestoreFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidRestoreFault(body.Error, context);
    const exception = new models_1_1.InvalidRestoreFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidRetentionPeriodFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidRetentionPeriodFault(body.Error, context);
    const exception = new models_0_1.InvalidRetentionPeriodFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidS3BucketNameFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidS3BucketNameFault(body.Error, context);
    const exception = new models_1_1.InvalidS3BucketNameFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidS3KeyPrefixFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidS3KeyPrefixFault(body.Error, context);
    const exception = new models_1_1.InvalidS3KeyPrefixFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidScheduledActionFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidScheduledActionFault(body.Error, context);
    const exception = new models_0_1.InvalidScheduledActionFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidScheduleFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidScheduleFault(body.Error, context);
    const exception = new models_0_1.InvalidScheduleFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidSnapshotCopyGrantStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidSnapshotCopyGrantStateFault(body.Error, context);
    const exception = new models_0_1.InvalidSnapshotCopyGrantStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidSubnetResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidSubnet(body.Error, context);
    const exception = new models_0_1.InvalidSubnet({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidSubscriptionStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidSubscriptionStateFault(body.Error, context);
    const exception = new models_0_1.InvalidSubscriptionStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidTableRestoreArgumentFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidTableRestoreArgumentFault(body.Error, context);
    const exception = new models_1_1.InvalidTableRestoreArgumentFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidTagFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidTagFault(body.Error, context);
    const exception = new models_0_1.InvalidTagFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidUsageLimitFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidUsageLimitFault(body.Error, context);
    const exception = new models_0_1.InvalidUsageLimitFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidVPCNetworkStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidVPCNetworkStateFault(body.Error, context);
    const exception = new models_0_1.InvalidVPCNetworkStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryLimitExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryLimitExceededFault(body.Error, context);
    const exception = new models_0_1.LimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryNumberOfNodesPerClusterLimitExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryNumberOfNodesPerClusterLimitExceededFault(body.Error, context);
    const exception = new models_0_1.NumberOfNodesPerClusterLimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryNumberOfNodesQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryNumberOfNodesQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.NumberOfNodesQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryPartnerNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryPartnerNotFoundFault(body.Error, context);
    const exception = new models_0_1.PartnerNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryReservedNodeAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedNodeAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.ReservedNodeAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryReservedNodeAlreadyMigratedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedNodeAlreadyMigratedFault(body.Error, context);
    const exception = new models_0_1.ReservedNodeAlreadyMigratedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryReservedNodeExchangeNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedNodeExchangeNotFoundFault(body.Error, context);
    const exception = new models_1_1.ReservedNodeExchangeNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryReservedNodeNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedNodeNotFoundFault(body.Error, context);
    const exception = new models_0_1.ReservedNodeNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryReservedNodeOfferingNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedNodeOfferingNotFoundFault(body.Error, context);
    const exception = new models_0_1.ReservedNodeOfferingNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryReservedNodeQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedNodeQuotaExceededFault(body.Error, context);
    const exception = new models_1_1.ReservedNodeQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryResizeNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryResizeNotFoundFault(body.Error, context);
    const exception = new models_0_1.ResizeNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryResourceNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryResourceNotFoundFault(body.Error, context);
    const exception = new models_0_1.ResourceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryScheduledActionAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryScheduledActionAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.ScheduledActionAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryScheduledActionNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryScheduledActionNotFoundFault(body.Error, context);
    const exception = new models_0_1.ScheduledActionNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryScheduledActionQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryScheduledActionQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.ScheduledActionQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryScheduledActionTypeUnsupportedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryScheduledActionTypeUnsupportedFault(body.Error, context);
    const exception = new models_0_1.ScheduledActionTypeUnsupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryScheduleDefinitionTypeUnsupportedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryScheduleDefinitionTypeUnsupportedFault(body.Error, context);
    const exception = new models_0_1.ScheduleDefinitionTypeUnsupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotCopyAlreadyDisabledFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotCopyAlreadyDisabledFault(body.Error, context);
    const exception = new models_1_1.SnapshotCopyAlreadyDisabledFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotCopyAlreadyEnabledFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotCopyAlreadyEnabledFault(body.Error, context);
    const exception = new models_1_1.SnapshotCopyAlreadyEnabledFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotCopyDisabledFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotCopyDisabledFault(body.Error, context);
    const exception = new models_1_1.SnapshotCopyDisabledFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotCopyGrantAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotCopyGrantAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.SnapshotCopyGrantAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotCopyGrantNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotCopyGrantNotFoundFault(body.Error, context);
    const exception = new models_0_1.SnapshotCopyGrantNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotCopyGrantQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotCopyGrantQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.SnapshotCopyGrantQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotScheduleAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotScheduleAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.SnapshotScheduleAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotScheduleNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotScheduleNotFoundFault(body.Error, context);
    const exception = new models_0_1.SnapshotScheduleNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotScheduleQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotScheduleQuotaExceededFault(body.Error, context);
    const exception = new models_0_1.SnapshotScheduleQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySnapshotScheduleUpdateInProgressFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotScheduleUpdateInProgressFault(body.Error, context);
    const exception = new models_1_1.SnapshotScheduleUpdateInProgressFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySNSInvalidTopicFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySNSInvalidTopicFault(body.Error, context);
    const exception = new models_0_1.SNSInvalidTopicFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySNSNoAuthorizationFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySNSNoAuthorizationFault(body.Error, context);
    const exception = new models_0_1.SNSNoAuthorizationFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySNSTopicArnNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySNSTopicArnNotFoundFault(body.Error, context);
    const exception = new models_0_1.SNSTopicArnNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySourceNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySourceNotFoundFault(body.Error, context);
    const exception = new models_0_1.SourceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySubnetAlreadyInUseResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubnetAlreadyInUse(body.Error, context);
    const exception = new models_1_1.SubnetAlreadyInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySubscriptionAlreadyExistFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubscriptionAlreadyExistFault(body.Error, context);
    const exception = new models_0_1.SubscriptionAlreadyExistFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySubscriptionCategoryNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubscriptionCategoryNotFoundFault(body.Error, context);
    const exception = new models_0_1.SubscriptionCategoryNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySubscriptionEventIdNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubscriptionEventIdNotFoundFault(body.Error, context);
    const exception = new models_0_1.SubscriptionEventIdNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySubscriptionNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubscriptionNotFoundFault(body.Error, context);
    const exception = new models_0_1.SubscriptionNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySubscriptionSeverityNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubscriptionSeverityNotFoundFault(body.Error, context);
    const exception = new models_0_1.SubscriptionSeverityNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTableLimitExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTableLimitExceededFault(body.Error, context);
    const exception = new models_1_1.TableLimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTableRestoreNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTableRestoreNotFoundFault(body.Error, context);
    const exception = new models_1_1.TableRestoreNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTagLimitExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTagLimitExceededFault(body.Error, context);
    const exception = new models_0_1.TagLimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryUnauthorizedOperationResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryUnauthorizedOperation(body.Error, context);
    const exception = new models_0_1.UnauthorizedOperation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryUnauthorizedPartnerIntegrationFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryUnauthorizedPartnerIntegrationFault(body.Error, context);
    const exception = new models_0_1.UnauthorizedPartnerIntegrationFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryUnknownSnapshotCopyRegionFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryUnknownSnapshotCopyRegionFault(body.Error, context);
    const exception = new models_1_1.UnknownSnapshotCopyRegionFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryUnsupportedOperationFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryUnsupportedOperationFault(body.Error, context);
    const exception = new models_0_1.UnsupportedOperationFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryUnsupportedOptionFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryUnsupportedOptionFault(body.Error, context);
    const exception = new models_1_1.UnsupportedOptionFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryUsageLimitAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryUsageLimitAlreadyExistsFault(body.Error, context);
    const exception = new models_0_1.UsageLimitAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryUsageLimitNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryUsageLimitNotFoundFault(body.Error, context);
    const exception = new models_0_1.UsageLimitNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const serializeAws_queryAcceptReservedNodeExchangeInputMessage = (input, context) => {
    const entries = {};
    if (input.ReservedNodeId != null) {
        entries["ReservedNodeId"] = input.ReservedNodeId;
    }
    if (input.TargetReservedNodeOfferingId != null) {
        entries["TargetReservedNodeOfferingId"] = input.TargetReservedNodeOfferingId;
    }
    return entries;
};
const serializeAws_queryAssociateDataShareConsumerMessage = (input, context) => {
    const entries = {};
    if (input.DataShareArn != null) {
        entries["DataShareArn"] = input.DataShareArn;
    }
    if (input.AssociateEntireAccount != null) {
        entries["AssociateEntireAccount"] = input.AssociateEntireAccount;
    }
    if (input.ConsumerArn != null) {
        entries["ConsumerArn"] = input.ConsumerArn;
    }
    if (input.ConsumerRegion != null) {
        entries["ConsumerRegion"] = input.ConsumerRegion;
    }
    return entries;
};
const serializeAws_queryAttributeNameList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AttributeName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryAuthorizeClusterSecurityGroupIngressMessage = (input, context) => {
    const entries = {};
    if (input.ClusterSecurityGroupName != null) {
        entries["ClusterSecurityGroupName"] = input.ClusterSecurityGroupName;
    }
    if (input.CIDRIP != null) {
        entries["CIDRIP"] = input.CIDRIP;
    }
    if (input.EC2SecurityGroupName != null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
    }
    if (input.EC2SecurityGroupOwnerId != null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
    }
    return entries;
};
const serializeAws_queryAuthorizeDataShareMessage = (input, context) => {
    const entries = {};
    if (input.DataShareArn != null) {
        entries["DataShareArn"] = input.DataShareArn;
    }
    if (input.ConsumerIdentifier != null) {
        entries["ConsumerIdentifier"] = input.ConsumerIdentifier;
    }
    return entries;
};
const serializeAws_queryAuthorizeEndpointAccessMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.Account != null) {
        entries["Account"] = input.Account;
    }
    if (input.VpcIds != null) {
        const memberEntries = serializeAws_queryVpcIdentifierList(input.VpcIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryAuthorizeSnapshotAccessMessage = (input, context) => {
    const entries = {};
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.SnapshotArn != null) {
        entries["SnapshotArn"] = input.SnapshotArn;
    }
    if (input.SnapshotClusterIdentifier != null) {
        entries["SnapshotClusterIdentifier"] = input.SnapshotClusterIdentifier;
    }
    if (input.AccountWithRestoreAccess != null) {
        entries["AccountWithRestoreAccess"] = input.AccountWithRestoreAccess;
    }
    return entries;
};
const serializeAws_queryBatchDeleteClusterSnapshotsRequest = (input, context) => {
    const entries = {};
    if (input.Identifiers != null) {
        const memberEntries = serializeAws_queryDeleteClusterSnapshotMessageList(input.Identifiers, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Identifiers.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryBatchModifyClusterSnapshotsMessage = (input, context) => {
    const entries = {};
    if (input.SnapshotIdentifierList != null) {
        const memberEntries = serializeAws_querySnapshotIdentifierList(input.SnapshotIdentifierList, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotIdentifierList.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ManualSnapshotRetentionPeriod != null) {
        entries["ManualSnapshotRetentionPeriod"] = input.ManualSnapshotRetentionPeriod;
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    return entries;
};
const serializeAws_queryCancelResizeMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryClusterSecurityGroupNameList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ClusterSecurityGroupName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryCopyClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.SourceSnapshotIdentifier != null) {
        entries["SourceSnapshotIdentifier"] = input.SourceSnapshotIdentifier;
    }
    if (input.SourceSnapshotClusterIdentifier != null) {
        entries["SourceSnapshotClusterIdentifier"] = input.SourceSnapshotClusterIdentifier;
    }
    if (input.TargetSnapshotIdentifier != null) {
        entries["TargetSnapshotIdentifier"] = input.TargetSnapshotIdentifier;
    }
    if (input.ManualSnapshotRetentionPeriod != null) {
        entries["ManualSnapshotRetentionPeriod"] = input.ManualSnapshotRetentionPeriod;
    }
    return entries;
};
const serializeAws_queryCreateAuthenticationProfileMessage = (input, context) => {
    const entries = {};
    if (input.AuthenticationProfileName != null) {
        entries["AuthenticationProfileName"] = input.AuthenticationProfileName;
    }
    if (input.AuthenticationProfileContent != null) {
        entries["AuthenticationProfileContent"] = input.AuthenticationProfileContent;
    }
    return entries;
};
const serializeAws_queryCreateClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBName != null) {
        entries["DBName"] = input.DBName;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.ClusterType != null) {
        entries["ClusterType"] = input.ClusterType;
    }
    if (input.NodeType != null) {
        entries["NodeType"] = input.NodeType;
    }
    if (input.MasterUsername != null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.ClusterSecurityGroups != null) {
        const memberEntries = serializeAws_queryClusterSecurityGroupNameList(input.ClusterSecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClusterSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClusterSubnetGroupName != null) {
        entries["ClusterSubnetGroupName"] = input.ClusterSubnetGroupName;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.ClusterParameterGroupName != null) {
        entries["ClusterParameterGroupName"] = input.ClusterParameterGroupName;
    }
    if (input.AutomatedSnapshotRetentionPeriod != null) {
        entries["AutomatedSnapshotRetentionPeriod"] = input.AutomatedSnapshotRetentionPeriod;
    }
    if (input.ManualSnapshotRetentionPeriod != null) {
        entries["ManualSnapshotRetentionPeriod"] = input.ManualSnapshotRetentionPeriod;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.ClusterVersion != null) {
        entries["ClusterVersion"] = input.ClusterVersion;
    }
    if (input.AllowVersionUpgrade != null) {
        entries["AllowVersionUpgrade"] = input.AllowVersionUpgrade;
    }
    if (input.NumberOfNodes != null) {
        entries["NumberOfNodes"] = input.NumberOfNodes;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.HsmClientCertificateIdentifier != null) {
        entries["HsmClientCertificateIdentifier"] = input.HsmClientCertificateIdentifier;
    }
    if (input.HsmConfigurationIdentifier != null) {
        entries["HsmConfigurationIdentifier"] = input.HsmConfigurationIdentifier;
    }
    if (input.ElasticIp != null) {
        entries["ElasticIp"] = input.ElasticIp;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnhancedVpcRouting != null) {
        entries["EnhancedVpcRouting"] = input.EnhancedVpcRouting;
    }
    if (input.AdditionalInfo != null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.IamRoles != null) {
        const memberEntries = serializeAws_queryIamRoleArnList(input.IamRoles, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamRoles.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaintenanceTrackName != null) {
        entries["MaintenanceTrackName"] = input.MaintenanceTrackName;
    }
    if (input.SnapshotScheduleIdentifier != null) {
        entries["SnapshotScheduleIdentifier"] = input.SnapshotScheduleIdentifier;
    }
    if (input.AvailabilityZoneRelocation != null) {
        entries["AvailabilityZoneRelocation"] = input.AvailabilityZoneRelocation;
    }
    if (input.AquaConfigurationStatus != null) {
        entries["AquaConfigurationStatus"] = input.AquaConfigurationStatus;
    }
    if (input.DefaultIamRoleArn != null) {
        entries["DefaultIamRoleArn"] = input.DefaultIamRoleArn;
    }
    if (input.LoadSampleData != null) {
        entries["LoadSampleData"] = input.LoadSampleData;
    }
    return entries;
};
const serializeAws_queryCreateClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.ParameterGroupName != null) {
        entries["ParameterGroupName"] = input.ParameterGroupName;
    }
    if (input.ParameterGroupFamily != null) {
        entries["ParameterGroupFamily"] = input.ParameterGroupFamily;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateClusterSecurityGroupMessage = (input, context) => {
    const entries = {};
    if (input.ClusterSecurityGroupName != null) {
        entries["ClusterSecurityGroupName"] = input.ClusterSecurityGroupName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.ManualSnapshotRetentionPeriod != null) {
        entries["ManualSnapshotRetentionPeriod"] = input.ManualSnapshotRetentionPeriod;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateClusterSubnetGroupMessage = (input, context) => {
    const entries = {};
    if (input.ClusterSubnetGroupName != null) {
        entries["ClusterSubnetGroupName"] = input.ClusterSubnetGroupName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.SubnetIds != null) {
        const memberEntries = serializeAws_querySubnetIdentifierList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateEndpointAccessMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.ResourceOwner != null) {
        entries["ResourceOwner"] = input.ResourceOwner;
    }
    if (input.EndpointName != null) {
        entries["EndpointName"] = input.EndpointName;
    }
    if (input.SubnetGroupName != null) {
        entries["SubnetGroupName"] = input.SubnetGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateEventSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SnsTopicArn != null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.SourceIds != null) {
        const memberEntries = serializeAws_querySourceIdsList(input.SourceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EventCategories != null) {
        const memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventCategories.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Severity != null) {
        entries["Severity"] = input.Severity;
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateHsmClientCertificateMessage = (input, context) => {
    const entries = {};
    if (input.HsmClientCertificateIdentifier != null) {
        entries["HsmClientCertificateIdentifier"] = input.HsmClientCertificateIdentifier;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateHsmConfigurationMessage = (input, context) => {
    const entries = {};
    if (input.HsmConfigurationIdentifier != null) {
        entries["HsmConfigurationIdentifier"] = input.HsmConfigurationIdentifier;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.HsmIpAddress != null) {
        entries["HsmIpAddress"] = input.HsmIpAddress;
    }
    if (input.HsmPartitionName != null) {
        entries["HsmPartitionName"] = input.HsmPartitionName;
    }
    if (input.HsmPartitionPassword != null) {
        entries["HsmPartitionPassword"] = input.HsmPartitionPassword;
    }
    if (input.HsmServerPublicCertificate != null) {
        entries["HsmServerPublicCertificate"] = input.HsmServerPublicCertificate;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateScheduledActionMessage = (input, context) => {
    const entries = {};
    if (input.ScheduledActionName != null) {
        entries["ScheduledActionName"] = input.ScheduledActionName;
    }
    if (input.TargetAction != null) {
        const memberEntries = serializeAws_queryScheduledActionType(input.TargetAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetAction.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Schedule != null) {
        entries["Schedule"] = input.Schedule;
    }
    if (input.IamRole != null) {
        entries["IamRole"] = input.IamRole;
    }
    if (input.ScheduledActionDescription != null) {
        entries["ScheduledActionDescription"] = input.ScheduledActionDescription;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Enable != null) {
        entries["Enable"] = input.Enable;
    }
    return entries;
};
const serializeAws_queryCreateSnapshotCopyGrantMessage = (input, context) => {
    const entries = {};
    if (input.SnapshotCopyGrantName != null) {
        entries["SnapshotCopyGrantName"] = input.SnapshotCopyGrantName;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateSnapshotScheduleMessage = (input, context) => {
    const entries = {};
    if (input.ScheduleDefinitions != null) {
        const memberEntries = serializeAws_queryScheduleDefinitionList(input.ScheduleDefinitions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScheduleDefinitions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ScheduleIdentifier != null) {
        entries["ScheduleIdentifier"] = input.ScheduleIdentifier;
    }
    if (input.ScheduleDescription != null) {
        entries["ScheduleDescription"] = input.ScheduleDescription;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DryRun != null) {
        entries["DryRun"] = input.DryRun;
    }
    if (input.NextInvocations != null) {
        entries["NextInvocations"] = input.NextInvocations;
    }
    return entries;
};
const serializeAws_queryCreateTagsMessage = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateUsageLimitMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.FeatureType != null) {
        entries["FeatureType"] = input.FeatureType;
    }
    if (input.LimitType != null) {
        entries["LimitType"] = input.LimitType;
    }
    if (input.Amount != null) {
        entries["Amount"] = input.Amount;
    }
    if (input.Period != null) {
        entries["Period"] = input.Period;
    }
    if (input.BreachAction != null) {
        entries["BreachAction"] = input.BreachAction;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDbGroupList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`DbGroup.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryDeauthorizeDataShareMessage = (input, context) => {
    const entries = {};
    if (input.DataShareArn != null) {
        entries["DataShareArn"] = input.DataShareArn;
    }
    if (input.ConsumerIdentifier != null) {
        entries["ConsumerIdentifier"] = input.ConsumerIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteAuthenticationProfileMessage = (input, context) => {
    const entries = {};
    if (input.AuthenticationProfileName != null) {
        entries["AuthenticationProfileName"] = input.AuthenticationProfileName;
    }
    return entries;
};
const serializeAws_queryDeleteClusterMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.SkipFinalClusterSnapshot != null) {
        entries["SkipFinalClusterSnapshot"] = input.SkipFinalClusterSnapshot;
    }
    if (input.FinalClusterSnapshotIdentifier != null) {
        entries["FinalClusterSnapshotIdentifier"] = input.FinalClusterSnapshotIdentifier;
    }
    if (input.FinalClusterSnapshotRetentionPeriod != null) {
        entries["FinalClusterSnapshotRetentionPeriod"] = input.FinalClusterSnapshotRetentionPeriod;
    }
    return entries;
};
const serializeAws_queryDeleteClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.ParameterGroupName != null) {
        entries["ParameterGroupName"] = input.ParameterGroupName;
    }
    return entries;
};
const serializeAws_queryDeleteClusterSecurityGroupMessage = (input, context) => {
    const entries = {};
    if (input.ClusterSecurityGroupName != null) {
        entries["ClusterSecurityGroupName"] = input.ClusterSecurityGroupName;
    }
    return entries;
};
const serializeAws_queryDeleteClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.SnapshotClusterIdentifier != null) {
        entries["SnapshotClusterIdentifier"] = input.SnapshotClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteClusterSnapshotMessageList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryDeleteClusterSnapshotMessage(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`DeleteClusterSnapshotMessage.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryDeleteClusterSubnetGroupMessage = (input, context) => {
    const entries = {};
    if (input.ClusterSubnetGroupName != null) {
        entries["ClusterSubnetGroupName"] = input.ClusterSubnetGroupName;
    }
    return entries;
};
const serializeAws_queryDeleteEndpointAccessMessage = (input, context) => {
    const entries = {};
    if (input.EndpointName != null) {
        entries["EndpointName"] = input.EndpointName;
    }
    return entries;
};
const serializeAws_queryDeleteEventSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    return entries;
};
const serializeAws_queryDeleteHsmClientCertificateMessage = (input, context) => {
    const entries = {};
    if (input.HsmClientCertificateIdentifier != null) {
        entries["HsmClientCertificateIdentifier"] = input.HsmClientCertificateIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteHsmConfigurationMessage = (input, context) => {
    const entries = {};
    if (input.HsmConfigurationIdentifier != null) {
        entries["HsmConfigurationIdentifier"] = input.HsmConfigurationIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteScheduledActionMessage = (input, context) => {
    const entries = {};
    if (input.ScheduledActionName != null) {
        entries["ScheduledActionName"] = input.ScheduledActionName;
    }
    return entries;
};
const serializeAws_queryDeleteSnapshotCopyGrantMessage = (input, context) => {
    const entries = {};
    if (input.SnapshotCopyGrantName != null) {
        entries["SnapshotCopyGrantName"] = input.SnapshotCopyGrantName;
    }
    return entries;
};
const serializeAws_queryDeleteSnapshotScheduleMessage = (input, context) => {
    const entries = {};
    if (input.ScheduleIdentifier != null) {
        entries["ScheduleIdentifier"] = input.ScheduleIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteTagsMessage = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDeleteUsageLimitMessage = (input, context) => {
    const entries = {};
    if (input.UsageLimitId != null) {
        entries["UsageLimitId"] = input.UsageLimitId;
    }
    return entries;
};
const serializeAws_queryDescribeAccountAttributesMessage = (input, context) => {
    const entries = {};
    if (input.AttributeNames != null) {
        const memberEntries = serializeAws_queryAttributeNameList(input.AttributeNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeAuthenticationProfilesMessage = (input, context) => {
    const entries = {};
    if (input.AuthenticationProfileName != null) {
        entries["AuthenticationProfileName"] = input.AuthenticationProfileName;
    }
    return entries;
};
const serializeAws_queryDescribeClusterDbRevisionsMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeClusterParameterGroupsMessage = (input, context) => {
    const entries = {};
    if (input.ParameterGroupName != null) {
        entries["ParameterGroupName"] = input.ParameterGroupName;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeClusterParametersMessage = (input, context) => {
    const entries = {};
    if (input.ParameterGroupName != null) {
        entries["ParameterGroupName"] = input.ParameterGroupName;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeClusterSecurityGroupsMessage = (input, context) => {
    const entries = {};
    if (input.ClusterSecurityGroupName != null) {
        entries["ClusterSecurityGroupName"] = input.ClusterSecurityGroupName;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeClustersMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeClusterSnapshotsMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.SnapshotArn != null) {
        entries["SnapshotArn"] = input.SnapshotArn;
    }
    if (input.SnapshotType != null) {
        entries["SnapshotType"] = input.SnapshotType;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.OwnerAccount != null) {
        entries["OwnerAccount"] = input.OwnerAccount;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClusterExists != null) {
        entries["ClusterExists"] = input.ClusterExists;
    }
    if (input.SortingEntities != null) {
        const memberEntries = serializeAws_querySnapshotSortingEntityList(input.SortingEntities, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SortingEntities.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeClusterSubnetGroupsMessage = (input, context) => {
    const entries = {};
    if (input.ClusterSubnetGroupName != null) {
        entries["ClusterSubnetGroupName"] = input.ClusterSubnetGroupName;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeClusterTracksMessage = (input, context) => {
    const entries = {};
    if (input.MaintenanceTrackName != null) {
        entries["MaintenanceTrackName"] = input.MaintenanceTrackName;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeClusterVersionsMessage = (input, context) => {
    const entries = {};
    if (input.ClusterVersion != null) {
        entries["ClusterVersion"] = input.ClusterVersion;
    }
    if (input.ClusterParameterGroupFamily != null) {
        entries["ClusterParameterGroupFamily"] = input.ClusterParameterGroupFamily;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDataSharesForConsumerMessage = (input, context) => {
    const entries = {};
    if (input.ConsumerArn != null) {
        entries["ConsumerArn"] = input.ConsumerArn;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDataSharesForProducerMessage = (input, context) => {
    const entries = {};
    if (input.ProducerArn != null) {
        entries["ProducerArn"] = input.ProducerArn;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDataSharesMessage = (input, context) => {
    const entries = {};
    if (input.DataShareArn != null) {
        entries["DataShareArn"] = input.DataShareArn;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDefaultClusterParametersMessage = (input, context) => {
    const entries = {};
    if (input.ParameterGroupFamily != null) {
        entries["ParameterGroupFamily"] = input.ParameterGroupFamily;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeEndpointAccessMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.ResourceOwner != null) {
        entries["ResourceOwner"] = input.ResourceOwner;
    }
    if (input.EndpointName != null) {
        entries["EndpointName"] = input.EndpointName;
    }
    if (input.VpcId != null) {
        entries["VpcId"] = input.VpcId;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeEndpointAuthorizationMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.Account != null) {
        entries["Account"] = input.Account;
    }
    if (input.Grantee != null) {
        entries["Grantee"] = input.Grantee;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeEventCategoriesMessage = (input, context) => {
    const entries = {};
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    return entries;
};
const serializeAws_queryDescribeEventsMessage = (input, context) => {
    const entries = {};
    if (input.SourceIdentifier != null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Duration != null) {
        entries["Duration"] = input.Duration;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeEventSubscriptionsMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeHsmClientCertificatesMessage = (input, context) => {
    const entries = {};
    if (input.HsmClientCertificateIdentifier != null) {
        entries["HsmClientCertificateIdentifier"] = input.HsmClientCertificateIdentifier;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeHsmConfigurationsMessage = (input, context) => {
    const entries = {};
    if (input.HsmConfigurationIdentifier != null) {
        entries["HsmConfigurationIdentifier"] = input.HsmConfigurationIdentifier;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeLoggingStatusMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryDescribeNodeConfigurationOptionsMessage = (input, context) => {
    const entries = {};
    if (input.ActionType != null) {
        entries["ActionType"] = input.ActionType;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.SnapshotArn != null) {
        entries["SnapshotArn"] = input.SnapshotArn;
    }
    if (input.OwnerAccount != null) {
        entries["OwnerAccount"] = input.OwnerAccount;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryNodeConfigurationOptionsFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeOrderableClusterOptionsMessage = (input, context) => {
    const entries = {};
    if (input.ClusterVersion != null) {
        entries["ClusterVersion"] = input.ClusterVersion;
    }
    if (input.NodeType != null) {
        entries["NodeType"] = input.NodeType;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribePartnersInputMessage = (input, context) => {
    const entries = {};
    if (input.AccountId != null) {
        entries["AccountId"] = input.AccountId;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.PartnerName != null) {
        entries["PartnerName"] = input.PartnerName;
    }
    return entries;
};
const serializeAws_queryDescribeReservedNodeExchangeStatusInputMessage = (input, context) => {
    const entries = {};
    if (input.ReservedNodeId != null) {
        entries["ReservedNodeId"] = input.ReservedNodeId;
    }
    if (input.ReservedNodeExchangeRequestId != null) {
        entries["ReservedNodeExchangeRequestId"] = input.ReservedNodeExchangeRequestId;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeReservedNodeOfferingsMessage = (input, context) => {
    const entries = {};
    if (input.ReservedNodeOfferingId != null) {
        entries["ReservedNodeOfferingId"] = input.ReservedNodeOfferingId;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeReservedNodesMessage = (input, context) => {
    const entries = {};
    if (input.ReservedNodeId != null) {
        entries["ReservedNodeId"] = input.ReservedNodeId;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeResizeMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryDescribeScheduledActionsMessage = (input, context) => {
    const entries = {};
    if (input.ScheduledActionName != null) {
        entries["ScheduledActionName"] = input.ScheduledActionName;
    }
    if (input.TargetActionType != null) {
        entries["TargetActionType"] = input.TargetActionType;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Active != null) {
        entries["Active"] = input.Active;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryScheduledActionFilterList(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeSnapshotCopyGrantsMessage = (input, context) => {
    const entries = {};
    if (input.SnapshotCopyGrantName != null) {
        entries["SnapshotCopyGrantName"] = input.SnapshotCopyGrantName;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeSnapshotSchedulesMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.ScheduleIdentifier != null) {
        entries["ScheduleIdentifier"] = input.ScheduleIdentifier;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeTableRestoreStatusMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.TableRestoreRequestId != null) {
        entries["TableRestoreRequestId"] = input.TableRestoreRequestId;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeTagsMessage = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeUsageLimitsMessage = (input, context) => {
    const entries = {};
    if (input.UsageLimitId != null) {
        entries["UsageLimitId"] = input.UsageLimitId;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.FeatureType != null) {
        entries["FeatureType"] = input.FeatureType;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagValues != null) {
        const memberEntries = serializeAws_queryTagValueList(input.TagValues, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagValues.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDisableLoggingMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryDisableSnapshotCopyMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryDisassociateDataShareConsumerMessage = (input, context) => {
    const entries = {};
    if (input.DataShareArn != null) {
        entries["DataShareArn"] = input.DataShareArn;
    }
    if (input.DisassociateEntireAccount != null) {
        entries["DisassociateEntireAccount"] = input.DisassociateEntireAccount;
    }
    if (input.ConsumerArn != null) {
        entries["ConsumerArn"] = input.ConsumerArn;
    }
    if (input.ConsumerRegion != null) {
        entries["ConsumerRegion"] = input.ConsumerRegion;
    }
    return entries;
};
const serializeAws_queryEnableLoggingMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.BucketName != null) {
        entries["BucketName"] = input.BucketName;
    }
    if (input.S3KeyPrefix != null) {
        entries["S3KeyPrefix"] = input.S3KeyPrefix;
    }
    if (input.LogDestinationType != null) {
        entries["LogDestinationType"] = input.LogDestinationType;
    }
    if (input.LogExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.LogExports, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogExports.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryEnableSnapshotCopyMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.DestinationRegion != null) {
        entries["DestinationRegion"] = input.DestinationRegion;
    }
    if (input.RetentionPeriod != null) {
        entries["RetentionPeriod"] = input.RetentionPeriod;
    }
    if (input.SnapshotCopyGrantName != null) {
        entries["SnapshotCopyGrantName"] = input.SnapshotCopyGrantName;
    }
    if (input.ManualSnapshotRetentionPeriod != null) {
        entries["ManualSnapshotRetentionPeriod"] = input.ManualSnapshotRetentionPeriod;
    }
    return entries;
};
const serializeAws_queryEventCategoriesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`EventCategory.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryGetClusterCredentialsMessage = (input, context) => {
    const entries = {};
    if (input.DbUser != null) {
        entries["DbUser"] = input.DbUser;
    }
    if (input.DbName != null) {
        entries["DbName"] = input.DbName;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
    }
    if (input.AutoCreate != null) {
        entries["AutoCreate"] = input.AutoCreate;
    }
    if (input.DbGroups != null) {
        const memberEntries = serializeAws_queryDbGroupList(input.DbGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DbGroups.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryGetClusterCredentialsWithIAMMessage = (input, context) => {
    const entries = {};
    if (input.DbName != null) {
        entries["DbName"] = input.DbName;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
    }
    return entries;
};
const serializeAws_queryGetReservedNodeExchangeConfigurationOptionsInputMessage = (input, context) => {
    const entries = {};
    if (input.ActionType != null) {
        entries["ActionType"] = input.ActionType;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryGetReservedNodeExchangeOfferingsInputMessage = (input, context) => {
    const entries = {};
    if (input.ReservedNodeId != null) {
        entries["ReservedNodeId"] = input.ReservedNodeId;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryIamRoleArnList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`IamRoleArn.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryLogTypeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryModifyAquaInputMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.AquaConfigurationStatus != null) {
        entries["AquaConfigurationStatus"] = input.AquaConfigurationStatus;
    }
    return entries;
};
const serializeAws_queryModifyAuthenticationProfileMessage = (input, context) => {
    const entries = {};
    if (input.AuthenticationProfileName != null) {
        entries["AuthenticationProfileName"] = input.AuthenticationProfileName;
    }
    if (input.AuthenticationProfileContent != null) {
        entries["AuthenticationProfileContent"] = input.AuthenticationProfileContent;
    }
    return entries;
};
const serializeAws_queryModifyClusterDbRevisionMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.RevisionTarget != null) {
        entries["RevisionTarget"] = input.RevisionTarget;
    }
    return entries;
};
const serializeAws_queryModifyClusterIamRolesMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.AddIamRoles != null) {
        const memberEntries = serializeAws_queryIamRoleArnList(input.AddIamRoles, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddIamRoles.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RemoveIamRoles != null) {
        const memberEntries = serializeAws_queryIamRoleArnList(input.RemoveIamRoles, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveIamRoles.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DefaultIamRoleArn != null) {
        entries["DefaultIamRoleArn"] = input.DefaultIamRoleArn;
    }
    return entries;
};
const serializeAws_queryModifyClusterMaintenanceMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.DeferMaintenance != null) {
        entries["DeferMaintenance"] = input.DeferMaintenance;
    }
    if (input.DeferMaintenanceIdentifier != null) {
        entries["DeferMaintenanceIdentifier"] = input.DeferMaintenanceIdentifier;
    }
    if (input.DeferMaintenanceStartTime != null) {
        entries["DeferMaintenanceStartTime"] = input.DeferMaintenanceStartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.DeferMaintenanceEndTime != null) {
        entries["DeferMaintenanceEndTime"] = input.DeferMaintenanceEndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.DeferMaintenanceDuration != null) {
        entries["DeferMaintenanceDuration"] = input.DeferMaintenanceDuration;
    }
    return entries;
};
const serializeAws_queryModifyClusterMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.ClusterType != null) {
        entries["ClusterType"] = input.ClusterType;
    }
    if (input.NodeType != null) {
        entries["NodeType"] = input.NodeType;
    }
    if (input.NumberOfNodes != null) {
        entries["NumberOfNodes"] = input.NumberOfNodes;
    }
    if (input.ClusterSecurityGroups != null) {
        const memberEntries = serializeAws_queryClusterSecurityGroupNameList(input.ClusterSecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClusterSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.ClusterParameterGroupName != null) {
        entries["ClusterParameterGroupName"] = input.ClusterParameterGroupName;
    }
    if (input.AutomatedSnapshotRetentionPeriod != null) {
        entries["AutomatedSnapshotRetentionPeriod"] = input.AutomatedSnapshotRetentionPeriod;
    }
    if (input.ManualSnapshotRetentionPeriod != null) {
        entries["ManualSnapshotRetentionPeriod"] = input.ManualSnapshotRetentionPeriod;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.ClusterVersion != null) {
        entries["ClusterVersion"] = input.ClusterVersion;
    }
    if (input.AllowVersionUpgrade != null) {
        entries["AllowVersionUpgrade"] = input.AllowVersionUpgrade;
    }
    if (input.HsmClientCertificateIdentifier != null) {
        entries["HsmClientCertificateIdentifier"] = input.HsmClientCertificateIdentifier;
    }
    if (input.HsmConfigurationIdentifier != null) {
        entries["HsmConfigurationIdentifier"] = input.HsmConfigurationIdentifier;
    }
    if (input.NewClusterIdentifier != null) {
        entries["NewClusterIdentifier"] = input.NewClusterIdentifier;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.ElasticIp != null) {
        entries["ElasticIp"] = input.ElasticIp;
    }
    if (input.EnhancedVpcRouting != null) {
        entries["EnhancedVpcRouting"] = input.EnhancedVpcRouting;
    }
    if (input.MaintenanceTrackName != null) {
        entries["MaintenanceTrackName"] = input.MaintenanceTrackName;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.AvailabilityZoneRelocation != null) {
        entries["AvailabilityZoneRelocation"] = input.AvailabilityZoneRelocation;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    return entries;
};
const serializeAws_queryModifyClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.ParameterGroupName != null) {
        entries["ParameterGroupName"] = input.ParameterGroupName;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.ManualSnapshotRetentionPeriod != null) {
        entries["ManualSnapshotRetentionPeriod"] = input.ManualSnapshotRetentionPeriod;
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    return entries;
};
const serializeAws_queryModifyClusterSnapshotScheduleMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.ScheduleIdentifier != null) {
        entries["ScheduleIdentifier"] = input.ScheduleIdentifier;
    }
    if (input.DisassociateSchedule != null) {
        entries["DisassociateSchedule"] = input.DisassociateSchedule;
    }
    return entries;
};
const serializeAws_queryModifyClusterSubnetGroupMessage = (input, context) => {
    const entries = {};
    if (input.ClusterSubnetGroupName != null) {
        entries["ClusterSubnetGroupName"] = input.ClusterSubnetGroupName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.SubnetIds != null) {
        const memberEntries = serializeAws_querySubnetIdentifierList(input.SubnetIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyEndpointAccessMessage = (input, context) => {
    const entries = {};
    if (input.EndpointName != null) {
        entries["EndpointName"] = input.EndpointName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyEventSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SnsTopicArn != null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.SourceIds != null) {
        const memberEntries = serializeAws_querySourceIdsList(input.SourceIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EventCategories != null) {
        const memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventCategories.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Severity != null) {
        entries["Severity"] = input.Severity;
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_queryModifyScheduledActionMessage = (input, context) => {
    const entries = {};
    if (input.ScheduledActionName != null) {
        entries["ScheduledActionName"] = input.ScheduledActionName;
    }
    if (input.TargetAction != null) {
        const memberEntries = serializeAws_queryScheduledActionType(input.TargetAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetAction.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Schedule != null) {
        entries["Schedule"] = input.Schedule;
    }
    if (input.IamRole != null) {
        entries["IamRole"] = input.IamRole;
    }
    if (input.ScheduledActionDescription != null) {
        entries["ScheduledActionDescription"] = input.ScheduledActionDescription;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Enable != null) {
        entries["Enable"] = input.Enable;
    }
    return entries;
};
const serializeAws_queryModifySnapshotCopyRetentionPeriodMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.RetentionPeriod != null) {
        entries["RetentionPeriod"] = input.RetentionPeriod;
    }
    if (input.Manual != null) {
        entries["Manual"] = input.Manual;
    }
    return entries;
};
const serializeAws_queryModifySnapshotScheduleMessage = (input, context) => {
    const entries = {};
    if (input.ScheduleIdentifier != null) {
        entries["ScheduleIdentifier"] = input.ScheduleIdentifier;
    }
    if (input.ScheduleDefinitions != null) {
        const memberEntries = serializeAws_queryScheduleDefinitionList(input.ScheduleDefinitions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScheduleDefinitions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyUsageLimitMessage = (input, context) => {
    const entries = {};
    if (input.UsageLimitId != null) {
        entries["UsageLimitId"] = input.UsageLimitId;
    }
    if (input.Amount != null) {
        entries["Amount"] = input.Amount;
    }
    if (input.BreachAction != null) {
        entries["BreachAction"] = input.BreachAction;
    }
    return entries;
};
const serializeAws_queryNodeConfigurationOptionsFilter = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Operator != null) {
        entries["Operator"] = input.Operator;
    }
    if (input.Values != null) {
        const memberEntries = serializeAws_queryValueStringList(input.Values, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Value.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryNodeConfigurationOptionsFilterList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryNodeConfigurationOptionsFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`NodeConfigurationOptionsFilter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryParameter = (input, context) => {
    const entries = {};
    if (input.ParameterName != null) {
        entries["ParameterName"] = input.ParameterName;
    }
    if (input.ParameterValue != null) {
        entries["ParameterValue"] = input.ParameterValue;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.DataType != null) {
        entries["DataType"] = input.DataType;
    }
    if (input.AllowedValues != null) {
        entries["AllowedValues"] = input.AllowedValues;
    }
    if (input.ApplyType != null) {
        entries["ApplyType"] = input.ApplyType;
    }
    if (input.IsModifiable != null) {
        entries["IsModifiable"] = input.IsModifiable;
    }
    if (input.MinimumEngineVersion != null) {
        entries["MinimumEngineVersion"] = input.MinimumEngineVersion;
    }
    return entries;
};
const serializeAws_queryParametersList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryParameter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Parameter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryPartnerIntegrationInputMessage = (input, context) => {
    const entries = {};
    if (input.AccountId != null) {
        entries["AccountId"] = input.AccountId;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.PartnerName != null) {
        entries["PartnerName"] = input.PartnerName;
    }
    return entries;
};
const serializeAws_queryPauseClusterMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryPurchaseReservedNodeOfferingMessage = (input, context) => {
    const entries = {};
    if (input.ReservedNodeOfferingId != null) {
        entries["ReservedNodeOfferingId"] = input.ReservedNodeOfferingId;
    }
    if (input.NodeCount != null) {
        entries["NodeCount"] = input.NodeCount;
    }
    return entries;
};
const serializeAws_queryRebootClusterMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryRejectDataShareMessage = (input, context) => {
    const entries = {};
    if (input.DataShareArn != null) {
        entries["DataShareArn"] = input.DataShareArn;
    }
    return entries;
};
const serializeAws_queryResetClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.ParameterGroupName != null) {
        entries["ParameterGroupName"] = input.ParameterGroupName;
    }
    if (input.ResetAllParameters != null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryResizeClusterMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.ClusterType != null) {
        entries["ClusterType"] = input.ClusterType;
    }
    if (input.NodeType != null) {
        entries["NodeType"] = input.NodeType;
    }
    if (input.NumberOfNodes != null) {
        entries["NumberOfNodes"] = input.NumberOfNodes;
    }
    if (input.Classic != null) {
        entries["Classic"] = input.Classic;
    }
    if (input.ReservedNodeId != null) {
        entries["ReservedNodeId"] = input.ReservedNodeId;
    }
    if (input.TargetReservedNodeOfferingId != null) {
        entries["TargetReservedNodeOfferingId"] = input.TargetReservedNodeOfferingId;
    }
    return entries;
};
const serializeAws_queryRestoreFromClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.SnapshotArn != null) {
        entries["SnapshotArn"] = input.SnapshotArn;
    }
    if (input.SnapshotClusterIdentifier != null) {
        entries["SnapshotClusterIdentifier"] = input.SnapshotClusterIdentifier;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.AllowVersionUpgrade != null) {
        entries["AllowVersionUpgrade"] = input.AllowVersionUpgrade;
    }
    if (input.ClusterSubnetGroupName != null) {
        entries["ClusterSubnetGroupName"] = input.ClusterSubnetGroupName;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.OwnerAccount != null) {
        entries["OwnerAccount"] = input.OwnerAccount;
    }
    if (input.HsmClientCertificateIdentifier != null) {
        entries["HsmClientCertificateIdentifier"] = input.HsmClientCertificateIdentifier;
    }
    if (input.HsmConfigurationIdentifier != null) {
        entries["HsmConfigurationIdentifier"] = input.HsmConfigurationIdentifier;
    }
    if (input.ElasticIp != null) {
        entries["ElasticIp"] = input.ElasticIp;
    }
    if (input.ClusterParameterGroupName != null) {
        entries["ClusterParameterGroupName"] = input.ClusterParameterGroupName;
    }
    if (input.ClusterSecurityGroups != null) {
        const memberEntries = serializeAws_queryClusterSecurityGroupNameList(input.ClusterSecurityGroups, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClusterSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.AutomatedSnapshotRetentionPeriod != null) {
        entries["AutomatedSnapshotRetentionPeriod"] = input.AutomatedSnapshotRetentionPeriod;
    }
    if (input.ManualSnapshotRetentionPeriod != null) {
        entries["ManualSnapshotRetentionPeriod"] = input.ManualSnapshotRetentionPeriod;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.NodeType != null) {
        entries["NodeType"] = input.NodeType;
    }
    if (input.EnhancedVpcRouting != null) {
        entries["EnhancedVpcRouting"] = input.EnhancedVpcRouting;
    }
    if (input.AdditionalInfo != null) {
        entries["AdditionalInfo"] = input.AdditionalInfo;
    }
    if (input.IamRoles != null) {
        const memberEntries = serializeAws_queryIamRoleArnList(input.IamRoles, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamRoles.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaintenanceTrackName != null) {
        entries["MaintenanceTrackName"] = input.MaintenanceTrackName;
    }
    if (input.SnapshotScheduleIdentifier != null) {
        entries["SnapshotScheduleIdentifier"] = input.SnapshotScheduleIdentifier;
    }
    if (input.NumberOfNodes != null) {
        entries["NumberOfNodes"] = input.NumberOfNodes;
    }
    if (input.AvailabilityZoneRelocation != null) {
        entries["AvailabilityZoneRelocation"] = input.AvailabilityZoneRelocation;
    }
    if (input.AquaConfigurationStatus != null) {
        entries["AquaConfigurationStatus"] = input.AquaConfigurationStatus;
    }
    if (input.DefaultIamRoleArn != null) {
        entries["DefaultIamRoleArn"] = input.DefaultIamRoleArn;
    }
    if (input.ReservedNodeId != null) {
        entries["ReservedNodeId"] = input.ReservedNodeId;
    }
    if (input.TargetReservedNodeOfferingId != null) {
        entries["TargetReservedNodeOfferingId"] = input.TargetReservedNodeOfferingId;
    }
    if (input.Encrypted != null) {
        entries["Encrypted"] = input.Encrypted;
    }
    return entries;
};
const serializeAws_queryRestoreTableFromClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.SourceDatabaseName != null) {
        entries["SourceDatabaseName"] = input.SourceDatabaseName;
    }
    if (input.SourceSchemaName != null) {
        entries["SourceSchemaName"] = input.SourceSchemaName;
    }
    if (input.SourceTableName != null) {
        entries["SourceTableName"] = input.SourceTableName;
    }
    if (input.TargetDatabaseName != null) {
        entries["TargetDatabaseName"] = input.TargetDatabaseName;
    }
    if (input.TargetSchemaName != null) {
        entries["TargetSchemaName"] = input.TargetSchemaName;
    }
    if (input.NewTableName != null) {
        entries["NewTableName"] = input.NewTableName;
    }
    if (input.EnableCaseSensitiveIdentifier != null) {
        entries["EnableCaseSensitiveIdentifier"] = input.EnableCaseSensitiveIdentifier;
    }
    return entries;
};
const serializeAws_queryResumeClusterMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryRevokeClusterSecurityGroupIngressMessage = (input, context) => {
    const entries = {};
    if (input.ClusterSecurityGroupName != null) {
        entries["ClusterSecurityGroupName"] = input.ClusterSecurityGroupName;
    }
    if (input.CIDRIP != null) {
        entries["CIDRIP"] = input.CIDRIP;
    }
    if (input.EC2SecurityGroupName != null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
    }
    if (input.EC2SecurityGroupOwnerId != null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
    }
    return entries;
};
const serializeAws_queryRevokeEndpointAccessMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.Account != null) {
        entries["Account"] = input.Account;
    }
    if (input.VpcIds != null) {
        const memberEntries = serializeAws_queryVpcIdentifierList(input.VpcIds, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    return entries;
};
const serializeAws_queryRevokeSnapshotAccessMessage = (input, context) => {
    const entries = {};
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.SnapshotArn != null) {
        entries["SnapshotArn"] = input.SnapshotArn;
    }
    if (input.SnapshotClusterIdentifier != null) {
        entries["SnapshotClusterIdentifier"] = input.SnapshotClusterIdentifier;
    }
    if (input.AccountWithRestoreAccess != null) {
        entries["AccountWithRestoreAccess"] = input.AccountWithRestoreAccess;
    }
    return entries;
};
const serializeAws_queryRotateEncryptionKeyMessage = (input, context) => {
    const entries = {};
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryScheduledActionFilter = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Values != null) {
        const memberEntries = serializeAws_queryValueStringList(input.Values, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryScheduledActionFilterList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryScheduledActionFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`ScheduledActionFilter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryScheduledActionType = (input, context) => {
    const entries = {};
    if (input.ResizeCluster != null) {
        const memberEntries = serializeAws_queryResizeClusterMessage(input.ResizeCluster, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResizeCluster.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PauseCluster != null) {
        const memberEntries = serializeAws_queryPauseClusterMessage(input.PauseCluster, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PauseCluster.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ResumeCluster != null) {
        const memberEntries = serializeAws_queryResumeClusterMessage(input.ResumeCluster, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResumeCluster.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryScheduleDefinitionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ScheduleDefinition.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_querySnapshotIdentifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`String.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_querySnapshotSortingEntity = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.SortOrder != null) {
        entries["SortOrder"] = input.SortOrder;
    }
    return entries;
};
const serializeAws_querySnapshotSortingEntityList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_querySnapshotSortingEntity(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`SnapshotSortingEntity.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_querySourceIdsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SourceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_querySubnetIdentifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SubnetIdentifier.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryTag = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_queryTagKeyList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`TagKey.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Tag.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryTagValueList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`TagValue.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryUpdatePartnerStatusInputMessage = (input, context) => {
    const entries = {};
    if (input.AccountId != null) {
        entries["AccountId"] = input.AccountId;
    }
    if (input.ClusterIdentifier != null) {
        entries["ClusterIdentifier"] = input.ClusterIdentifier;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.PartnerName != null) {
        entries["PartnerName"] = input.PartnerName;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    if (input.StatusMessage != null) {
        entries["StatusMessage"] = input.StatusMessage;
    }
    return entries;
};
const serializeAws_queryValueStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryVpcIdentifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcIdentifier.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryVpcSecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcSecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const deserializeAws_queryAcceptReservedNodeExchangeOutputMessage = (output, context) => {
    const contents = {
        ExchangedReservedNode: undefined,
    };
    if (output["ExchangedReservedNode"] !== undefined) {
        contents.ExchangedReservedNode = deserializeAws_queryReservedNode(output["ExchangedReservedNode"], context);
    }
    return contents;
};
const deserializeAws_queryAccessToClusterDeniedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAccessToSnapshotDeniedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAccountAttribute = (output, context) => {
    const contents = {
        AttributeName: undefined,
        AttributeValues: undefined,
    };
    if (output["AttributeName"] !== undefined) {
        contents.AttributeName = (0, smithy_client_1.expectString)(output["AttributeName"]);
    }
    if (output.AttributeValues === "") {
        contents.AttributeValues = [];
    }
    else if (output["AttributeValues"] !== undefined &&
        output["AttributeValues"]["AttributeValueTarget"] !== undefined) {
        contents.AttributeValues = deserializeAws_queryAttributeValueList((0, smithy_client_1.getArrayIfSingleItem)(output["AttributeValues"]["AttributeValueTarget"]), context);
    }
    return contents;
};
const deserializeAws_queryAccountAttributeList = (output, context) => {
    const contents = {
        AccountAttributes: undefined,
    };
    if (output.AccountAttributes === "") {
        contents.AccountAttributes = [];
    }
    else if (output["AccountAttributes"] !== undefined &&
        output["AccountAttributes"]["AccountAttribute"] !== undefined) {
        contents.AccountAttributes = deserializeAws_queryAttributeList((0, smithy_client_1.getArrayIfSingleItem)(output["AccountAttributes"]["AccountAttribute"]), context);
    }
    return contents;
};
const deserializeAws_queryAccountsWithRestoreAccessList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAccountWithRestoreAccess(entry, context);
    });
};
const deserializeAws_queryAccountWithRestoreAccess = (output, context) => {
    const contents = {
        AccountId: undefined,
        AccountAlias: undefined,
    };
    if (output["AccountId"] !== undefined) {
        contents.AccountId = (0, smithy_client_1.expectString)(output["AccountId"]);
    }
    if (output["AccountAlias"] !== undefined) {
        contents.AccountAlias = (0, smithy_client_1.expectString)(output["AccountAlias"]);
    }
    return contents;
};
const deserializeAws_queryAquaConfiguration = (output, context) => {
    const contents = {
        AquaStatus: undefined,
        AquaConfigurationStatus: undefined,
    };
    if (output["AquaStatus"] !== undefined) {
        contents.AquaStatus = (0, smithy_client_1.expectString)(output["AquaStatus"]);
    }
    if (output["AquaConfigurationStatus"] !== undefined) {
        contents.AquaConfigurationStatus = (0, smithy_client_1.expectString)(output["AquaConfigurationStatus"]);
    }
    return contents;
};
const deserializeAws_queryAssociatedClusterList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterAssociatedToSchedule(entry, context);
    });
};
const deserializeAws_queryAttributeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAccountAttribute(entry, context);
    });
};
const deserializeAws_queryAttributeValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAttributeValueTarget(entry, context);
    });
};
const deserializeAws_queryAttributeValueTarget = (output, context) => {
    const contents = {
        AttributeValue: undefined,
    };
    if (output["AttributeValue"] !== undefined) {
        contents.AttributeValue = (0, smithy_client_1.expectString)(output["AttributeValue"]);
    }
    return contents;
};
const deserializeAws_queryAuthenticationProfile = (output, context) => {
    const contents = {
        AuthenticationProfileName: undefined,
        AuthenticationProfileContent: undefined,
    };
    if (output["AuthenticationProfileName"] !== undefined) {
        contents.AuthenticationProfileName = (0, smithy_client_1.expectString)(output["AuthenticationProfileName"]);
    }
    if (output["AuthenticationProfileContent"] !== undefined) {
        contents.AuthenticationProfileContent = (0, smithy_client_1.expectString)(output["AuthenticationProfileContent"]);
    }
    return contents;
};
const deserializeAws_queryAuthenticationProfileAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAuthenticationProfileList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAuthenticationProfile(entry, context);
    });
};
const deserializeAws_queryAuthenticationProfileNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAuthenticationProfileQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAuthorizationAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAuthorizationNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAuthorizationQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAuthorizeClusterSecurityGroupIngressResult = (output, context) => {
    const contents = {
        ClusterSecurityGroup: undefined,
    };
    if (output["ClusterSecurityGroup"] !== undefined) {
        contents.ClusterSecurityGroup = deserializeAws_queryClusterSecurityGroup(output["ClusterSecurityGroup"], context);
    }
    return contents;
};
const deserializeAws_queryAuthorizeSnapshotAccessResult = (output, context) => {
    const contents = {
        Snapshot: undefined,
    };
    if (output["Snapshot"] !== undefined) {
        contents.Snapshot = deserializeAws_querySnapshot(output["Snapshot"], context);
    }
    return contents;
};
const deserializeAws_queryAvailabilityZone = (output, context) => {
    const contents = {
        Name: undefined,
        SupportedPlatforms: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output.SupportedPlatforms === "") {
        contents.SupportedPlatforms = [];
    }
    else if (output["SupportedPlatforms"] !== undefined &&
        output["SupportedPlatforms"]["SupportedPlatform"] !== undefined) {
        contents.SupportedPlatforms = deserializeAws_querySupportedPlatformsList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedPlatforms"]["SupportedPlatform"]), context);
    }
    return contents;
};
const deserializeAws_queryAvailabilityZoneList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAvailabilityZone(entry, context);
    });
};
const deserializeAws_queryBatchDeleteClusterSnapshotsResult = (output, context) => {
    const contents = {
        Resources: undefined,
        Errors: undefined,
    };
    if (output.Resources === "") {
        contents.Resources = [];
    }
    else if (output["Resources"] !== undefined && output["Resources"]["String"] !== undefined) {
        contents.Resources = deserializeAws_querySnapshotIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["Resources"]["String"]), context);
    }
    if (output.Errors === "") {
        contents.Errors = [];
    }
    else if (output["Errors"] !== undefined && output["Errors"]["SnapshotErrorMessage"] !== undefined) {
        contents.Errors = deserializeAws_queryBatchSnapshotOperationErrorList((0, smithy_client_1.getArrayIfSingleItem)(output["Errors"]["SnapshotErrorMessage"]), context);
    }
    return contents;
};
const deserializeAws_queryBatchDeleteRequestSizeExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryBatchModifyClusterSnapshotsLimitExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryBatchModifyClusterSnapshotsOutputMessage = (output, context) => {
    const contents = {
        Resources: undefined,
        Errors: undefined,
    };
    if (output.Resources === "") {
        contents.Resources = [];
    }
    else if (output["Resources"] !== undefined && output["Resources"]["String"] !== undefined) {
        contents.Resources = deserializeAws_querySnapshotIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["Resources"]["String"]), context);
    }
    if (output.Errors === "") {
        contents.Errors = [];
    }
    else if (output["Errors"] !== undefined && output["Errors"]["SnapshotErrorMessage"] !== undefined) {
        contents.Errors = deserializeAws_queryBatchSnapshotOperationErrors((0, smithy_client_1.getArrayIfSingleItem)(output["Errors"]["SnapshotErrorMessage"]), context);
    }
    return contents;
};
const deserializeAws_queryBatchSnapshotOperationErrorList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySnapshotErrorMessage(entry, context);
    });
};
const deserializeAws_queryBatchSnapshotOperationErrors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySnapshotErrorMessage(entry, context);
    });
};
const deserializeAws_queryBucketNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCluster = (output, context) => {
    const contents = {
        ClusterIdentifier: undefined,
        NodeType: undefined,
        ClusterStatus: undefined,
        ClusterAvailabilityStatus: undefined,
        ModifyStatus: undefined,
        MasterUsername: undefined,
        DBName: undefined,
        Endpoint: undefined,
        ClusterCreateTime: undefined,
        AutomatedSnapshotRetentionPeriod: undefined,
        ManualSnapshotRetentionPeriod: undefined,
        ClusterSecurityGroups: undefined,
        VpcSecurityGroups: undefined,
        ClusterParameterGroups: undefined,
        ClusterSubnetGroupName: undefined,
        VpcId: undefined,
        AvailabilityZone: undefined,
        PreferredMaintenanceWindow: undefined,
        PendingModifiedValues: undefined,
        ClusterVersion: undefined,
        AllowVersionUpgrade: undefined,
        NumberOfNodes: undefined,
        PubliclyAccessible: undefined,
        Encrypted: undefined,
        RestoreStatus: undefined,
        DataTransferProgress: undefined,
        HsmStatus: undefined,
        ClusterSnapshotCopyStatus: undefined,
        ClusterPublicKey: undefined,
        ClusterNodes: undefined,
        ElasticIpStatus: undefined,
        ClusterRevisionNumber: undefined,
        Tags: undefined,
        KmsKeyId: undefined,
        EnhancedVpcRouting: undefined,
        IamRoles: undefined,
        PendingActions: undefined,
        MaintenanceTrackName: undefined,
        ElasticResizeNumberOfNodeOptions: undefined,
        DeferredMaintenanceWindows: undefined,
        SnapshotScheduleIdentifier: undefined,
        SnapshotScheduleState: undefined,
        ExpectedNextSnapshotScheduleTime: undefined,
        ExpectedNextSnapshotScheduleTimeStatus: undefined,
        NextMaintenanceWindowStartTime: undefined,
        ResizeInfo: undefined,
        AvailabilityZoneRelocationStatus: undefined,
        ClusterNamespaceArn: undefined,
        TotalStorageCapacityInMegaBytes: undefined,
        AquaConfiguration: undefined,
        DefaultIamRoleArn: undefined,
        ReservedNodeExchangeStatus: undefined,
    };
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["NodeType"] !== undefined) {
        contents.NodeType = (0, smithy_client_1.expectString)(output["NodeType"]);
    }
    if (output["ClusterStatus"] !== undefined) {
        contents.ClusterStatus = (0, smithy_client_1.expectString)(output["ClusterStatus"]);
    }
    if (output["ClusterAvailabilityStatus"] !== undefined) {
        contents.ClusterAvailabilityStatus = (0, smithy_client_1.expectString)(output["ClusterAvailabilityStatus"]);
    }
    if (output["ModifyStatus"] !== undefined) {
        contents.ModifyStatus = (0, smithy_client_1.expectString)(output["ModifyStatus"]);
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
    }
    if (output["DBName"] !== undefined) {
        contents.DBName = (0, smithy_client_1.expectString)(output["DBName"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = deserializeAws_queryEndpoint(output["Endpoint"], context);
    }
    if (output["ClusterCreateTime"] !== undefined) {
        contents.ClusterCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ClusterCreateTime"]));
    }
    if (output["AutomatedSnapshotRetentionPeriod"] !== undefined) {
        contents.AutomatedSnapshotRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["AutomatedSnapshotRetentionPeriod"]);
    }
    if (output["ManualSnapshotRetentionPeriod"] !== undefined) {
        contents.ManualSnapshotRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["ManualSnapshotRetentionPeriod"]);
    }
    if (output.ClusterSecurityGroups === "") {
        contents.ClusterSecurityGroups = [];
    }
    else if (output["ClusterSecurityGroups"] !== undefined &&
        output["ClusterSecurityGroups"]["ClusterSecurityGroup"] !== undefined) {
        contents.ClusterSecurityGroups = deserializeAws_queryClusterSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["ClusterSecurityGroups"]["ClusterSecurityGroup"]), context);
    }
    if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
    }
    else if (output["VpcSecurityGroups"] !== undefined &&
        output["VpcSecurityGroups"]["VpcSecurityGroup"] !== undefined) {
        contents.VpcSecurityGroups = deserializeAws_queryVpcSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroups"]["VpcSecurityGroup"]), context);
    }
    if (output.ClusterParameterGroups === "") {
        contents.ClusterParameterGroups = [];
    }
    else if (output["ClusterParameterGroups"] !== undefined &&
        output["ClusterParameterGroups"]["ClusterParameterGroup"] !== undefined) {
        contents.ClusterParameterGroups = deserializeAws_queryClusterParameterGroupStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["ClusterParameterGroups"]["ClusterParameterGroup"]), context);
    }
    if (output["ClusterSubnetGroupName"] !== undefined) {
        contents.ClusterSubnetGroupName = (0, smithy_client_1.expectString)(output["ClusterSubnetGroupName"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
    }
    if (output["PreferredMaintenanceWindow"] !== undefined) {
        contents.PreferredMaintenanceWindow = (0, smithy_client_1.expectString)(output["PreferredMaintenanceWindow"]);
    }
    if (output["PendingModifiedValues"] !== undefined) {
        contents.PendingModifiedValues = deserializeAws_queryPendingModifiedValues(output["PendingModifiedValues"], context);
    }
    if (output["ClusterVersion"] !== undefined) {
        contents.ClusterVersion = (0, smithy_client_1.expectString)(output["ClusterVersion"]);
    }
    if (output["AllowVersionUpgrade"] !== undefined) {
        contents.AllowVersionUpgrade = (0, smithy_client_1.parseBoolean)(output["AllowVersionUpgrade"]);
    }
    if (output["NumberOfNodes"] !== undefined) {
        contents.NumberOfNodes = (0, smithy_client_1.strictParseInt32)(output["NumberOfNodes"]);
    }
    if (output["PubliclyAccessible"] !== undefined) {
        contents.PubliclyAccessible = (0, smithy_client_1.parseBoolean)(output["PubliclyAccessible"]);
    }
    if (output["Encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["Encrypted"]);
    }
    if (output["RestoreStatus"] !== undefined) {
        contents.RestoreStatus = deserializeAws_queryRestoreStatus(output["RestoreStatus"], context);
    }
    if (output["DataTransferProgress"] !== undefined) {
        contents.DataTransferProgress = deserializeAws_queryDataTransferProgress(output["DataTransferProgress"], context);
    }
    if (output["HsmStatus"] !== undefined) {
        contents.HsmStatus = deserializeAws_queryHsmStatus(output["HsmStatus"], context);
    }
    if (output["ClusterSnapshotCopyStatus"] !== undefined) {
        contents.ClusterSnapshotCopyStatus = deserializeAws_queryClusterSnapshotCopyStatus(output["ClusterSnapshotCopyStatus"], context);
    }
    if (output["ClusterPublicKey"] !== undefined) {
        contents.ClusterPublicKey = (0, smithy_client_1.expectString)(output["ClusterPublicKey"]);
    }
    if (output.ClusterNodes === "") {
        contents.ClusterNodes = [];
    }
    else if (output["ClusterNodes"] !== undefined && output["ClusterNodes"]["member"] !== undefined) {
        contents.ClusterNodes = deserializeAws_queryClusterNodesList((0, smithy_client_1.getArrayIfSingleItem)(output["ClusterNodes"]["member"]), context);
    }
    if (output["ElasticIpStatus"] !== undefined) {
        contents.ElasticIpStatus = deserializeAws_queryElasticIpStatus(output["ElasticIpStatus"], context);
    }
    if (output["ClusterRevisionNumber"] !== undefined) {
        contents.ClusterRevisionNumber = (0, smithy_client_1.expectString)(output["ClusterRevisionNumber"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["EnhancedVpcRouting"] !== undefined) {
        contents.EnhancedVpcRouting = (0, smithy_client_1.parseBoolean)(output["EnhancedVpcRouting"]);
    }
    if (output.IamRoles === "") {
        contents.IamRoles = [];
    }
    else if (output["IamRoles"] !== undefined && output["IamRoles"]["ClusterIamRole"] !== undefined) {
        contents.IamRoles = deserializeAws_queryClusterIamRoleList((0, smithy_client_1.getArrayIfSingleItem)(output["IamRoles"]["ClusterIamRole"]), context);
    }
    if (output.PendingActions === "") {
        contents.PendingActions = [];
    }
    else if (output["PendingActions"] !== undefined && output["PendingActions"]["member"] !== undefined) {
        contents.PendingActions = deserializeAws_queryPendingActionsList((0, smithy_client_1.getArrayIfSingleItem)(output["PendingActions"]["member"]), context);
    }
    if (output["MaintenanceTrackName"] !== undefined) {
        contents.MaintenanceTrackName = (0, smithy_client_1.expectString)(output["MaintenanceTrackName"]);
    }
    if (output["ElasticResizeNumberOfNodeOptions"] !== undefined) {
        contents.ElasticResizeNumberOfNodeOptions = (0, smithy_client_1.expectString)(output["ElasticResizeNumberOfNodeOptions"]);
    }
    if (output.DeferredMaintenanceWindows === "") {
        contents.DeferredMaintenanceWindows = [];
    }
    else if (output["DeferredMaintenanceWindows"] !== undefined &&
        output["DeferredMaintenanceWindows"]["DeferredMaintenanceWindow"] !== undefined) {
        contents.DeferredMaintenanceWindows = deserializeAws_queryDeferredMaintenanceWindowsList((0, smithy_client_1.getArrayIfSingleItem)(output["DeferredMaintenanceWindows"]["DeferredMaintenanceWindow"]), context);
    }
    if (output["SnapshotScheduleIdentifier"] !== undefined) {
        contents.SnapshotScheduleIdentifier = (0, smithy_client_1.expectString)(output["SnapshotScheduleIdentifier"]);
    }
    if (output["SnapshotScheduleState"] !== undefined) {
        contents.SnapshotScheduleState = (0, smithy_client_1.expectString)(output["SnapshotScheduleState"]);
    }
    if (output["ExpectedNextSnapshotScheduleTime"] !== undefined) {
        contents.ExpectedNextSnapshotScheduleTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ExpectedNextSnapshotScheduleTime"]));
    }
    if (output["ExpectedNextSnapshotScheduleTimeStatus"] !== undefined) {
        contents.ExpectedNextSnapshotScheduleTimeStatus = (0, smithy_client_1.expectString)(output["ExpectedNextSnapshotScheduleTimeStatus"]);
    }
    if (output["NextMaintenanceWindowStartTime"] !== undefined) {
        contents.NextMaintenanceWindowStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["NextMaintenanceWindowStartTime"]));
    }
    if (output["ResizeInfo"] !== undefined) {
        contents.ResizeInfo = deserializeAws_queryResizeInfo(output["ResizeInfo"], context);
    }
    if (output["AvailabilityZoneRelocationStatus"] !== undefined) {
        contents.AvailabilityZoneRelocationStatus = (0, smithy_client_1.expectString)(output["AvailabilityZoneRelocationStatus"]);
    }
    if (output["ClusterNamespaceArn"] !== undefined) {
        contents.ClusterNamespaceArn = (0, smithy_client_1.expectString)(output["ClusterNamespaceArn"]);
    }
    if (output["TotalStorageCapacityInMegaBytes"] !== undefined) {
        contents.TotalStorageCapacityInMegaBytes = (0, smithy_client_1.strictParseLong)(output["TotalStorageCapacityInMegaBytes"]);
    }
    if (output["AquaConfiguration"] !== undefined) {
        contents.AquaConfiguration = deserializeAws_queryAquaConfiguration(output["AquaConfiguration"], context);
    }
    if (output["DefaultIamRoleArn"] !== undefined) {
        contents.DefaultIamRoleArn = (0, smithy_client_1.expectString)(output["DefaultIamRoleArn"]);
    }
    if (output["ReservedNodeExchangeStatus"] !== undefined) {
        contents.ReservedNodeExchangeStatus = deserializeAws_queryReservedNodeExchangeStatus(output["ReservedNodeExchangeStatus"], context);
    }
    return contents;
};
const deserializeAws_queryClusterAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterAssociatedToSchedule = (output, context) => {
    const contents = {
        ClusterIdentifier: undefined,
        ScheduleAssociationState: undefined,
    };
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["ScheduleAssociationState"] !== undefined) {
        contents.ScheduleAssociationState = (0, smithy_client_1.expectString)(output["ScheduleAssociationState"]);
    }
    return contents;
};
const deserializeAws_queryClusterCredentials = (output, context) => {
    const contents = {
        DbUser: undefined,
        DbPassword: undefined,
        Expiration: undefined,
    };
    if (output["DbUser"] !== undefined) {
        contents.DbUser = (0, smithy_client_1.expectString)(output["DbUser"]);
    }
    if (output["DbPassword"] !== undefined) {
        contents.DbPassword = (0, smithy_client_1.expectString)(output["DbPassword"]);
    }
    if (output["Expiration"] !== undefined) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Expiration"]));
    }
    return contents;
};
const deserializeAws_queryClusterDbRevision = (output, context) => {
    const contents = {
        ClusterIdentifier: undefined,
        CurrentDatabaseRevision: undefined,
        DatabaseRevisionReleaseDate: undefined,
        RevisionTargets: undefined,
    };
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["CurrentDatabaseRevision"] !== undefined) {
        contents.CurrentDatabaseRevision = (0, smithy_client_1.expectString)(output["CurrentDatabaseRevision"]);
    }
    if (output["DatabaseRevisionReleaseDate"] !== undefined) {
        contents.DatabaseRevisionReleaseDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DatabaseRevisionReleaseDate"]));
    }
    if (output.RevisionTargets === "") {
        contents.RevisionTargets = [];
    }
    else if (output["RevisionTargets"] !== undefined && output["RevisionTargets"]["RevisionTarget"] !== undefined) {
        contents.RevisionTargets = deserializeAws_queryRevisionTargetsList((0, smithy_client_1.getArrayIfSingleItem)(output["RevisionTargets"]["RevisionTarget"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterDbRevisionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterDbRevision(entry, context);
    });
};
const deserializeAws_queryClusterDbRevisionsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ClusterDbRevisions: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ClusterDbRevisions === "") {
        contents.ClusterDbRevisions = [];
    }
    else if (output["ClusterDbRevisions"] !== undefined &&
        output["ClusterDbRevisions"]["ClusterDbRevision"] !== undefined) {
        contents.ClusterDbRevisions = deserializeAws_queryClusterDbRevisionsList((0, smithy_client_1.getArrayIfSingleItem)(output["ClusterDbRevisions"]["ClusterDbRevision"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterExtendedCredentials = (output, context) => {
    const contents = {
        DbUser: undefined,
        DbPassword: undefined,
        Expiration: undefined,
        NextRefreshTime: undefined,
    };
    if (output["DbUser"] !== undefined) {
        contents.DbUser = (0, smithy_client_1.expectString)(output["DbUser"]);
    }
    if (output["DbPassword"] !== undefined) {
        contents.DbPassword = (0, smithy_client_1.expectString)(output["DbPassword"]);
    }
    if (output["Expiration"] !== undefined) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Expiration"]));
    }
    if (output["NextRefreshTime"] !== undefined) {
        contents.NextRefreshTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["NextRefreshTime"]));
    }
    return contents;
};
const deserializeAws_queryClusterIamRole = (output, context) => {
    const contents = {
        IamRoleArn: undefined,
        ApplyStatus: undefined,
    };
    if (output["IamRoleArn"] !== undefined) {
        contents.IamRoleArn = (0, smithy_client_1.expectString)(output["IamRoleArn"]);
    }
    if (output["ApplyStatus"] !== undefined) {
        contents.ApplyStatus = (0, smithy_client_1.expectString)(output["ApplyStatus"]);
    }
    return contents;
};
const deserializeAws_queryClusterIamRoleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterIamRole(entry, context);
    });
};
const deserializeAws_queryClusterList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryCluster(entry, context);
    });
};
const deserializeAws_queryClusterNode = (output, context) => {
    const contents = {
        NodeRole: undefined,
        PrivateIPAddress: undefined,
        PublicIPAddress: undefined,
    };
    if (output["NodeRole"] !== undefined) {
        contents.NodeRole = (0, smithy_client_1.expectString)(output["NodeRole"]);
    }
    if (output["PrivateIPAddress"] !== undefined) {
        contents.PrivateIPAddress = (0, smithy_client_1.expectString)(output["PrivateIPAddress"]);
    }
    if (output["PublicIPAddress"] !== undefined) {
        contents.PublicIPAddress = (0, smithy_client_1.expectString)(output["PublicIPAddress"]);
    }
    return contents;
};
const deserializeAws_queryClusterNodesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterNode(entry, context);
    });
};
const deserializeAws_queryClusterNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterOnLatestRevisionFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterParameterGroup = (output, context) => {
    const contents = {
        ParameterGroupName: undefined,
        ParameterGroupFamily: undefined,
        Description: undefined,
        Tags: undefined,
    };
    if (output["ParameterGroupName"] !== undefined) {
        contents.ParameterGroupName = (0, smithy_client_1.expectString)(output["ParameterGroupName"]);
    }
    if (output["ParameterGroupFamily"] !== undefined) {
        contents.ParameterGroupFamily = (0, smithy_client_1.expectString)(output["ParameterGroupFamily"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterParameterGroupAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterParameterGroupDetails = (output, context) => {
    const contents = {
        Parameters: undefined,
        Marker: undefined,
    };
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = deserializeAws_queryParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryClusterParameterGroupNameMessage = (output, context) => {
    const contents = {
        ParameterGroupName: undefined,
        ParameterGroupStatus: undefined,
    };
    if (output["ParameterGroupName"] !== undefined) {
        contents.ParameterGroupName = (0, smithy_client_1.expectString)(output["ParameterGroupName"]);
    }
    if (output["ParameterGroupStatus"] !== undefined) {
        contents.ParameterGroupStatus = (0, smithy_client_1.expectString)(output["ParameterGroupStatus"]);
    }
    return contents;
};
const deserializeAws_queryClusterParameterGroupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterParameterGroupQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterParameterGroupsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ParameterGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ParameterGroups === "") {
        contents.ParameterGroups = [];
    }
    else if (output["ParameterGroups"] !== undefined &&
        output["ParameterGroups"]["ClusterParameterGroup"] !== undefined) {
        contents.ParameterGroups = deserializeAws_queryParameterGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["ParameterGroups"]["ClusterParameterGroup"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterParameterGroupStatus = (output, context) => {
    const contents = {
        ParameterGroupName: undefined,
        ParameterApplyStatus: undefined,
        ClusterParameterStatusList: undefined,
    };
    if (output["ParameterGroupName"] !== undefined) {
        contents.ParameterGroupName = (0, smithy_client_1.expectString)(output["ParameterGroupName"]);
    }
    if (output["ParameterApplyStatus"] !== undefined) {
        contents.ParameterApplyStatus = (0, smithy_client_1.expectString)(output["ParameterApplyStatus"]);
    }
    if (output.ClusterParameterStatusList === "") {
        contents.ClusterParameterStatusList = [];
    }
    else if (output["ClusterParameterStatusList"] !== undefined &&
        output["ClusterParameterStatusList"]["member"] !== undefined) {
        contents.ClusterParameterStatusList = deserializeAws_queryClusterParameterStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["ClusterParameterStatusList"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterParameterGroupStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterParameterGroupStatus(entry, context);
    });
};
const deserializeAws_queryClusterParameterStatus = (output, context) => {
    const contents = {
        ParameterName: undefined,
        ParameterApplyStatus: undefined,
        ParameterApplyErrorDescription: undefined,
    };
    if (output["ParameterName"] !== undefined) {
        contents.ParameterName = (0, smithy_client_1.expectString)(output["ParameterName"]);
    }
    if (output["ParameterApplyStatus"] !== undefined) {
        contents.ParameterApplyStatus = (0, smithy_client_1.expectString)(output["ParameterApplyStatus"]);
    }
    if (output["ParameterApplyErrorDescription"] !== undefined) {
        contents.ParameterApplyErrorDescription = (0, smithy_client_1.expectString)(output["ParameterApplyErrorDescription"]);
    }
    return contents;
};
const deserializeAws_queryClusterParameterStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterParameterStatus(entry, context);
    });
};
const deserializeAws_queryClusterQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSecurityGroup = (output, context) => {
    const contents = {
        ClusterSecurityGroupName: undefined,
        Description: undefined,
        EC2SecurityGroups: undefined,
        IPRanges: undefined,
        Tags: undefined,
    };
    if (output["ClusterSecurityGroupName"] !== undefined) {
        contents.ClusterSecurityGroupName = (0, smithy_client_1.expectString)(output["ClusterSecurityGroupName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output.EC2SecurityGroups === "") {
        contents.EC2SecurityGroups = [];
    }
    else if (output["EC2SecurityGroups"] !== undefined &&
        output["EC2SecurityGroups"]["EC2SecurityGroup"] !== undefined) {
        contents.EC2SecurityGroups = deserializeAws_queryEC2SecurityGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["EC2SecurityGroups"]["EC2SecurityGroup"]), context);
    }
    if (output.IPRanges === "") {
        contents.IPRanges = [];
    }
    else if (output["IPRanges"] !== undefined && output["IPRanges"]["IPRange"] !== undefined) {
        contents.IPRanges = deserializeAws_queryIPRangeList((0, smithy_client_1.getArrayIfSingleItem)(output["IPRanges"]["IPRange"]), context);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterSecurityGroupAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSecurityGroupMembership = (output, context) => {
    const contents = {
        ClusterSecurityGroupName: undefined,
        Status: undefined,
    };
    if (output["ClusterSecurityGroupName"] !== undefined) {
        contents.ClusterSecurityGroupName = (0, smithy_client_1.expectString)(output["ClusterSecurityGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryClusterSecurityGroupMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterSecurityGroupMembership(entry, context);
    });
};
const deserializeAws_queryClusterSecurityGroupMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ClusterSecurityGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ClusterSecurityGroups === "") {
        contents.ClusterSecurityGroups = [];
    }
    else if (output["ClusterSecurityGroups"] !== undefined &&
        output["ClusterSecurityGroups"]["ClusterSecurityGroup"] !== undefined) {
        contents.ClusterSecurityGroups = deserializeAws_queryClusterSecurityGroups((0, smithy_client_1.getArrayIfSingleItem)(output["ClusterSecurityGroups"]["ClusterSecurityGroup"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterSecurityGroupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSecurityGroupQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSecurityGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterSecurityGroup(entry, context);
    });
};
const deserializeAws_queryClustersMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        Clusters: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.Clusters === "") {
        contents.Clusters = [];
    }
    else if (output["Clusters"] !== undefined && output["Clusters"]["Cluster"] !== undefined) {
        contents.Clusters = deserializeAws_queryClusterList((0, smithy_client_1.getArrayIfSingleItem)(output["Clusters"]["Cluster"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterSnapshotAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSnapshotCopyStatus = (output, context) => {
    const contents = {
        DestinationRegion: undefined,
        RetentionPeriod: undefined,
        ManualSnapshotRetentionPeriod: undefined,
        SnapshotCopyGrantName: undefined,
    };
    if (output["DestinationRegion"] !== undefined) {
        contents.DestinationRegion = (0, smithy_client_1.expectString)(output["DestinationRegion"]);
    }
    if (output["RetentionPeriod"] !== undefined) {
        contents.RetentionPeriod = (0, smithy_client_1.strictParseLong)(output["RetentionPeriod"]);
    }
    if (output["ManualSnapshotRetentionPeriod"] !== undefined) {
        contents.ManualSnapshotRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["ManualSnapshotRetentionPeriod"]);
    }
    if (output["SnapshotCopyGrantName"] !== undefined) {
        contents.SnapshotCopyGrantName = (0, smithy_client_1.expectString)(output["SnapshotCopyGrantName"]);
    }
    return contents;
};
const deserializeAws_queryClusterSnapshotNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSnapshotQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSubnetGroup = (output, context) => {
    const contents = {
        ClusterSubnetGroupName: undefined,
        Description: undefined,
        VpcId: undefined,
        SubnetGroupStatus: undefined,
        Subnets: undefined,
        Tags: undefined,
    };
    if (output["ClusterSubnetGroupName"] !== undefined) {
        contents.ClusterSubnetGroupName = (0, smithy_client_1.expectString)(output["ClusterSubnetGroupName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output["SubnetGroupStatus"] !== undefined) {
        contents.SubnetGroupStatus = (0, smithy_client_1.expectString)(output["SubnetGroupStatus"]);
    }
    if (output.Subnets === "") {
        contents.Subnets = [];
    }
    else if (output["Subnets"] !== undefined && output["Subnets"]["Subnet"] !== undefined) {
        contents.Subnets = deserializeAws_querySubnetList((0, smithy_client_1.getArrayIfSingleItem)(output["Subnets"]["Subnet"]), context);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterSubnetGroupAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSubnetGroupMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ClusterSubnetGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ClusterSubnetGroups === "") {
        contents.ClusterSubnetGroups = [];
    }
    else if (output["ClusterSubnetGroups"] !== undefined &&
        output["ClusterSubnetGroups"]["ClusterSubnetGroup"] !== undefined) {
        contents.ClusterSubnetGroups = deserializeAws_queryClusterSubnetGroups((0, smithy_client_1.getArrayIfSingleItem)(output["ClusterSubnetGroups"]["ClusterSubnetGroup"]), context);
    }
    return contents;
};
const deserializeAws_queryClusterSubnetGroupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSubnetGroupQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterSubnetGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterSubnetGroup(entry, context);
    });
};
const deserializeAws_queryClusterSubnetQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryClusterVersion = (output, context) => {
    const contents = {
        ClusterVersion: undefined,
        ClusterParameterGroupFamily: undefined,
        Description: undefined,
    };
    if (output["ClusterVersion"] !== undefined) {
        contents.ClusterVersion = (0, smithy_client_1.expectString)(output["ClusterVersion"]);
    }
    if (output["ClusterParameterGroupFamily"] !== undefined) {
        contents.ClusterParameterGroupFamily = (0, smithy_client_1.expectString)(output["ClusterParameterGroupFamily"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    return contents;
};
const deserializeAws_queryClusterVersionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterVersion(entry, context);
    });
};
const deserializeAws_queryClusterVersionsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ClusterVersions: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ClusterVersions === "") {
        contents.ClusterVersions = [];
    }
    else if (output["ClusterVersions"] !== undefined && output["ClusterVersions"]["ClusterVersion"] !== undefined) {
        contents.ClusterVersions = deserializeAws_queryClusterVersionList((0, smithy_client_1.getArrayIfSingleItem)(output["ClusterVersions"]["ClusterVersion"]), context);
    }
    return contents;
};
const deserializeAws_queryCopyClusterSnapshotResult = (output, context) => {
    const contents = {
        Snapshot: undefined,
    };
    if (output["Snapshot"] !== undefined) {
        contents.Snapshot = deserializeAws_querySnapshot(output["Snapshot"], context);
    }
    return contents;
};
const deserializeAws_queryCopyToRegionDisabledFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCreateAuthenticationProfileResult = (output, context) => {
    const contents = {
        AuthenticationProfileName: undefined,
        AuthenticationProfileContent: undefined,
    };
    if (output["AuthenticationProfileName"] !== undefined) {
        contents.AuthenticationProfileName = (0, smithy_client_1.expectString)(output["AuthenticationProfileName"]);
    }
    if (output["AuthenticationProfileContent"] !== undefined) {
        contents.AuthenticationProfileContent = (0, smithy_client_1.expectString)(output["AuthenticationProfileContent"]);
    }
    return contents;
};
const deserializeAws_queryCreateClusterParameterGroupResult = (output, context) => {
    const contents = {
        ClusterParameterGroup: undefined,
    };
    if (output["ClusterParameterGroup"] !== undefined) {
        contents.ClusterParameterGroup = deserializeAws_queryClusterParameterGroup(output["ClusterParameterGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCreateClusterResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryCreateClusterSecurityGroupResult = (output, context) => {
    const contents = {
        ClusterSecurityGroup: undefined,
    };
    if (output["ClusterSecurityGroup"] !== undefined) {
        contents.ClusterSecurityGroup = deserializeAws_queryClusterSecurityGroup(output["ClusterSecurityGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCreateClusterSnapshotResult = (output, context) => {
    const contents = {
        Snapshot: undefined,
    };
    if (output["Snapshot"] !== undefined) {
        contents.Snapshot = deserializeAws_querySnapshot(output["Snapshot"], context);
    }
    return contents;
};
const deserializeAws_queryCreateClusterSubnetGroupResult = (output, context) => {
    const contents = {
        ClusterSubnetGroup: undefined,
    };
    if (output["ClusterSubnetGroup"] !== undefined) {
        contents.ClusterSubnetGroup = deserializeAws_queryClusterSubnetGroup(output["ClusterSubnetGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCreateEventSubscriptionResult = (output, context) => {
    const contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const deserializeAws_queryCreateHsmClientCertificateResult = (output, context) => {
    const contents = {
        HsmClientCertificate: undefined,
    };
    if (output["HsmClientCertificate"] !== undefined) {
        contents.HsmClientCertificate = deserializeAws_queryHsmClientCertificate(output["HsmClientCertificate"], context);
    }
    return contents;
};
const deserializeAws_queryCreateHsmConfigurationResult = (output, context) => {
    const contents = {
        HsmConfiguration: undefined,
    };
    if (output["HsmConfiguration"] !== undefined) {
        contents.HsmConfiguration = deserializeAws_queryHsmConfiguration(output["HsmConfiguration"], context);
    }
    return contents;
};
const deserializeAws_queryCreateSnapshotCopyGrantResult = (output, context) => {
    const contents = {
        SnapshotCopyGrant: undefined,
    };
    if (output["SnapshotCopyGrant"] !== undefined) {
        contents.SnapshotCopyGrant = deserializeAws_querySnapshotCopyGrant(output["SnapshotCopyGrant"], context);
    }
    return contents;
};
const deserializeAws_queryCustomerStorageMessage = (output, context) => {
    const contents = {
        TotalBackupSizeInMegaBytes: undefined,
        TotalProvisionedStorageInMegaBytes: undefined,
    };
    if (output["TotalBackupSizeInMegaBytes"] !== undefined) {
        contents.TotalBackupSizeInMegaBytes = (0, smithy_client_1.strictParseFloat)(output["TotalBackupSizeInMegaBytes"]);
    }
    if (output["TotalProvisionedStorageInMegaBytes"] !== undefined) {
        contents.TotalProvisionedStorageInMegaBytes = (0, smithy_client_1.strictParseFloat)(output["TotalProvisionedStorageInMegaBytes"]);
    }
    return contents;
};
const deserializeAws_queryDataShare = (output, context) => {
    const contents = {
        DataShareArn: undefined,
        ProducerArn: undefined,
        AllowPubliclyAccessibleConsumers: undefined,
        DataShareAssociations: undefined,
        ManagedBy: undefined,
    };
    if (output["DataShareArn"] !== undefined) {
        contents.DataShareArn = (0, smithy_client_1.expectString)(output["DataShareArn"]);
    }
    if (output["ProducerArn"] !== undefined) {
        contents.ProducerArn = (0, smithy_client_1.expectString)(output["ProducerArn"]);
    }
    if (output["AllowPubliclyAccessibleConsumers"] !== undefined) {
        contents.AllowPubliclyAccessibleConsumers = (0, smithy_client_1.parseBoolean)(output["AllowPubliclyAccessibleConsumers"]);
    }
    if (output.DataShareAssociations === "") {
        contents.DataShareAssociations = [];
    }
    else if (output["DataShareAssociations"] !== undefined && output["DataShareAssociations"]["member"] !== undefined) {
        contents.DataShareAssociations = deserializeAws_queryDataShareAssociationList((0, smithy_client_1.getArrayIfSingleItem)(output["DataShareAssociations"]["member"]), context);
    }
    if (output["ManagedBy"] !== undefined) {
        contents.ManagedBy = (0, smithy_client_1.expectString)(output["ManagedBy"]);
    }
    return contents;
};
const deserializeAws_queryDataShareAssociation = (output, context) => {
    const contents = {
        ConsumerIdentifier: undefined,
        Status: undefined,
        ConsumerRegion: undefined,
        CreatedDate: undefined,
        StatusChangeDate: undefined,
    };
    if (output["ConsumerIdentifier"] !== undefined) {
        contents.ConsumerIdentifier = (0, smithy_client_1.expectString)(output["ConsumerIdentifier"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["ConsumerRegion"] !== undefined) {
        contents.ConsumerRegion = (0, smithy_client_1.expectString)(output["ConsumerRegion"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreatedDate"]));
    }
    if (output["StatusChangeDate"] !== undefined) {
        contents.StatusChangeDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["StatusChangeDate"]));
    }
    return contents;
};
const deserializeAws_queryDataShareAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDataShareAssociation(entry, context);
    });
};
const deserializeAws_queryDataShareList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDataShare(entry, context);
    });
};
const deserializeAws_queryDataTransferProgress = (output, context) => {
    const contents = {
        Status: undefined,
        CurrentRateInMegaBytesPerSecond: undefined,
        TotalDataInMegaBytes: undefined,
        DataTransferredInMegaBytes: undefined,
        EstimatedTimeToCompletionInSeconds: undefined,
        ElapsedTimeInSeconds: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["CurrentRateInMegaBytesPerSecond"] !== undefined) {
        contents.CurrentRateInMegaBytesPerSecond = (0, smithy_client_1.strictParseFloat)(output["CurrentRateInMegaBytesPerSecond"]);
    }
    if (output["TotalDataInMegaBytes"] !== undefined) {
        contents.TotalDataInMegaBytes = (0, smithy_client_1.strictParseLong)(output["TotalDataInMegaBytes"]);
    }
    if (output["DataTransferredInMegaBytes"] !== undefined) {
        contents.DataTransferredInMegaBytes = (0, smithy_client_1.strictParseLong)(output["DataTransferredInMegaBytes"]);
    }
    if (output["EstimatedTimeToCompletionInSeconds"] !== undefined) {
        contents.EstimatedTimeToCompletionInSeconds = (0, smithy_client_1.strictParseLong)(output["EstimatedTimeToCompletionInSeconds"]);
    }
    if (output["ElapsedTimeInSeconds"] !== undefined) {
        contents.ElapsedTimeInSeconds = (0, smithy_client_1.strictParseLong)(output["ElapsedTimeInSeconds"]);
    }
    return contents;
};
const deserializeAws_queryDefaultClusterParameters = (output, context) => {
    const contents = {
        ParameterGroupFamily: undefined,
        Marker: undefined,
        Parameters: undefined,
    };
    if (output["ParameterGroupFamily"] !== undefined) {
        contents.ParameterGroupFamily = (0, smithy_client_1.expectString)(output["ParameterGroupFamily"]);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = deserializeAws_queryParametersList((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["Parameter"]), context);
    }
    return contents;
};
const deserializeAws_queryDeferredMaintenanceWindow = (output, context) => {
    const contents = {
        DeferMaintenanceIdentifier: undefined,
        DeferMaintenanceStartTime: undefined,
        DeferMaintenanceEndTime: undefined,
    };
    if (output["DeferMaintenanceIdentifier"] !== undefined) {
        contents.DeferMaintenanceIdentifier = (0, smithy_client_1.expectString)(output["DeferMaintenanceIdentifier"]);
    }
    if (output["DeferMaintenanceStartTime"] !== undefined) {
        contents.DeferMaintenanceStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DeferMaintenanceStartTime"]));
    }
    if (output["DeferMaintenanceEndTime"] !== undefined) {
        contents.DeferMaintenanceEndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DeferMaintenanceEndTime"]));
    }
    return contents;
};
const deserializeAws_queryDeferredMaintenanceWindowsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDeferredMaintenanceWindow(entry, context);
    });
};
const deserializeAws_queryDeleteAuthenticationProfileResult = (output, context) => {
    const contents = {
        AuthenticationProfileName: undefined,
    };
    if (output["AuthenticationProfileName"] !== undefined) {
        contents.AuthenticationProfileName = (0, smithy_client_1.expectString)(output["AuthenticationProfileName"]);
    }
    return contents;
};
const deserializeAws_queryDeleteClusterResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteClusterSnapshotResult = (output, context) => {
    const contents = {
        Snapshot: undefined,
    };
    if (output["Snapshot"] !== undefined) {
        contents.Snapshot = deserializeAws_querySnapshot(output["Snapshot"], context);
    }
    return contents;
};
const deserializeAws_queryDependentServiceRequestThrottlingFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDependentServiceUnavailableFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDescribeAuthenticationProfilesResult = (output, context) => {
    const contents = {
        AuthenticationProfiles: undefined,
    };
    if (output.AuthenticationProfiles === "") {
        contents.AuthenticationProfiles = [];
    }
    else if (output["AuthenticationProfiles"] !== undefined &&
        output["AuthenticationProfiles"]["member"] !== undefined) {
        contents.AuthenticationProfiles = deserializeAws_queryAuthenticationProfileList((0, smithy_client_1.getArrayIfSingleItem)(output["AuthenticationProfiles"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeDataSharesForConsumerResult = (output, context) => {
    const contents = {
        DataShares: undefined,
        Marker: undefined,
    };
    if (output.DataShares === "") {
        contents.DataShares = [];
    }
    else if (output["DataShares"] !== undefined && output["DataShares"]["member"] !== undefined) {
        contents.DataShares = deserializeAws_queryDataShareList((0, smithy_client_1.getArrayIfSingleItem)(output["DataShares"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDataSharesForProducerResult = (output, context) => {
    const contents = {
        DataShares: undefined,
        Marker: undefined,
    };
    if (output.DataShares === "") {
        contents.DataShares = [];
    }
    else if (output["DataShares"] !== undefined && output["DataShares"]["member"] !== undefined) {
        contents.DataShares = deserializeAws_queryDataShareList((0, smithy_client_1.getArrayIfSingleItem)(output["DataShares"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDataSharesResult = (output, context) => {
    const contents = {
        DataShares: undefined,
        Marker: undefined,
    };
    if (output.DataShares === "") {
        contents.DataShares = [];
    }
    else if (output["DataShares"] !== undefined && output["DataShares"]["member"] !== undefined) {
        contents.DataShares = deserializeAws_queryDataShareList((0, smithy_client_1.getArrayIfSingleItem)(output["DataShares"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDefaultClusterParametersResult = (output, context) => {
    const contents = {
        DefaultClusterParameters: undefined,
    };
    if (output["DefaultClusterParameters"] !== undefined) {
        contents.DefaultClusterParameters = deserializeAws_queryDefaultClusterParameters(output["DefaultClusterParameters"], context);
    }
    return contents;
};
const deserializeAws_queryDescribePartnersOutputMessage = (output, context) => {
    const contents = {
        PartnerIntegrationInfoList: undefined,
    };
    if (output.PartnerIntegrationInfoList === "") {
        contents.PartnerIntegrationInfoList = [];
    }
    else if (output["PartnerIntegrationInfoList"] !== undefined &&
        output["PartnerIntegrationInfoList"]["PartnerIntegrationInfo"] !== undefined) {
        contents.PartnerIntegrationInfoList = deserializeAws_queryPartnerIntegrationInfoList((0, smithy_client_1.getArrayIfSingleItem)(output["PartnerIntegrationInfoList"]["PartnerIntegrationInfo"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeReservedNodeExchangeStatusOutputMessage = (output, context) => {
    const contents = {
        ReservedNodeExchangeStatusDetails: undefined,
        Marker: undefined,
    };
    if (output.ReservedNodeExchangeStatusDetails === "") {
        contents.ReservedNodeExchangeStatusDetails = [];
    }
    else if (output["ReservedNodeExchangeStatusDetails"] !== undefined &&
        output["ReservedNodeExchangeStatusDetails"]["ReservedNodeExchangeStatus"] !== undefined) {
        contents.ReservedNodeExchangeStatusDetails = deserializeAws_queryReservedNodeExchangeStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedNodeExchangeStatusDetails"]["ReservedNodeExchangeStatus"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeSnapshotSchedulesOutputMessage = (output, context) => {
    const contents = {
        SnapshotSchedules: undefined,
        Marker: undefined,
    };
    if (output.SnapshotSchedules === "") {
        contents.SnapshotSchedules = [];
    }
    else if (output["SnapshotSchedules"] !== undefined &&
        output["SnapshotSchedules"]["SnapshotSchedule"] !== undefined) {
        contents.SnapshotSchedules = deserializeAws_querySnapshotScheduleList((0, smithy_client_1.getArrayIfSingleItem)(output["SnapshotSchedules"]["SnapshotSchedule"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDisableSnapshotCopyResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryEC2SecurityGroup = (output, context) => {
    const contents = {
        Status: undefined,
        EC2SecurityGroupName: undefined,
        EC2SecurityGroupOwnerId: undefined,
        Tags: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["EC2SecurityGroupName"] !== undefined) {
        contents.EC2SecurityGroupName = (0, smithy_client_1.expectString)(output["EC2SecurityGroupName"]);
    }
    if (output["EC2SecurityGroupOwnerId"] !== undefined) {
        contents.EC2SecurityGroupOwnerId = (0, smithy_client_1.expectString)(output["EC2SecurityGroupOwnerId"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryEC2SecurityGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEC2SecurityGroup(entry, context);
    });
};
const deserializeAws_queryElasticIpStatus = (output, context) => {
    const contents = {
        ElasticIp: undefined,
        Status: undefined,
    };
    if (output["ElasticIp"] !== undefined) {
        contents.ElasticIp = (0, smithy_client_1.expectString)(output["ElasticIp"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryEligibleTracksToUpdateList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryUpdateTarget(entry, context);
    });
};
const deserializeAws_queryEnableSnapshotCopyResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryEndpoint = (output, context) => {
    const contents = {
        Address: undefined,
        Port: undefined,
        VpcEndpoints: undefined,
    };
    if (output["Address"] !== undefined) {
        contents.Address = (0, smithy_client_1.expectString)(output["Address"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output.VpcEndpoints === "") {
        contents.VpcEndpoints = [];
    }
    else if (output["VpcEndpoints"] !== undefined && output["VpcEndpoints"]["VpcEndpoint"] !== undefined) {
        contents.VpcEndpoints = deserializeAws_queryVpcEndpointsList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcEndpoints"]["VpcEndpoint"]), context);
    }
    return contents;
};
const deserializeAws_queryEndpointAccess = (output, context) => {
    const contents = {
        ClusterIdentifier: undefined,
        ResourceOwner: undefined,
        SubnetGroupName: undefined,
        EndpointStatus: undefined,
        EndpointName: undefined,
        EndpointCreateTime: undefined,
        Port: undefined,
        Address: undefined,
        VpcSecurityGroups: undefined,
        VpcEndpoint: undefined,
    };
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["ResourceOwner"] !== undefined) {
        contents.ResourceOwner = (0, smithy_client_1.expectString)(output["ResourceOwner"]);
    }
    if (output["SubnetGroupName"] !== undefined) {
        contents.SubnetGroupName = (0, smithy_client_1.expectString)(output["SubnetGroupName"]);
    }
    if (output["EndpointStatus"] !== undefined) {
        contents.EndpointStatus = (0, smithy_client_1.expectString)(output["EndpointStatus"]);
    }
    if (output["EndpointName"] !== undefined) {
        contents.EndpointName = (0, smithy_client_1.expectString)(output["EndpointName"]);
    }
    if (output["EndpointCreateTime"] !== undefined) {
        contents.EndpointCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["EndpointCreateTime"]));
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["Address"] !== undefined) {
        contents.Address = (0, smithy_client_1.expectString)(output["Address"]);
    }
    if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
    }
    else if (output["VpcSecurityGroups"] !== undefined &&
        output["VpcSecurityGroups"]["VpcSecurityGroup"] !== undefined) {
        contents.VpcSecurityGroups = deserializeAws_queryVpcSecurityGroupMembershipList((0, smithy_client_1.getArrayIfSingleItem)(output["VpcSecurityGroups"]["VpcSecurityGroup"]), context);
    }
    if (output["VpcEndpoint"] !== undefined) {
        contents.VpcEndpoint = deserializeAws_queryVpcEndpoint(output["VpcEndpoint"], context);
    }
    return contents;
};
const deserializeAws_queryEndpointAccesses = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEndpointAccess(entry, context);
    });
};
const deserializeAws_queryEndpointAccessList = (output, context) => {
    const contents = {
        EndpointAccessList: undefined,
        Marker: undefined,
    };
    if (output.EndpointAccessList === "") {
        contents.EndpointAccessList = [];
    }
    else if (output["EndpointAccessList"] !== undefined && output["EndpointAccessList"]["member"] !== undefined) {
        contents.EndpointAccessList = deserializeAws_queryEndpointAccesses((0, smithy_client_1.getArrayIfSingleItem)(output["EndpointAccessList"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryEndpointAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEndpointAuthorization = (output, context) => {
    const contents = {
        Grantor: undefined,
        Grantee: undefined,
        ClusterIdentifier: undefined,
        AuthorizeTime: undefined,
        ClusterStatus: undefined,
        Status: undefined,
        AllowedAllVPCs: undefined,
        AllowedVPCs: undefined,
        EndpointCount: undefined,
    };
    if (output["Grantor"] !== undefined) {
        contents.Grantor = (0, smithy_client_1.expectString)(output["Grantor"]);
    }
    if (output["Grantee"] !== undefined) {
        contents.Grantee = (0, smithy_client_1.expectString)(output["Grantee"]);
    }
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["AuthorizeTime"] !== undefined) {
        contents.AuthorizeTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["AuthorizeTime"]));
    }
    if (output["ClusterStatus"] !== undefined) {
        contents.ClusterStatus = (0, smithy_client_1.expectString)(output["ClusterStatus"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["AllowedAllVPCs"] !== undefined) {
        contents.AllowedAllVPCs = (0, smithy_client_1.parseBoolean)(output["AllowedAllVPCs"]);
    }
    if (output.AllowedVPCs === "") {
        contents.AllowedVPCs = [];
    }
    else if (output["AllowedVPCs"] !== undefined && output["AllowedVPCs"]["VpcIdentifier"] !== undefined) {
        contents.AllowedVPCs = deserializeAws_queryVpcIdentifierList((0, smithy_client_1.getArrayIfSingleItem)(output["AllowedVPCs"]["VpcIdentifier"]), context);
    }
    if (output["EndpointCount"] !== undefined) {
        contents.EndpointCount = (0, smithy_client_1.strictParseInt32)(output["EndpointCount"]);
    }
    return contents;
};
const deserializeAws_queryEndpointAuthorizationAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEndpointAuthorizationList = (output, context) => {
    const contents = {
        EndpointAuthorizationList: undefined,
        Marker: undefined,
    };
    if (output.EndpointAuthorizationList === "") {
        contents.EndpointAuthorizationList = [];
    }
    else if (output["EndpointAuthorizationList"] !== undefined &&
        output["EndpointAuthorizationList"]["member"] !== undefined) {
        contents.EndpointAuthorizationList = deserializeAws_queryEndpointAuthorizations((0, smithy_client_1.getArrayIfSingleItem)(output["EndpointAuthorizationList"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryEndpointAuthorizationNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEndpointAuthorizations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEndpointAuthorization(entry, context);
    });
};
const deserializeAws_queryEndpointAuthorizationsPerClusterLimitExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEndpointNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEndpointsPerAuthorizationLimitExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEndpointsPerClusterLimitExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEvent = (output, context) => {
    const contents = {
        SourceIdentifier: undefined,
        SourceType: undefined,
        Message: undefined,
        EventCategories: undefined,
        Severity: undefined,
        Date: undefined,
        EventId: undefined,
    };
    if (output["SourceIdentifier"] !== undefined) {
        contents.SourceIdentifier = (0, smithy_client_1.expectString)(output["SourceIdentifier"]);
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    if (output.EventCategories === "") {
        contents.EventCategories = [];
    }
    else if (output["EventCategories"] !== undefined && output["EventCategories"]["EventCategory"] !== undefined) {
        contents.EventCategories = deserializeAws_queryEventCategoriesList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategories"]["EventCategory"]), context);
    }
    if (output["Severity"] !== undefined) {
        contents.Severity = (0, smithy_client_1.expectString)(output["Severity"]);
    }
    if (output["Date"] !== undefined) {
        contents.Date = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Date"]));
    }
    if (output["EventId"] !== undefined) {
        contents.EventId = (0, smithy_client_1.expectString)(output["EventId"]);
    }
    return contents;
};
const deserializeAws_queryEventCategoriesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryEventCategoriesMap = (output, context) => {
    const contents = {
        SourceType: undefined,
        Events: undefined,
    };
    if (output["SourceType"] !== undefined) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
    }
    if (output.Events === "") {
        contents.Events = [];
    }
    else if (output["Events"] !== undefined && output["Events"]["EventInfoMap"] !== undefined) {
        contents.Events = deserializeAws_queryEventInfoMapList((0, smithy_client_1.getArrayIfSingleItem)(output["Events"]["EventInfoMap"]), context);
    }
    return contents;
};
const deserializeAws_queryEventCategoriesMapList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEventCategoriesMap(entry, context);
    });
};
const deserializeAws_queryEventCategoriesMessage = (output, context) => {
    const contents = {
        EventCategoriesMapList: undefined,
    };
    if (output.EventCategoriesMapList === "") {
        contents.EventCategoriesMapList = [];
    }
    else if (output["EventCategoriesMapList"] !== undefined &&
        output["EventCategoriesMapList"]["EventCategoriesMap"] !== undefined) {
        contents.EventCategoriesMapList = deserializeAws_queryEventCategoriesMapList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategoriesMapList"]["EventCategoriesMap"]), context);
    }
    return contents;
};
const deserializeAws_queryEventInfoMap = (output, context) => {
    const contents = {
        EventId: undefined,
        EventCategories: undefined,
        EventDescription: undefined,
        Severity: undefined,
    };
    if (output["EventId"] !== undefined) {
        contents.EventId = (0, smithy_client_1.expectString)(output["EventId"]);
    }
    if (output.EventCategories === "") {
        contents.EventCategories = [];
    }
    else if (output["EventCategories"] !== undefined && output["EventCategories"]["EventCategory"] !== undefined) {
        contents.EventCategories = deserializeAws_queryEventCategoriesList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategories"]["EventCategory"]), context);
    }
    if (output["EventDescription"] !== undefined) {
        contents.EventDescription = (0, smithy_client_1.expectString)(output["EventDescription"]);
    }
    if (output["Severity"] !== undefined) {
        contents.Severity = (0, smithy_client_1.expectString)(output["Severity"]);
    }
    return contents;
};
const deserializeAws_queryEventInfoMapList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEventInfoMap(entry, context);
    });
};
const deserializeAws_queryEventList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEvent(entry, context);
    });
};
const deserializeAws_queryEventsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        Events: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.Events === "") {
        contents.Events = [];
    }
    else if (output["Events"] !== undefined && output["Events"]["Event"] !== undefined) {
        contents.Events = deserializeAws_queryEventList((0, smithy_client_1.getArrayIfSingleItem)(output["Events"]["Event"]), context);
    }
    return contents;
};
const deserializeAws_queryEventSubscription = (output, context) => {
    const contents = {
        CustomerAwsId: undefined,
        CustSubscriptionId: undefined,
        SnsTopicArn: undefined,
        Status: undefined,
        SubscriptionCreationTime: undefined,
        SourceType: undefined,
        SourceIdsList: undefined,
        EventCategoriesList: undefined,
        Severity: undefined,
        Enabled: undefined,
        Tags: undefined,
    };
    if (output["CustomerAwsId"] !== undefined) {
        contents.CustomerAwsId = (0, smithy_client_1.expectString)(output["CustomerAwsId"]);
    }
    if (output["CustSubscriptionId"] !== undefined) {
        contents.CustSubscriptionId = (0, smithy_client_1.expectString)(output["CustSubscriptionId"]);
    }
    if (output["SnsTopicArn"] !== undefined) {
        contents.SnsTopicArn = (0, smithy_client_1.expectString)(output["SnsTopicArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["SubscriptionCreationTime"] !== undefined) {
        contents.SubscriptionCreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["SubscriptionCreationTime"]));
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
    }
    if (output.SourceIdsList === "") {
        contents.SourceIdsList = [];
    }
    else if (output["SourceIdsList"] !== undefined && output["SourceIdsList"]["SourceId"] !== undefined) {
        contents.SourceIdsList = deserializeAws_querySourceIdsList((0, smithy_client_1.getArrayIfSingleItem)(output["SourceIdsList"]["SourceId"]), context);
    }
    if (output.EventCategoriesList === "") {
        contents.EventCategoriesList = [];
    }
    else if (output["EventCategoriesList"] !== undefined &&
        output["EventCategoriesList"]["EventCategory"] !== undefined) {
        contents.EventCategoriesList = deserializeAws_queryEventCategoriesList((0, smithy_client_1.getArrayIfSingleItem)(output["EventCategoriesList"]["EventCategory"]), context);
    }
    if (output["Severity"] !== undefined) {
        contents.Severity = (0, smithy_client_1.expectString)(output["Severity"]);
    }
    if (output["Enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["Enabled"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryEventSubscriptionQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEventSubscriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEventSubscription(entry, context);
    });
};
const deserializeAws_queryEventSubscriptionsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        EventSubscriptionsList: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.EventSubscriptionsList === "") {
        contents.EventSubscriptionsList = [];
    }
    else if (output["EventSubscriptionsList"] !== undefined &&
        output["EventSubscriptionsList"]["EventSubscription"] !== undefined) {
        contents.EventSubscriptionsList = deserializeAws_queryEventSubscriptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["EventSubscriptionsList"]["EventSubscription"]), context);
    }
    return contents;
};
const deserializeAws_queryGetReservedNodeExchangeConfigurationOptionsOutputMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ReservedNodeConfigurationOptionList: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ReservedNodeConfigurationOptionList === "") {
        contents.ReservedNodeConfigurationOptionList = [];
    }
    else if (output["ReservedNodeConfigurationOptionList"] !== undefined &&
        output["ReservedNodeConfigurationOptionList"]["ReservedNodeConfigurationOption"] !== undefined) {
        contents.ReservedNodeConfigurationOptionList = deserializeAws_queryReservedNodeConfigurationOptionList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedNodeConfigurationOptionList"]["ReservedNodeConfigurationOption"]), context);
    }
    return contents;
};
const deserializeAws_queryGetReservedNodeExchangeOfferingsOutputMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ReservedNodeOfferings: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ReservedNodeOfferings === "") {
        contents.ReservedNodeOfferings = [];
    }
    else if (output["ReservedNodeOfferings"] !== undefined &&
        output["ReservedNodeOfferings"]["ReservedNodeOffering"] !== undefined) {
        contents.ReservedNodeOfferings = deserializeAws_queryReservedNodeOfferingList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedNodeOfferings"]["ReservedNodeOffering"]), context);
    }
    return contents;
};
const deserializeAws_queryHsmClientCertificate = (output, context) => {
    const contents = {
        HsmClientCertificateIdentifier: undefined,
        HsmClientCertificatePublicKey: undefined,
        Tags: undefined,
    };
    if (output["HsmClientCertificateIdentifier"] !== undefined) {
        contents.HsmClientCertificateIdentifier = (0, smithy_client_1.expectString)(output["HsmClientCertificateIdentifier"]);
    }
    if (output["HsmClientCertificatePublicKey"] !== undefined) {
        contents.HsmClientCertificatePublicKey = (0, smithy_client_1.expectString)(output["HsmClientCertificatePublicKey"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryHsmClientCertificateAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryHsmClientCertificateList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryHsmClientCertificate(entry, context);
    });
};
const deserializeAws_queryHsmClientCertificateMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        HsmClientCertificates: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.HsmClientCertificates === "") {
        contents.HsmClientCertificates = [];
    }
    else if (output["HsmClientCertificates"] !== undefined &&
        output["HsmClientCertificates"]["HsmClientCertificate"] !== undefined) {
        contents.HsmClientCertificates = deserializeAws_queryHsmClientCertificateList((0, smithy_client_1.getArrayIfSingleItem)(output["HsmClientCertificates"]["HsmClientCertificate"]), context);
    }
    return contents;
};
const deserializeAws_queryHsmClientCertificateNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryHsmClientCertificateQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryHsmConfiguration = (output, context) => {
    const contents = {
        HsmConfigurationIdentifier: undefined,
        Description: undefined,
        HsmIpAddress: undefined,
        HsmPartitionName: undefined,
        Tags: undefined,
    };
    if (output["HsmConfigurationIdentifier"] !== undefined) {
        contents.HsmConfigurationIdentifier = (0, smithy_client_1.expectString)(output["HsmConfigurationIdentifier"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["HsmIpAddress"] !== undefined) {
        contents.HsmIpAddress = (0, smithy_client_1.expectString)(output["HsmIpAddress"]);
    }
    if (output["HsmPartitionName"] !== undefined) {
        contents.HsmPartitionName = (0, smithy_client_1.expectString)(output["HsmPartitionName"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryHsmConfigurationAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryHsmConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryHsmConfiguration(entry, context);
    });
};
const deserializeAws_queryHsmConfigurationMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        HsmConfigurations: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.HsmConfigurations === "") {
        contents.HsmConfigurations = [];
    }
    else if (output["HsmConfigurations"] !== undefined &&
        output["HsmConfigurations"]["HsmConfiguration"] !== undefined) {
        contents.HsmConfigurations = deserializeAws_queryHsmConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["HsmConfigurations"]["HsmConfiguration"]), context);
    }
    return contents;
};
const deserializeAws_queryHsmConfigurationNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryHsmConfigurationQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryHsmStatus = (output, context) => {
    const contents = {
        HsmClientCertificateIdentifier: undefined,
        HsmConfigurationIdentifier: undefined,
        Status: undefined,
    };
    if (output["HsmClientCertificateIdentifier"] !== undefined) {
        contents.HsmClientCertificateIdentifier = (0, smithy_client_1.expectString)(output["HsmClientCertificateIdentifier"]);
    }
    if (output["HsmConfigurationIdentifier"] !== undefined) {
        contents.HsmConfigurationIdentifier = (0, smithy_client_1.expectString)(output["HsmConfigurationIdentifier"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryImportTablesCompleted = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryImportTablesInProgress = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryImportTablesNotStarted = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryIncompatibleOrderableOptions = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInProgressTableRestoreQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInsufficientClusterCapacityFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInsufficientS3BucketPolicyFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidAuthenticationProfileRequestFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidAuthorizationStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidClusterParameterGroupStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidClusterSecurityGroupStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidClusterSnapshotScheduleStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidClusterSnapshotStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidClusterStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidClusterSubnetGroupStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidClusterSubnetStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidClusterTrackFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDataShareFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidElasticIpFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidEndpointStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidHsmClientCertificateStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidHsmConfigurationStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidNamespaceFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidReservedNodeStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidRestoreFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidRetentionPeriodFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidS3BucketNameFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidS3KeyPrefixFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidScheduledActionFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidScheduleFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidSnapshotCopyGrantStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidSubnet = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidSubscriptionStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidTableRestoreArgumentFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidTagFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidUsageLimitFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidVPCNetworkStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryIPRange = (output, context) => {
    const contents = {
        Status: undefined,
        CIDRIP: undefined,
        Tags: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["CIDRIP"] !== undefined) {
        contents.CIDRIP = (0, smithy_client_1.expectString)(output["CIDRIP"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryIPRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryIPRange(entry, context);
    });
};
const deserializeAws_queryLimitExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryLoggingStatus = (output, context) => {
    const contents = {
        LoggingEnabled: undefined,
        BucketName: undefined,
        S3KeyPrefix: undefined,
        LastSuccessfulDeliveryTime: undefined,
        LastFailureTime: undefined,
        LastFailureMessage: undefined,
        LogDestinationType: undefined,
        LogExports: undefined,
    };
    if (output["LoggingEnabled"] !== undefined) {
        contents.LoggingEnabled = (0, smithy_client_1.parseBoolean)(output["LoggingEnabled"]);
    }
    if (output["BucketName"] !== undefined) {
        contents.BucketName = (0, smithy_client_1.expectString)(output["BucketName"]);
    }
    if (output["S3KeyPrefix"] !== undefined) {
        contents.S3KeyPrefix = (0, smithy_client_1.expectString)(output["S3KeyPrefix"]);
    }
    if (output["LastSuccessfulDeliveryTime"] !== undefined) {
        contents.LastSuccessfulDeliveryTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LastSuccessfulDeliveryTime"]));
    }
    if (output["LastFailureTime"] !== undefined) {
        contents.LastFailureTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LastFailureTime"]));
    }
    if (output["LastFailureMessage"] !== undefined) {
        contents.LastFailureMessage = (0, smithy_client_1.expectString)(output["LastFailureMessage"]);
    }
    if (output["LogDestinationType"] !== undefined) {
        contents.LogDestinationType = (0, smithy_client_1.expectString)(output["LogDestinationType"]);
    }
    if (output.LogExports === "") {
        contents.LogExports = [];
    }
    else if (output["LogExports"] !== undefined && output["LogExports"]["member"] !== undefined) {
        contents.LogExports = deserializeAws_queryLogTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["LogExports"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryLogTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryMaintenanceTrack = (output, context) => {
    const contents = {
        MaintenanceTrackName: undefined,
        DatabaseVersion: undefined,
        UpdateTargets: undefined,
    };
    if (output["MaintenanceTrackName"] !== undefined) {
        contents.MaintenanceTrackName = (0, smithy_client_1.expectString)(output["MaintenanceTrackName"]);
    }
    if (output["DatabaseVersion"] !== undefined) {
        contents.DatabaseVersion = (0, smithy_client_1.expectString)(output["DatabaseVersion"]);
    }
    if (output.UpdateTargets === "") {
        contents.UpdateTargets = [];
    }
    else if (output["UpdateTargets"] !== undefined && output["UpdateTargets"]["UpdateTarget"] !== undefined) {
        contents.UpdateTargets = deserializeAws_queryEligibleTracksToUpdateList((0, smithy_client_1.getArrayIfSingleItem)(output["UpdateTargets"]["UpdateTarget"]), context);
    }
    return contents;
};
const deserializeAws_queryModifyAquaOutputMessage = (output, context) => {
    const contents = {
        AquaConfiguration: undefined,
    };
    if (output["AquaConfiguration"] !== undefined) {
        contents.AquaConfiguration = deserializeAws_queryAquaConfiguration(output["AquaConfiguration"], context);
    }
    return contents;
};
const deserializeAws_queryModifyAuthenticationProfileResult = (output, context) => {
    const contents = {
        AuthenticationProfileName: undefined,
        AuthenticationProfileContent: undefined,
    };
    if (output["AuthenticationProfileName"] !== undefined) {
        contents.AuthenticationProfileName = (0, smithy_client_1.expectString)(output["AuthenticationProfileName"]);
    }
    if (output["AuthenticationProfileContent"] !== undefined) {
        contents.AuthenticationProfileContent = (0, smithy_client_1.expectString)(output["AuthenticationProfileContent"]);
    }
    return contents;
};
const deserializeAws_queryModifyClusterDbRevisionResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryModifyClusterIamRolesResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryModifyClusterMaintenanceResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryModifyClusterResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryModifyClusterSnapshotResult = (output, context) => {
    const contents = {
        Snapshot: undefined,
    };
    if (output["Snapshot"] !== undefined) {
        contents.Snapshot = deserializeAws_querySnapshot(output["Snapshot"], context);
    }
    return contents;
};
const deserializeAws_queryModifyClusterSubnetGroupResult = (output, context) => {
    const contents = {
        ClusterSubnetGroup: undefined,
    };
    if (output["ClusterSubnetGroup"] !== undefined) {
        contents.ClusterSubnetGroup = deserializeAws_queryClusterSubnetGroup(output["ClusterSubnetGroup"], context);
    }
    return contents;
};
const deserializeAws_queryModifyEventSubscriptionResult = (output, context) => {
    const contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const deserializeAws_queryModifySnapshotCopyRetentionPeriodResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryNetworkInterface = (output, context) => {
    const contents = {
        NetworkInterfaceId: undefined,
        SubnetId: undefined,
        PrivateIpAddress: undefined,
        AvailabilityZone: undefined,
    };
    if (output["NetworkInterfaceId"] !== undefined) {
        contents.NetworkInterfaceId = (0, smithy_client_1.expectString)(output["NetworkInterfaceId"]);
    }
    if (output["SubnetId"] !== undefined) {
        contents.SubnetId = (0, smithy_client_1.expectString)(output["SubnetId"]);
    }
    if (output["PrivateIpAddress"] !== undefined) {
        contents.PrivateIpAddress = (0, smithy_client_1.expectString)(output["PrivateIpAddress"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
    }
    return contents;
};
const deserializeAws_queryNetworkInterfaceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryNetworkInterface(entry, context);
    });
};
const deserializeAws_queryNodeConfigurationOption = (output, context) => {
    const contents = {
        NodeType: undefined,
        NumberOfNodes: undefined,
        EstimatedDiskUtilizationPercent: undefined,
        Mode: undefined,
    };
    if (output["NodeType"] !== undefined) {
        contents.NodeType = (0, smithy_client_1.expectString)(output["NodeType"]);
    }
    if (output["NumberOfNodes"] !== undefined) {
        contents.NumberOfNodes = (0, smithy_client_1.strictParseInt32)(output["NumberOfNodes"]);
    }
    if (output["EstimatedDiskUtilizationPercent"] !== undefined) {
        contents.EstimatedDiskUtilizationPercent = (0, smithy_client_1.strictParseFloat)(output["EstimatedDiskUtilizationPercent"]);
    }
    if (output["Mode"] !== undefined) {
        contents.Mode = (0, smithy_client_1.expectString)(output["Mode"]);
    }
    return contents;
};
const deserializeAws_queryNodeConfigurationOptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryNodeConfigurationOption(entry, context);
    });
};
const deserializeAws_queryNodeConfigurationOptionsMessage = (output, context) => {
    const contents = {
        NodeConfigurationOptionList: undefined,
        Marker: undefined,
    };
    if (output.NodeConfigurationOptionList === "") {
        contents.NodeConfigurationOptionList = [];
    }
    else if (output["NodeConfigurationOptionList"] !== undefined &&
        output["NodeConfigurationOptionList"]["NodeConfigurationOption"] !== undefined) {
        contents.NodeConfigurationOptionList = deserializeAws_queryNodeConfigurationOptionList((0, smithy_client_1.getArrayIfSingleItem)(output["NodeConfigurationOptionList"]["NodeConfigurationOption"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryNumberOfNodesPerClusterLimitExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryNumberOfNodesQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryOrderableClusterOption = (output, context) => {
    const contents = {
        ClusterVersion: undefined,
        ClusterType: undefined,
        NodeType: undefined,
        AvailabilityZones: undefined,
    };
    if (output["ClusterVersion"] !== undefined) {
        contents.ClusterVersion = (0, smithy_client_1.expectString)(output["ClusterVersion"]);
    }
    if (output["ClusterType"] !== undefined) {
        contents.ClusterType = (0, smithy_client_1.expectString)(output["ClusterType"]);
    }
    if (output["NodeType"] !== undefined) {
        contents.NodeType = (0, smithy_client_1.expectString)(output["NodeType"]);
    }
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["AvailabilityZones"] !== undefined &&
        output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZoneList((0, smithy_client_1.getArrayIfSingleItem)(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    return contents;
};
const deserializeAws_queryOrderableClusterOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOrderableClusterOption(entry, context);
    });
};
const deserializeAws_queryOrderableClusterOptionsMessage = (output, context) => {
    const contents = {
        OrderableClusterOptions: undefined,
        Marker: undefined,
    };
    if (output.OrderableClusterOptions === "") {
        contents.OrderableClusterOptions = [];
    }
    else if (output["OrderableClusterOptions"] !== undefined &&
        output["OrderableClusterOptions"]["OrderableClusterOption"] !== undefined) {
        contents.OrderableClusterOptions = deserializeAws_queryOrderableClusterOptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["OrderableClusterOptions"]["OrderableClusterOption"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryParameter = (output, context) => {
    const contents = {
        ParameterName: undefined,
        ParameterValue: undefined,
        Description: undefined,
        Source: undefined,
        DataType: undefined,
        AllowedValues: undefined,
        ApplyType: undefined,
        IsModifiable: undefined,
        MinimumEngineVersion: undefined,
    };
    if (output["ParameterName"] !== undefined) {
        contents.ParameterName = (0, smithy_client_1.expectString)(output["ParameterName"]);
    }
    if (output["ParameterValue"] !== undefined) {
        contents.ParameterValue = (0, smithy_client_1.expectString)(output["ParameterValue"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["Source"] !== undefined) {
        contents.Source = (0, smithy_client_1.expectString)(output["Source"]);
    }
    if (output["DataType"] !== undefined) {
        contents.DataType = (0, smithy_client_1.expectString)(output["DataType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = (0, smithy_client_1.expectString)(output["AllowedValues"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = (0, smithy_client_1.expectString)(output["ApplyType"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = (0, smithy_client_1.parseBoolean)(output["IsModifiable"]);
    }
    if (output["MinimumEngineVersion"] !== undefined) {
        contents.MinimumEngineVersion = (0, smithy_client_1.expectString)(output["MinimumEngineVersion"]);
    }
    return contents;
};
const deserializeAws_queryParameterGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryClusterParameterGroup(entry, context);
    });
};
const deserializeAws_queryParametersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryParameter(entry, context);
    });
};
const deserializeAws_queryPartnerIntegrationInfo = (output, context) => {
    const contents = {
        DatabaseName: undefined,
        PartnerName: undefined,
        Status: undefined,
        StatusMessage: undefined,
        CreatedAt: undefined,
        UpdatedAt: undefined,
    };
    if (output["DatabaseName"] !== undefined) {
        contents.DatabaseName = (0, smithy_client_1.expectString)(output["DatabaseName"]);
    }
    if (output["PartnerName"] !== undefined) {
        contents.PartnerName = (0, smithy_client_1.expectString)(output["PartnerName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["StatusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["StatusMessage"]);
    }
    if (output["CreatedAt"] !== undefined) {
        contents.CreatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreatedAt"]));
    }
    if (output["UpdatedAt"] !== undefined) {
        contents.UpdatedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["UpdatedAt"]));
    }
    return contents;
};
const deserializeAws_queryPartnerIntegrationInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryPartnerIntegrationInfo(entry, context);
    });
};
const deserializeAws_queryPartnerIntegrationOutputMessage = (output, context) => {
    const contents = {
        DatabaseName: undefined,
        PartnerName: undefined,
    };
    if (output["DatabaseName"] !== undefined) {
        contents.DatabaseName = (0, smithy_client_1.expectString)(output["DatabaseName"]);
    }
    if (output["PartnerName"] !== undefined) {
        contents.PartnerName = (0, smithy_client_1.expectString)(output["PartnerName"]);
    }
    return contents;
};
const deserializeAws_queryPartnerNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryPauseClusterMessage = (output, context) => {
    const contents = {
        ClusterIdentifier: undefined,
    };
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    return contents;
};
const deserializeAws_queryPauseClusterResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryPendingActionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryPendingModifiedValues = (output, context) => {
    const contents = {
        MasterUserPassword: undefined,
        NodeType: undefined,
        NumberOfNodes: undefined,
        ClusterType: undefined,
        ClusterVersion: undefined,
        AutomatedSnapshotRetentionPeriod: undefined,
        ClusterIdentifier: undefined,
        PubliclyAccessible: undefined,
        EnhancedVpcRouting: undefined,
        MaintenanceTrackName: undefined,
        EncryptionType: undefined,
    };
    if (output["MasterUserPassword"] !== undefined) {
        contents.MasterUserPassword = (0, smithy_client_1.expectString)(output["MasterUserPassword"]);
    }
    if (output["NodeType"] !== undefined) {
        contents.NodeType = (0, smithy_client_1.expectString)(output["NodeType"]);
    }
    if (output["NumberOfNodes"] !== undefined) {
        contents.NumberOfNodes = (0, smithy_client_1.strictParseInt32)(output["NumberOfNodes"]);
    }
    if (output["ClusterType"] !== undefined) {
        contents.ClusterType = (0, smithy_client_1.expectString)(output["ClusterType"]);
    }
    if (output["ClusterVersion"] !== undefined) {
        contents.ClusterVersion = (0, smithy_client_1.expectString)(output["ClusterVersion"]);
    }
    if (output["AutomatedSnapshotRetentionPeriod"] !== undefined) {
        contents.AutomatedSnapshotRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["AutomatedSnapshotRetentionPeriod"]);
    }
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["PubliclyAccessible"] !== undefined) {
        contents.PubliclyAccessible = (0, smithy_client_1.parseBoolean)(output["PubliclyAccessible"]);
    }
    if (output["EnhancedVpcRouting"] !== undefined) {
        contents.EnhancedVpcRouting = (0, smithy_client_1.parseBoolean)(output["EnhancedVpcRouting"]);
    }
    if (output["MaintenanceTrackName"] !== undefined) {
        contents.MaintenanceTrackName = (0, smithy_client_1.expectString)(output["MaintenanceTrackName"]);
    }
    if (output["EncryptionType"] !== undefined) {
        contents.EncryptionType = (0, smithy_client_1.expectString)(output["EncryptionType"]);
    }
    return contents;
};
const deserializeAws_queryPurchaseReservedNodeOfferingResult = (output, context) => {
    const contents = {
        ReservedNode: undefined,
    };
    if (output["ReservedNode"] !== undefined) {
        contents.ReservedNode = deserializeAws_queryReservedNode(output["ReservedNode"], context);
    }
    return contents;
};
const deserializeAws_queryRebootClusterResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryRecurringCharge = (output, context) => {
    const contents = {
        RecurringChargeAmount: undefined,
        RecurringChargeFrequency: undefined,
    };
    if (output["RecurringChargeAmount"] !== undefined) {
        contents.RecurringChargeAmount = (0, smithy_client_1.strictParseFloat)(output["RecurringChargeAmount"]);
    }
    if (output["RecurringChargeFrequency"] !== undefined) {
        contents.RecurringChargeFrequency = (0, smithy_client_1.expectString)(output["RecurringChargeFrequency"]);
    }
    return contents;
};
const deserializeAws_queryRecurringChargeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryRecurringCharge(entry, context);
    });
};
const deserializeAws_queryReservedNode = (output, context) => {
    const contents = {
        ReservedNodeId: undefined,
        ReservedNodeOfferingId: undefined,
        NodeType: undefined,
        StartTime: undefined,
        Duration: undefined,
        FixedPrice: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        NodeCount: undefined,
        State: undefined,
        OfferingType: undefined,
        RecurringCharges: undefined,
        ReservedNodeOfferingType: undefined,
    };
    if (output["ReservedNodeId"] !== undefined) {
        contents.ReservedNodeId = (0, smithy_client_1.expectString)(output["ReservedNodeId"]);
    }
    if (output["ReservedNodeOfferingId"] !== undefined) {
        contents.ReservedNodeOfferingId = (0, smithy_client_1.expectString)(output["ReservedNodeOfferingId"]);
    }
    if (output["NodeType"] !== undefined) {
        contents.NodeType = (0, smithy_client_1.expectString)(output["NodeType"]);
    }
    if (output["StartTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["StartTime"]));
    }
    if (output["Duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["Duration"]);
    }
    if (output["FixedPrice"] !== undefined) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["FixedPrice"]);
    }
    if (output["UsagePrice"] !== undefined) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["UsagePrice"]);
    }
    if (output["CurrencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["CurrencyCode"]);
    }
    if (output["NodeCount"] !== undefined) {
        contents.NodeCount = (0, smithy_client_1.strictParseInt32)(output["NodeCount"]);
    }
    if (output["State"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
    }
    if (output["OfferingType"] !== undefined) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["OfferingType"]);
    }
    if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["RecurringCharges"] !== undefined && output["RecurringCharges"]["RecurringCharge"] !== undefined) {
        contents.RecurringCharges = deserializeAws_queryRecurringChargeList((0, smithy_client_1.getArrayIfSingleItem)(output["RecurringCharges"]["RecurringCharge"]), context);
    }
    if (output["ReservedNodeOfferingType"] !== undefined) {
        contents.ReservedNodeOfferingType = (0, smithy_client_1.expectString)(output["ReservedNodeOfferingType"]);
    }
    return contents;
};
const deserializeAws_queryReservedNodeAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryReservedNodeAlreadyMigratedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryReservedNodeConfigurationOption = (output, context) => {
    const contents = {
        SourceReservedNode: undefined,
        TargetReservedNodeCount: undefined,
        TargetReservedNodeOffering: undefined,
    };
    if (output["SourceReservedNode"] !== undefined) {
        contents.SourceReservedNode = deserializeAws_queryReservedNode(output["SourceReservedNode"], context);
    }
    if (output["TargetReservedNodeCount"] !== undefined) {
        contents.TargetReservedNodeCount = (0, smithy_client_1.strictParseInt32)(output["TargetReservedNodeCount"]);
    }
    if (output["TargetReservedNodeOffering"] !== undefined) {
        contents.TargetReservedNodeOffering = deserializeAws_queryReservedNodeOffering(output["TargetReservedNodeOffering"], context);
    }
    return contents;
};
const deserializeAws_queryReservedNodeConfigurationOptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReservedNodeConfigurationOption(entry, context);
    });
};
const deserializeAws_queryReservedNodeExchangeNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryReservedNodeExchangeStatus = (output, context) => {
    const contents = {
        ReservedNodeExchangeRequestId: undefined,
        Status: undefined,
        RequestTime: undefined,
        SourceReservedNodeId: undefined,
        SourceReservedNodeType: undefined,
        SourceReservedNodeCount: undefined,
        TargetReservedNodeOfferingId: undefined,
        TargetReservedNodeType: undefined,
        TargetReservedNodeCount: undefined,
    };
    if (output["ReservedNodeExchangeRequestId"] !== undefined) {
        contents.ReservedNodeExchangeRequestId = (0, smithy_client_1.expectString)(output["ReservedNodeExchangeRequestId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["RequestTime"] !== undefined) {
        contents.RequestTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["RequestTime"]));
    }
    if (output["SourceReservedNodeId"] !== undefined) {
        contents.SourceReservedNodeId = (0, smithy_client_1.expectString)(output["SourceReservedNodeId"]);
    }
    if (output["SourceReservedNodeType"] !== undefined) {
        contents.SourceReservedNodeType = (0, smithy_client_1.expectString)(output["SourceReservedNodeType"]);
    }
    if (output["SourceReservedNodeCount"] !== undefined) {
        contents.SourceReservedNodeCount = (0, smithy_client_1.strictParseInt32)(output["SourceReservedNodeCount"]);
    }
    if (output["TargetReservedNodeOfferingId"] !== undefined) {
        contents.TargetReservedNodeOfferingId = (0, smithy_client_1.expectString)(output["TargetReservedNodeOfferingId"]);
    }
    if (output["TargetReservedNodeType"] !== undefined) {
        contents.TargetReservedNodeType = (0, smithy_client_1.expectString)(output["TargetReservedNodeType"]);
    }
    if (output["TargetReservedNodeCount"] !== undefined) {
        contents.TargetReservedNodeCount = (0, smithy_client_1.strictParseInt32)(output["TargetReservedNodeCount"]);
    }
    return contents;
};
const deserializeAws_queryReservedNodeExchangeStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReservedNodeExchangeStatus(entry, context);
    });
};
const deserializeAws_queryReservedNodeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReservedNode(entry, context);
    });
};
const deserializeAws_queryReservedNodeNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryReservedNodeOffering = (output, context) => {
    const contents = {
        ReservedNodeOfferingId: undefined,
        NodeType: undefined,
        Duration: undefined,
        FixedPrice: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        OfferingType: undefined,
        RecurringCharges: undefined,
        ReservedNodeOfferingType: undefined,
    };
    if (output["ReservedNodeOfferingId"] !== undefined) {
        contents.ReservedNodeOfferingId = (0, smithy_client_1.expectString)(output["ReservedNodeOfferingId"]);
    }
    if (output["NodeType"] !== undefined) {
        contents.NodeType = (0, smithy_client_1.expectString)(output["NodeType"]);
    }
    if (output["Duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["Duration"]);
    }
    if (output["FixedPrice"] !== undefined) {
        contents.FixedPrice = (0, smithy_client_1.strictParseFloat)(output["FixedPrice"]);
    }
    if (output["UsagePrice"] !== undefined) {
        contents.UsagePrice = (0, smithy_client_1.strictParseFloat)(output["UsagePrice"]);
    }
    if (output["CurrencyCode"] !== undefined) {
        contents.CurrencyCode = (0, smithy_client_1.expectString)(output["CurrencyCode"]);
    }
    if (output["OfferingType"] !== undefined) {
        contents.OfferingType = (0, smithy_client_1.expectString)(output["OfferingType"]);
    }
    if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["RecurringCharges"] !== undefined && output["RecurringCharges"]["RecurringCharge"] !== undefined) {
        contents.RecurringCharges = deserializeAws_queryRecurringChargeList((0, smithy_client_1.getArrayIfSingleItem)(output["RecurringCharges"]["RecurringCharge"]), context);
    }
    if (output["ReservedNodeOfferingType"] !== undefined) {
        contents.ReservedNodeOfferingType = (0, smithy_client_1.expectString)(output["ReservedNodeOfferingType"]);
    }
    return contents;
};
const deserializeAws_queryReservedNodeOfferingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReservedNodeOffering(entry, context);
    });
};
const deserializeAws_queryReservedNodeOfferingNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryReservedNodeOfferingsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ReservedNodeOfferings: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ReservedNodeOfferings === "") {
        contents.ReservedNodeOfferings = [];
    }
    else if (output["ReservedNodeOfferings"] !== undefined &&
        output["ReservedNodeOfferings"]["ReservedNodeOffering"] !== undefined) {
        contents.ReservedNodeOfferings = deserializeAws_queryReservedNodeOfferingList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedNodeOfferings"]["ReservedNodeOffering"]), context);
    }
    return contents;
};
const deserializeAws_queryReservedNodeQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryReservedNodesMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ReservedNodes: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ReservedNodes === "") {
        contents.ReservedNodes = [];
    }
    else if (output["ReservedNodes"] !== undefined && output["ReservedNodes"]["ReservedNode"] !== undefined) {
        contents.ReservedNodes = deserializeAws_queryReservedNodeList((0, smithy_client_1.getArrayIfSingleItem)(output["ReservedNodes"]["ReservedNode"]), context);
    }
    return contents;
};
const deserializeAws_queryResizeClusterMessage = (output, context) => {
    const contents = {
        ClusterIdentifier: undefined,
        ClusterType: undefined,
        NodeType: undefined,
        NumberOfNodes: undefined,
        Classic: undefined,
        ReservedNodeId: undefined,
        TargetReservedNodeOfferingId: undefined,
    };
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["ClusterType"] !== undefined) {
        contents.ClusterType = (0, smithy_client_1.expectString)(output["ClusterType"]);
    }
    if (output["NodeType"] !== undefined) {
        contents.NodeType = (0, smithy_client_1.expectString)(output["NodeType"]);
    }
    if (output["NumberOfNodes"] !== undefined) {
        contents.NumberOfNodes = (0, smithy_client_1.strictParseInt32)(output["NumberOfNodes"]);
    }
    if (output["Classic"] !== undefined) {
        contents.Classic = (0, smithy_client_1.parseBoolean)(output["Classic"]);
    }
    if (output["ReservedNodeId"] !== undefined) {
        contents.ReservedNodeId = (0, smithy_client_1.expectString)(output["ReservedNodeId"]);
    }
    if (output["TargetReservedNodeOfferingId"] !== undefined) {
        contents.TargetReservedNodeOfferingId = (0, smithy_client_1.expectString)(output["TargetReservedNodeOfferingId"]);
    }
    return contents;
};
const deserializeAws_queryResizeClusterResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryResizeInfo = (output, context) => {
    const contents = {
        ResizeType: undefined,
        AllowCancelResize: undefined,
    };
    if (output["ResizeType"] !== undefined) {
        contents.ResizeType = (0, smithy_client_1.expectString)(output["ResizeType"]);
    }
    if (output["AllowCancelResize"] !== undefined) {
        contents.AllowCancelResize = (0, smithy_client_1.parseBoolean)(output["AllowCancelResize"]);
    }
    return contents;
};
const deserializeAws_queryResizeNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryResizeProgressMessage = (output, context) => {
    const contents = {
        TargetNodeType: undefined,
        TargetNumberOfNodes: undefined,
        TargetClusterType: undefined,
        Status: undefined,
        ImportTablesCompleted: undefined,
        ImportTablesInProgress: undefined,
        ImportTablesNotStarted: undefined,
        AvgResizeRateInMegaBytesPerSecond: undefined,
        TotalResizeDataInMegaBytes: undefined,
        ProgressInMegaBytes: undefined,
        ElapsedTimeInSeconds: undefined,
        EstimatedTimeToCompletionInSeconds: undefined,
        ResizeType: undefined,
        Message: undefined,
        TargetEncryptionType: undefined,
        DataTransferProgressPercent: undefined,
    };
    if (output["TargetNodeType"] !== undefined) {
        contents.TargetNodeType = (0, smithy_client_1.expectString)(output["TargetNodeType"]);
    }
    if (output["TargetNumberOfNodes"] !== undefined) {
        contents.TargetNumberOfNodes = (0, smithy_client_1.strictParseInt32)(output["TargetNumberOfNodes"]);
    }
    if (output["TargetClusterType"] !== undefined) {
        contents.TargetClusterType = (0, smithy_client_1.expectString)(output["TargetClusterType"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output.ImportTablesCompleted === "") {
        contents.ImportTablesCompleted = [];
    }
    else if (output["ImportTablesCompleted"] !== undefined && output["ImportTablesCompleted"]["member"] !== undefined) {
        contents.ImportTablesCompleted = deserializeAws_queryImportTablesCompleted((0, smithy_client_1.getArrayIfSingleItem)(output["ImportTablesCompleted"]["member"]), context);
    }
    if (output.ImportTablesInProgress === "") {
        contents.ImportTablesInProgress = [];
    }
    else if (output["ImportTablesInProgress"] !== undefined &&
        output["ImportTablesInProgress"]["member"] !== undefined) {
        contents.ImportTablesInProgress = deserializeAws_queryImportTablesInProgress((0, smithy_client_1.getArrayIfSingleItem)(output["ImportTablesInProgress"]["member"]), context);
    }
    if (output.ImportTablesNotStarted === "") {
        contents.ImportTablesNotStarted = [];
    }
    else if (output["ImportTablesNotStarted"] !== undefined &&
        output["ImportTablesNotStarted"]["member"] !== undefined) {
        contents.ImportTablesNotStarted = deserializeAws_queryImportTablesNotStarted((0, smithy_client_1.getArrayIfSingleItem)(output["ImportTablesNotStarted"]["member"]), context);
    }
    if (output["AvgResizeRateInMegaBytesPerSecond"] !== undefined) {
        contents.AvgResizeRateInMegaBytesPerSecond = (0, smithy_client_1.strictParseFloat)(output["AvgResizeRateInMegaBytesPerSecond"]);
    }
    if (output["TotalResizeDataInMegaBytes"] !== undefined) {
        contents.TotalResizeDataInMegaBytes = (0, smithy_client_1.strictParseLong)(output["TotalResizeDataInMegaBytes"]);
    }
    if (output["ProgressInMegaBytes"] !== undefined) {
        contents.ProgressInMegaBytes = (0, smithy_client_1.strictParseLong)(output["ProgressInMegaBytes"]);
    }
    if (output["ElapsedTimeInSeconds"] !== undefined) {
        contents.ElapsedTimeInSeconds = (0, smithy_client_1.strictParseLong)(output["ElapsedTimeInSeconds"]);
    }
    if (output["EstimatedTimeToCompletionInSeconds"] !== undefined) {
        contents.EstimatedTimeToCompletionInSeconds = (0, smithy_client_1.strictParseLong)(output["EstimatedTimeToCompletionInSeconds"]);
    }
    if (output["ResizeType"] !== undefined) {
        contents.ResizeType = (0, smithy_client_1.expectString)(output["ResizeType"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    if (output["TargetEncryptionType"] !== undefined) {
        contents.TargetEncryptionType = (0, smithy_client_1.expectString)(output["TargetEncryptionType"]);
    }
    if (output["DataTransferProgressPercent"] !== undefined) {
        contents.DataTransferProgressPercent = (0, smithy_client_1.strictParseFloat)(output["DataTransferProgressPercent"]);
    }
    return contents;
};
const deserializeAws_queryResourceNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryRestorableNodeTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryRestoreFromClusterSnapshotResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryRestoreStatus = (output, context) => {
    const contents = {
        Status: undefined,
        CurrentRestoreRateInMegaBytesPerSecond: undefined,
        SnapshotSizeInMegaBytes: undefined,
        ProgressInMegaBytes: undefined,
        ElapsedTimeInSeconds: undefined,
        EstimatedTimeToCompletionInSeconds: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["CurrentRestoreRateInMegaBytesPerSecond"] !== undefined) {
        contents.CurrentRestoreRateInMegaBytesPerSecond = (0, smithy_client_1.strictParseFloat)(output["CurrentRestoreRateInMegaBytesPerSecond"]);
    }
    if (output["SnapshotSizeInMegaBytes"] !== undefined) {
        contents.SnapshotSizeInMegaBytes = (0, smithy_client_1.strictParseLong)(output["SnapshotSizeInMegaBytes"]);
    }
    if (output["ProgressInMegaBytes"] !== undefined) {
        contents.ProgressInMegaBytes = (0, smithy_client_1.strictParseLong)(output["ProgressInMegaBytes"]);
    }
    if (output["ElapsedTimeInSeconds"] !== undefined) {
        contents.ElapsedTimeInSeconds = (0, smithy_client_1.strictParseLong)(output["ElapsedTimeInSeconds"]);
    }
    if (output["EstimatedTimeToCompletionInSeconds"] !== undefined) {
        contents.EstimatedTimeToCompletionInSeconds = (0, smithy_client_1.strictParseLong)(output["EstimatedTimeToCompletionInSeconds"]);
    }
    return contents;
};
const deserializeAws_queryRestoreTableFromClusterSnapshotResult = (output, context) => {
    const contents = {
        TableRestoreStatus: undefined,
    };
    if (output["TableRestoreStatus"] !== undefined) {
        contents.TableRestoreStatus = deserializeAws_queryTableRestoreStatus(output["TableRestoreStatus"], context);
    }
    return contents;
};
const deserializeAws_queryResumeClusterMessage = (output, context) => {
    const contents = {
        ClusterIdentifier: undefined,
    };
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    return contents;
};
const deserializeAws_queryResumeClusterResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryRevisionTarget = (output, context) => {
    const contents = {
        DatabaseRevision: undefined,
        Description: undefined,
        DatabaseRevisionReleaseDate: undefined,
    };
    if (output["DatabaseRevision"] !== undefined) {
        contents.DatabaseRevision = (0, smithy_client_1.expectString)(output["DatabaseRevision"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["DatabaseRevisionReleaseDate"] !== undefined) {
        contents.DatabaseRevisionReleaseDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DatabaseRevisionReleaseDate"]));
    }
    return contents;
};
const deserializeAws_queryRevisionTargetsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryRevisionTarget(entry, context);
    });
};
const deserializeAws_queryRevokeClusterSecurityGroupIngressResult = (output, context) => {
    const contents = {
        ClusterSecurityGroup: undefined,
    };
    if (output["ClusterSecurityGroup"] !== undefined) {
        contents.ClusterSecurityGroup = deserializeAws_queryClusterSecurityGroup(output["ClusterSecurityGroup"], context);
    }
    return contents;
};
const deserializeAws_queryRevokeSnapshotAccessResult = (output, context) => {
    const contents = {
        Snapshot: undefined,
    };
    if (output["Snapshot"] !== undefined) {
        contents.Snapshot = deserializeAws_querySnapshot(output["Snapshot"], context);
    }
    return contents;
};
const deserializeAws_queryRotateEncryptionKeyResult = (output, context) => {
    const contents = {
        Cluster: undefined,
    };
    if (output["Cluster"] !== undefined) {
        contents.Cluster = deserializeAws_queryCluster(output["Cluster"], context);
    }
    return contents;
};
const deserializeAws_queryScheduledAction = (output, context) => {
    const contents = {
        ScheduledActionName: undefined,
        TargetAction: undefined,
        Schedule: undefined,
        IamRole: undefined,
        ScheduledActionDescription: undefined,
        State: undefined,
        NextInvocations: undefined,
        StartTime: undefined,
        EndTime: undefined,
    };
    if (output["ScheduledActionName"] !== undefined) {
        contents.ScheduledActionName = (0, smithy_client_1.expectString)(output["ScheduledActionName"]);
    }
    if (output["TargetAction"] !== undefined) {
        contents.TargetAction = deserializeAws_queryScheduledActionType(output["TargetAction"], context);
    }
    if (output["Schedule"] !== undefined) {
        contents.Schedule = (0, smithy_client_1.expectString)(output["Schedule"]);
    }
    if (output["IamRole"] !== undefined) {
        contents.IamRole = (0, smithy_client_1.expectString)(output["IamRole"]);
    }
    if (output["ScheduledActionDescription"] !== undefined) {
        contents.ScheduledActionDescription = (0, smithy_client_1.expectString)(output["ScheduledActionDescription"]);
    }
    if (output["State"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
    }
    if (output.NextInvocations === "") {
        contents.NextInvocations = [];
    }
    else if (output["NextInvocations"] !== undefined &&
        output["NextInvocations"]["ScheduledActionTime"] !== undefined) {
        contents.NextInvocations = deserializeAws_queryScheduledActionTimeList((0, smithy_client_1.getArrayIfSingleItem)(output["NextInvocations"]["ScheduledActionTime"]), context);
    }
    if (output["StartTime"] !== undefined) {
        contents.StartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["StartTime"]));
    }
    if (output["EndTime"] !== undefined) {
        contents.EndTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["EndTime"]));
    }
    return contents;
};
const deserializeAws_queryScheduledActionAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryScheduledActionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryScheduledAction(entry, context);
    });
};
const deserializeAws_queryScheduledActionNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryScheduledActionQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryScheduledActionsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ScheduledActions: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.ScheduledActions === "") {
        contents.ScheduledActions = [];
    }
    else if (output["ScheduledActions"] !== undefined && output["ScheduledActions"]["ScheduledAction"] !== undefined) {
        contents.ScheduledActions = deserializeAws_queryScheduledActionList((0, smithy_client_1.getArrayIfSingleItem)(output["ScheduledActions"]["ScheduledAction"]), context);
    }
    return contents;
};
const deserializeAws_queryScheduledActionTimeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(entry));
    });
};
const deserializeAws_queryScheduledActionType = (output, context) => {
    const contents = {
        ResizeCluster: undefined,
        PauseCluster: undefined,
        ResumeCluster: undefined,
    };
    if (output["ResizeCluster"] !== undefined) {
        contents.ResizeCluster = deserializeAws_queryResizeClusterMessage(output["ResizeCluster"], context);
    }
    if (output["PauseCluster"] !== undefined) {
        contents.PauseCluster = deserializeAws_queryPauseClusterMessage(output["PauseCluster"], context);
    }
    if (output["ResumeCluster"] !== undefined) {
        contents.ResumeCluster = deserializeAws_queryResumeClusterMessage(output["ResumeCluster"], context);
    }
    return contents;
};
const deserializeAws_queryScheduledActionTypeUnsupportedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryScheduleDefinitionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryScheduleDefinitionTypeUnsupportedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryScheduledSnapshotTimeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(entry));
    });
};
const deserializeAws_querySnapshot = (output, context) => {
    const contents = {
        SnapshotIdentifier: undefined,
        ClusterIdentifier: undefined,
        SnapshotCreateTime: undefined,
        Status: undefined,
        Port: undefined,
        AvailabilityZone: undefined,
        ClusterCreateTime: undefined,
        MasterUsername: undefined,
        ClusterVersion: undefined,
        EngineFullVersion: undefined,
        SnapshotType: undefined,
        NodeType: undefined,
        NumberOfNodes: undefined,
        DBName: undefined,
        VpcId: undefined,
        Encrypted: undefined,
        KmsKeyId: undefined,
        EncryptedWithHSM: undefined,
        AccountsWithRestoreAccess: undefined,
        OwnerAccount: undefined,
        TotalBackupSizeInMegaBytes: undefined,
        ActualIncrementalBackupSizeInMegaBytes: undefined,
        BackupProgressInMegaBytes: undefined,
        CurrentBackupRateInMegaBytesPerSecond: undefined,
        EstimatedSecondsToCompletion: undefined,
        ElapsedTimeInSeconds: undefined,
        SourceRegion: undefined,
        Tags: undefined,
        RestorableNodeTypes: undefined,
        EnhancedVpcRouting: undefined,
        MaintenanceTrackName: undefined,
        ManualSnapshotRetentionPeriod: undefined,
        ManualSnapshotRemainingDays: undefined,
        SnapshotRetentionStartTime: undefined,
    };
    if (output["SnapshotIdentifier"] !== undefined) {
        contents.SnapshotIdentifier = (0, smithy_client_1.expectString)(output["SnapshotIdentifier"]);
    }
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["SnapshotCreateTime"] !== undefined) {
        contents.SnapshotCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["SnapshotCreateTime"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
    }
    if (output["ClusterCreateTime"] !== undefined) {
        contents.ClusterCreateTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ClusterCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = (0, smithy_client_1.expectString)(output["MasterUsername"]);
    }
    if (output["ClusterVersion"] !== undefined) {
        contents.ClusterVersion = (0, smithy_client_1.expectString)(output["ClusterVersion"]);
    }
    if (output["EngineFullVersion"] !== undefined) {
        contents.EngineFullVersion = (0, smithy_client_1.expectString)(output["EngineFullVersion"]);
    }
    if (output["SnapshotType"] !== undefined) {
        contents.SnapshotType = (0, smithy_client_1.expectString)(output["SnapshotType"]);
    }
    if (output["NodeType"] !== undefined) {
        contents.NodeType = (0, smithy_client_1.expectString)(output["NodeType"]);
    }
    if (output["NumberOfNodes"] !== undefined) {
        contents.NumberOfNodes = (0, smithy_client_1.strictParseInt32)(output["NumberOfNodes"]);
    }
    if (output["DBName"] !== undefined) {
        contents.DBName = (0, smithy_client_1.expectString)(output["DBName"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output["Encrypted"] !== undefined) {
        contents.Encrypted = (0, smithy_client_1.parseBoolean)(output["Encrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output["EncryptedWithHSM"] !== undefined) {
        contents.EncryptedWithHSM = (0, smithy_client_1.parseBoolean)(output["EncryptedWithHSM"]);
    }
    if (output.AccountsWithRestoreAccess === "") {
        contents.AccountsWithRestoreAccess = [];
    }
    else if (output["AccountsWithRestoreAccess"] !== undefined &&
        output["AccountsWithRestoreAccess"]["AccountWithRestoreAccess"] !== undefined) {
        contents.AccountsWithRestoreAccess = deserializeAws_queryAccountsWithRestoreAccessList((0, smithy_client_1.getArrayIfSingleItem)(output["AccountsWithRestoreAccess"]["AccountWithRestoreAccess"]), context);
    }
    if (output["OwnerAccount"] !== undefined) {
        contents.OwnerAccount = (0, smithy_client_1.expectString)(output["OwnerAccount"]);
    }
    if (output["TotalBackupSizeInMegaBytes"] !== undefined) {
        contents.TotalBackupSizeInMegaBytes = (0, smithy_client_1.strictParseFloat)(output["TotalBackupSizeInMegaBytes"]);
    }
    if (output["ActualIncrementalBackupSizeInMegaBytes"] !== undefined) {
        contents.ActualIncrementalBackupSizeInMegaBytes = (0, smithy_client_1.strictParseFloat)(output["ActualIncrementalBackupSizeInMegaBytes"]);
    }
    if (output["BackupProgressInMegaBytes"] !== undefined) {
        contents.BackupProgressInMegaBytes = (0, smithy_client_1.strictParseFloat)(output["BackupProgressInMegaBytes"]);
    }
    if (output["CurrentBackupRateInMegaBytesPerSecond"] !== undefined) {
        contents.CurrentBackupRateInMegaBytesPerSecond = (0, smithy_client_1.strictParseFloat)(output["CurrentBackupRateInMegaBytesPerSecond"]);
    }
    if (output["EstimatedSecondsToCompletion"] !== undefined) {
        contents.EstimatedSecondsToCompletion = (0, smithy_client_1.strictParseLong)(output["EstimatedSecondsToCompletion"]);
    }
    if (output["ElapsedTimeInSeconds"] !== undefined) {
        contents.ElapsedTimeInSeconds = (0, smithy_client_1.strictParseLong)(output["ElapsedTimeInSeconds"]);
    }
    if (output["SourceRegion"] !== undefined) {
        contents.SourceRegion = (0, smithy_client_1.expectString)(output["SourceRegion"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    if (output.RestorableNodeTypes === "") {
        contents.RestorableNodeTypes = [];
    }
    else if (output["RestorableNodeTypes"] !== undefined && output["RestorableNodeTypes"]["NodeType"] !== undefined) {
        contents.RestorableNodeTypes = deserializeAws_queryRestorableNodeTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["RestorableNodeTypes"]["NodeType"]), context);
    }
    if (output["EnhancedVpcRouting"] !== undefined) {
        contents.EnhancedVpcRouting = (0, smithy_client_1.parseBoolean)(output["EnhancedVpcRouting"]);
    }
    if (output["MaintenanceTrackName"] !== undefined) {
        contents.MaintenanceTrackName = (0, smithy_client_1.expectString)(output["MaintenanceTrackName"]);
    }
    if (output["ManualSnapshotRetentionPeriod"] !== undefined) {
        contents.ManualSnapshotRetentionPeriod = (0, smithy_client_1.strictParseInt32)(output["ManualSnapshotRetentionPeriod"]);
    }
    if (output["ManualSnapshotRemainingDays"] !== undefined) {
        contents.ManualSnapshotRemainingDays = (0, smithy_client_1.strictParseInt32)(output["ManualSnapshotRemainingDays"]);
    }
    if (output["SnapshotRetentionStartTime"] !== undefined) {
        contents.SnapshotRetentionStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["SnapshotRetentionStartTime"]));
    }
    return contents;
};
const deserializeAws_querySnapshotCopyAlreadyDisabledFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotCopyAlreadyEnabledFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotCopyDisabledFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotCopyGrant = (output, context) => {
    const contents = {
        SnapshotCopyGrantName: undefined,
        KmsKeyId: undefined,
        Tags: undefined,
    };
    if (output["SnapshotCopyGrantName"] !== undefined) {
        contents.SnapshotCopyGrantName = (0, smithy_client_1.expectString)(output["SnapshotCopyGrantName"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = (0, smithy_client_1.expectString)(output["KmsKeyId"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_querySnapshotCopyGrantAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotCopyGrantList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySnapshotCopyGrant(entry, context);
    });
};
const deserializeAws_querySnapshotCopyGrantMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        SnapshotCopyGrants: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.SnapshotCopyGrants === "") {
        contents.SnapshotCopyGrants = [];
    }
    else if (output["SnapshotCopyGrants"] !== undefined &&
        output["SnapshotCopyGrants"]["SnapshotCopyGrant"] !== undefined) {
        contents.SnapshotCopyGrants = deserializeAws_querySnapshotCopyGrantList((0, smithy_client_1.getArrayIfSingleItem)(output["SnapshotCopyGrants"]["SnapshotCopyGrant"]), context);
    }
    return contents;
};
const deserializeAws_querySnapshotCopyGrantNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotCopyGrantQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotErrorMessage = (output, context) => {
    const contents = {
        SnapshotIdentifier: undefined,
        SnapshotClusterIdentifier: undefined,
        FailureCode: undefined,
        FailureReason: undefined,
    };
    if (output["SnapshotIdentifier"] !== undefined) {
        contents.SnapshotIdentifier = (0, smithy_client_1.expectString)(output["SnapshotIdentifier"]);
    }
    if (output["SnapshotClusterIdentifier"] !== undefined) {
        contents.SnapshotClusterIdentifier = (0, smithy_client_1.expectString)(output["SnapshotClusterIdentifier"]);
    }
    if (output["FailureCode"] !== undefined) {
        contents.FailureCode = (0, smithy_client_1.expectString)(output["FailureCode"]);
    }
    if (output["FailureReason"] !== undefined) {
        contents.FailureReason = (0, smithy_client_1.expectString)(output["FailureReason"]);
    }
    return contents;
};
const deserializeAws_querySnapshotIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_querySnapshotList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySnapshot(entry, context);
    });
};
const deserializeAws_querySnapshotMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        Snapshots: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    if (output.Snapshots === "") {
        contents.Snapshots = [];
    }
    else if (output["Snapshots"] !== undefined && output["Snapshots"]["Snapshot"] !== undefined) {
        contents.Snapshots = deserializeAws_querySnapshotList((0, smithy_client_1.getArrayIfSingleItem)(output["Snapshots"]["Snapshot"]), context);
    }
    return contents;
};
const deserializeAws_querySnapshotSchedule = (output, context) => {
    const contents = {
        ScheduleDefinitions: undefined,
        ScheduleIdentifier: undefined,
        ScheduleDescription: undefined,
        Tags: undefined,
        NextInvocations: undefined,
        AssociatedClusterCount: undefined,
        AssociatedClusters: undefined,
    };
    if (output.ScheduleDefinitions === "") {
        contents.ScheduleDefinitions = [];
    }
    else if (output["ScheduleDefinitions"] !== undefined &&
        output["ScheduleDefinitions"]["ScheduleDefinition"] !== undefined) {
        contents.ScheduleDefinitions = deserializeAws_queryScheduleDefinitionList((0, smithy_client_1.getArrayIfSingleItem)(output["ScheduleDefinitions"]["ScheduleDefinition"]), context);
    }
    if (output["ScheduleIdentifier"] !== undefined) {
        contents.ScheduleIdentifier = (0, smithy_client_1.expectString)(output["ScheduleIdentifier"]);
    }
    if (output["ScheduleDescription"] !== undefined) {
        contents.ScheduleDescription = (0, smithy_client_1.expectString)(output["ScheduleDescription"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    if (output.NextInvocations === "") {
        contents.NextInvocations = [];
    }
    else if (output["NextInvocations"] !== undefined && output["NextInvocations"]["SnapshotTime"] !== undefined) {
        contents.NextInvocations = deserializeAws_queryScheduledSnapshotTimeList((0, smithy_client_1.getArrayIfSingleItem)(output["NextInvocations"]["SnapshotTime"]), context);
    }
    if (output["AssociatedClusterCount"] !== undefined) {
        contents.AssociatedClusterCount = (0, smithy_client_1.strictParseInt32)(output["AssociatedClusterCount"]);
    }
    if (output.AssociatedClusters === "") {
        contents.AssociatedClusters = [];
    }
    else if (output["AssociatedClusters"] !== undefined &&
        output["AssociatedClusters"]["ClusterAssociatedToSchedule"] !== undefined) {
        contents.AssociatedClusters = deserializeAws_queryAssociatedClusterList((0, smithy_client_1.getArrayIfSingleItem)(output["AssociatedClusters"]["ClusterAssociatedToSchedule"]), context);
    }
    return contents;
};
const deserializeAws_querySnapshotScheduleAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotScheduleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySnapshotSchedule(entry, context);
    });
};
const deserializeAws_querySnapshotScheduleNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotScheduleQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotScheduleUpdateInProgressFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySNSInvalidTopicFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySNSNoAuthorizationFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySNSTopicArnNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySourceIdsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_querySourceNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySubnet = (output, context) => {
    const contents = {
        SubnetIdentifier: undefined,
        SubnetAvailabilityZone: undefined,
        SubnetStatus: undefined,
    };
    if (output["SubnetIdentifier"] !== undefined) {
        contents.SubnetIdentifier = (0, smithy_client_1.expectString)(output["SubnetIdentifier"]);
    }
    if (output["SubnetAvailabilityZone"] !== undefined) {
        contents.SubnetAvailabilityZone = deserializeAws_queryAvailabilityZone(output["SubnetAvailabilityZone"], context);
    }
    if (output["SubnetStatus"] !== undefined) {
        contents.SubnetStatus = (0, smithy_client_1.expectString)(output["SubnetStatus"]);
    }
    return contents;
};
const deserializeAws_querySubnetAlreadyInUse = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySubnetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySubnet(entry, context);
    });
};
const deserializeAws_querySubscriptionAlreadyExistFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySubscriptionCategoryNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySubscriptionEventIdNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySubscriptionNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySubscriptionSeverityNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySupportedOperation = (output, context) => {
    const contents = {
        OperationName: undefined,
    };
    if (output["OperationName"] !== undefined) {
        contents.OperationName = (0, smithy_client_1.expectString)(output["OperationName"]);
    }
    return contents;
};
const deserializeAws_querySupportedOperationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySupportedOperation(entry, context);
    });
};
const deserializeAws_querySupportedPlatform = (output, context) => {
    const contents = {
        Name: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    return contents;
};
const deserializeAws_querySupportedPlatformsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySupportedPlatform(entry, context);
    });
};
const deserializeAws_queryTableLimitExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTableRestoreNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTableRestoreStatus = (output, context) => {
    const contents = {
        TableRestoreRequestId: undefined,
        Status: undefined,
        Message: undefined,
        RequestTime: undefined,
        ProgressInMegaBytes: undefined,
        TotalDataInMegaBytes: undefined,
        ClusterIdentifier: undefined,
        SnapshotIdentifier: undefined,
        SourceDatabaseName: undefined,
        SourceSchemaName: undefined,
        SourceTableName: undefined,
        TargetDatabaseName: undefined,
        TargetSchemaName: undefined,
        NewTableName: undefined,
    };
    if (output["TableRestoreRequestId"] !== undefined) {
        contents.TableRestoreRequestId = (0, smithy_client_1.expectString)(output["TableRestoreRequestId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    if (output["RequestTime"] !== undefined) {
        contents.RequestTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["RequestTime"]));
    }
    if (output["ProgressInMegaBytes"] !== undefined) {
        contents.ProgressInMegaBytes = (0, smithy_client_1.strictParseLong)(output["ProgressInMegaBytes"]);
    }
    if (output["TotalDataInMegaBytes"] !== undefined) {
        contents.TotalDataInMegaBytes = (0, smithy_client_1.strictParseLong)(output["TotalDataInMegaBytes"]);
    }
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["SnapshotIdentifier"] !== undefined) {
        contents.SnapshotIdentifier = (0, smithy_client_1.expectString)(output["SnapshotIdentifier"]);
    }
    if (output["SourceDatabaseName"] !== undefined) {
        contents.SourceDatabaseName = (0, smithy_client_1.expectString)(output["SourceDatabaseName"]);
    }
    if (output["SourceSchemaName"] !== undefined) {
        contents.SourceSchemaName = (0, smithy_client_1.expectString)(output["SourceSchemaName"]);
    }
    if (output["SourceTableName"] !== undefined) {
        contents.SourceTableName = (0, smithy_client_1.expectString)(output["SourceTableName"]);
    }
    if (output["TargetDatabaseName"] !== undefined) {
        contents.TargetDatabaseName = (0, smithy_client_1.expectString)(output["TargetDatabaseName"]);
    }
    if (output["TargetSchemaName"] !== undefined) {
        contents.TargetSchemaName = (0, smithy_client_1.expectString)(output["TargetSchemaName"]);
    }
    if (output["NewTableName"] !== undefined) {
        contents.NewTableName = (0, smithy_client_1.expectString)(output["NewTableName"]);
    }
    return contents;
};
const deserializeAws_queryTableRestoreStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTableRestoreStatus(entry, context);
    });
};
const deserializeAws_queryTableRestoreStatusMessage = (output, context) => {
    const contents = {
        TableRestoreStatusDetails: undefined,
        Marker: undefined,
    };
    if (output.TableRestoreStatusDetails === "") {
        contents.TableRestoreStatusDetails = [];
    }
    else if (output["TableRestoreStatusDetails"] !== undefined &&
        output["TableRestoreStatusDetails"]["TableRestoreStatus"] !== undefined) {
        contents.TableRestoreStatusDetails = deserializeAws_queryTableRestoreStatusList((0, smithy_client_1.getArrayIfSingleItem)(output["TableRestoreStatusDetails"]["TableRestoreStatus"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryTag = (output, context) => {
    const contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryTaggedResource = (output, context) => {
    const contents = {
        Tag: undefined,
        ResourceName: undefined,
        ResourceType: undefined,
    };
    if (output["Tag"] !== undefined) {
        contents.Tag = deserializeAws_queryTag(output["Tag"], context);
    }
    if (output["ResourceName"] !== undefined) {
        contents.ResourceName = (0, smithy_client_1.expectString)(output["ResourceName"]);
    }
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
    }
    return contents;
};
const deserializeAws_queryTaggedResourceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTaggedResource(entry, context);
    });
};
const deserializeAws_queryTaggedResourceListMessage = (output, context) => {
    const contents = {
        TaggedResources: undefined,
        Marker: undefined,
    };
    if (output.TaggedResources === "") {
        contents.TaggedResources = [];
    }
    else if (output["TaggedResources"] !== undefined && output["TaggedResources"]["TaggedResource"] !== undefined) {
        contents.TaggedResources = deserializeAws_queryTaggedResourceList((0, smithy_client_1.getArrayIfSingleItem)(output["TaggedResources"]["TaggedResource"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryTagLimitExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTag(entry, context);
    });
};
const deserializeAws_queryTrackList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryMaintenanceTrack(entry, context);
    });
};
const deserializeAws_queryTrackListMessage = (output, context) => {
    const contents = {
        MaintenanceTracks: undefined,
        Marker: undefined,
    };
    if (output.MaintenanceTracks === "") {
        contents.MaintenanceTracks = [];
    }
    else if (output["MaintenanceTracks"] !== undefined &&
        output["MaintenanceTracks"]["MaintenanceTrack"] !== undefined) {
        contents.MaintenanceTracks = deserializeAws_queryTrackList((0, smithy_client_1.getArrayIfSingleItem)(output["MaintenanceTracks"]["MaintenanceTrack"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryUnauthorizedOperation = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryUnauthorizedPartnerIntegrationFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryUnknownSnapshotCopyRegionFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryUnsupportedOperationFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryUnsupportedOptionFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryUpdateTarget = (output, context) => {
    const contents = {
        MaintenanceTrackName: undefined,
        DatabaseVersion: undefined,
        SupportedOperations: undefined,
    };
    if (output["MaintenanceTrackName"] !== undefined) {
        contents.MaintenanceTrackName = (0, smithy_client_1.expectString)(output["MaintenanceTrackName"]);
    }
    if (output["DatabaseVersion"] !== undefined) {
        contents.DatabaseVersion = (0, smithy_client_1.expectString)(output["DatabaseVersion"]);
    }
    if (output.SupportedOperations === "") {
        contents.SupportedOperations = [];
    }
    else if (output["SupportedOperations"] !== undefined &&
        output["SupportedOperations"]["SupportedOperation"] !== undefined) {
        contents.SupportedOperations = deserializeAws_querySupportedOperationList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedOperations"]["SupportedOperation"]), context);
    }
    return contents;
};
const deserializeAws_queryUsageLimit = (output, context) => {
    const contents = {
        UsageLimitId: undefined,
        ClusterIdentifier: undefined,
        FeatureType: undefined,
        LimitType: undefined,
        Amount: undefined,
        Period: undefined,
        BreachAction: undefined,
        Tags: undefined,
    };
    if (output["UsageLimitId"] !== undefined) {
        contents.UsageLimitId = (0, smithy_client_1.expectString)(output["UsageLimitId"]);
    }
    if (output["ClusterIdentifier"] !== undefined) {
        contents.ClusterIdentifier = (0, smithy_client_1.expectString)(output["ClusterIdentifier"]);
    }
    if (output["FeatureType"] !== undefined) {
        contents.FeatureType = (0, smithy_client_1.expectString)(output["FeatureType"]);
    }
    if (output["LimitType"] !== undefined) {
        contents.LimitType = (0, smithy_client_1.expectString)(output["LimitType"]);
    }
    if (output["Amount"] !== undefined) {
        contents.Amount = (0, smithy_client_1.strictParseLong)(output["Amount"]);
    }
    if (output["Period"] !== undefined) {
        contents.Period = (0, smithy_client_1.expectString)(output["Period"]);
    }
    if (output["BreachAction"] !== undefined) {
        contents.BreachAction = (0, smithy_client_1.expectString)(output["BreachAction"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryUsageLimitAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryUsageLimitList = (output, context) => {
    const contents = {
        UsageLimits: undefined,
        Marker: undefined,
    };
    if (output.UsageLimits === "") {
        contents.UsageLimits = [];
    }
    else if (output["UsageLimits"] !== undefined && output["UsageLimits"]["member"] !== undefined) {
        contents.UsageLimits = deserializeAws_queryUsageLimits((0, smithy_client_1.getArrayIfSingleItem)(output["UsageLimits"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryUsageLimitNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryUsageLimits = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryUsageLimit(entry, context);
    });
};
const deserializeAws_queryVpcEndpoint = (output, context) => {
    const contents = {
        VpcEndpointId: undefined,
        VpcId: undefined,
        NetworkInterfaces: undefined,
    };
    if (output["VpcEndpointId"] !== undefined) {
        contents.VpcEndpointId = (0, smithy_client_1.expectString)(output["VpcEndpointId"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = (0, smithy_client_1.expectString)(output["VpcId"]);
    }
    if (output.NetworkInterfaces === "") {
        contents.NetworkInterfaces = [];
    }
    else if (output["NetworkInterfaces"] !== undefined &&
        output["NetworkInterfaces"]["NetworkInterface"] !== undefined) {
        contents.NetworkInterfaces = deserializeAws_queryNetworkInterfaceList((0, smithy_client_1.getArrayIfSingleItem)(output["NetworkInterfaces"]["NetworkInterface"]), context);
    }
    return contents;
};
const deserializeAws_queryVpcEndpointsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryVpcEndpoint(entry, context);
    });
};
const deserializeAws_queryVpcIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryVpcSecurityGroupMembership = (output, context) => {
    const contents = {
        VpcSecurityGroupId: undefined,
        Status: undefined,
    };
    if (output["VpcSecurityGroupId"] !== undefined) {
        contents.VpcSecurityGroupId = (0, smithy_client_1.expectString)(output["VpcSecurityGroupId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryVpcSecurityGroupMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryVpcSecurityGroupMembership(entry, context);
    });
};
const deserializeMetadata = (output) => {
    var _a, _b;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parsedObj = (0, fast_xml_parser_1.parse)(encoded, {
            attributeNamePrefix: "",
            ignoreAttributes: false,
            parseNodeValue: false,
            trimValues: false,
            tagValueProcessor: (val) => (val.trim() === "" && val.includes("\n") ? "" : (0, entities_1.decodeHTML)(val)),
        });
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    var _a;
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = (_a = value.Error.message) !== null && _a !== void 0 ? _a : value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
