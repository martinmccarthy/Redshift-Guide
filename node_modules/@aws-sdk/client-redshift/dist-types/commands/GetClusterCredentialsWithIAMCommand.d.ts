import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { ClusterExtendedCredentials } from "../models/models_0";
import { GetClusterCredentialsWithIAMMessage } from "../models/models_1";
import { RedshiftClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../RedshiftClient";
export interface GetClusterCredentialsWithIAMCommandInput extends GetClusterCredentialsWithIAMMessage {
}
export interface GetClusterCredentialsWithIAMCommandOutput extends ClusterExtendedCredentials, __MetadataBearer {
}
/**
 * <p>Returns a database user name and temporary password with temporary authorization to
 *             log in to an Amazon Redshift database.
 *             The database user is mapped 1:1 to the source Identity and Access Management (IAM) identity.
 *             For more information about IAM identities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html">IAM Identities (users, user groups, and roles)</a> in the
 *             Amazon Web Services Identity and Access Management User Guide.</p>
 *         <p>The Identity and Access Management (IAM) identity that runs
 *             this operation must have an IAM policy attached that allows access to all
 *             necessary actions and resources.
 *                 For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html">Using identity-based policies (IAM policies)</a> in the
 *             Amazon Redshift Cluster Management Guide. </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { RedshiftClient, GetClusterCredentialsWithIAMCommand } from "@aws-sdk/client-redshift"; // ES Modules import
 * // const { RedshiftClient, GetClusterCredentialsWithIAMCommand } = require("@aws-sdk/client-redshift"); // CommonJS import
 * const client = new RedshiftClient(config);
 * const command = new GetClusterCredentialsWithIAMCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link GetClusterCredentialsWithIAMCommandInput} for command's `input` shape.
 * @see {@link GetClusterCredentialsWithIAMCommandOutput} for command's `response` shape.
 * @see {@link RedshiftClientResolvedConfig | config} for RedshiftClient's `config` shape.
 *
 */
export declare class GetClusterCredentialsWithIAMCommand extends $Command<GetClusterCredentialsWithIAMCommandInput, GetClusterCredentialsWithIAMCommandOutput, RedshiftClientResolvedConfig> {
    readonly input: GetClusterCredentialsWithIAMCommandInput;
    constructor(input: GetClusterCredentialsWithIAMCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RedshiftClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetClusterCredentialsWithIAMCommandInput, GetClusterCredentialsWithIAMCommandOutput>;
    private serialize;
    private deserialize;
}
