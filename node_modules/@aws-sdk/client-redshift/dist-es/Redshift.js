import { __extends } from "tslib";
import { AcceptReservedNodeExchangeCommand, } from "./commands/AcceptReservedNodeExchangeCommand";
import { AddPartnerCommand } from "./commands/AddPartnerCommand";
import { AssociateDataShareConsumerCommand, } from "./commands/AssociateDataShareConsumerCommand";
import { AuthorizeClusterSecurityGroupIngressCommand, } from "./commands/AuthorizeClusterSecurityGroupIngressCommand";
import { AuthorizeDataShareCommand, } from "./commands/AuthorizeDataShareCommand";
import { AuthorizeEndpointAccessCommand, } from "./commands/AuthorizeEndpointAccessCommand";
import { AuthorizeSnapshotAccessCommand, } from "./commands/AuthorizeSnapshotAccessCommand";
import { BatchDeleteClusterSnapshotsCommand, } from "./commands/BatchDeleteClusterSnapshotsCommand";
import { BatchModifyClusterSnapshotsCommand, } from "./commands/BatchModifyClusterSnapshotsCommand";
import { CancelResizeCommand, } from "./commands/CancelResizeCommand";
import { CopyClusterSnapshotCommand, } from "./commands/CopyClusterSnapshotCommand";
import { CreateAuthenticationProfileCommand, } from "./commands/CreateAuthenticationProfileCommand";
import { CreateClusterCommand, } from "./commands/CreateClusterCommand";
import { CreateClusterParameterGroupCommand, } from "./commands/CreateClusterParameterGroupCommand";
import { CreateClusterSecurityGroupCommand, } from "./commands/CreateClusterSecurityGroupCommand";
import { CreateClusterSnapshotCommand, } from "./commands/CreateClusterSnapshotCommand";
import { CreateClusterSubnetGroupCommand, } from "./commands/CreateClusterSubnetGroupCommand";
import { CreateEndpointAccessCommand, } from "./commands/CreateEndpointAccessCommand";
import { CreateEventSubscriptionCommand, } from "./commands/CreateEventSubscriptionCommand";
import { CreateHsmClientCertificateCommand, } from "./commands/CreateHsmClientCertificateCommand";
import { CreateHsmConfigurationCommand, } from "./commands/CreateHsmConfigurationCommand";
import { CreateScheduledActionCommand, } from "./commands/CreateScheduledActionCommand";
import { CreateSnapshotCopyGrantCommand, } from "./commands/CreateSnapshotCopyGrantCommand";
import { CreateSnapshotScheduleCommand, } from "./commands/CreateSnapshotScheduleCommand";
import { CreateTagsCommand } from "./commands/CreateTagsCommand";
import { CreateUsageLimitCommand, } from "./commands/CreateUsageLimitCommand";
import { DeauthorizeDataShareCommand, } from "./commands/DeauthorizeDataShareCommand";
import { DeleteAuthenticationProfileCommand, } from "./commands/DeleteAuthenticationProfileCommand";
import { DeleteClusterCommand, } from "./commands/DeleteClusterCommand";
import { DeleteClusterParameterGroupCommand, } from "./commands/DeleteClusterParameterGroupCommand";
import { DeleteClusterSecurityGroupCommand, } from "./commands/DeleteClusterSecurityGroupCommand";
import { DeleteClusterSnapshotCommand, } from "./commands/DeleteClusterSnapshotCommand";
import { DeleteClusterSubnetGroupCommand, } from "./commands/DeleteClusterSubnetGroupCommand";
import { DeleteEndpointAccessCommand, } from "./commands/DeleteEndpointAccessCommand";
import { DeleteEventSubscriptionCommand, } from "./commands/DeleteEventSubscriptionCommand";
import { DeleteHsmClientCertificateCommand, } from "./commands/DeleteHsmClientCertificateCommand";
import { DeleteHsmConfigurationCommand, } from "./commands/DeleteHsmConfigurationCommand";
import { DeletePartnerCommand, } from "./commands/DeletePartnerCommand";
import { DeleteScheduledActionCommand, } from "./commands/DeleteScheduledActionCommand";
import { DeleteSnapshotCopyGrantCommand, } from "./commands/DeleteSnapshotCopyGrantCommand";
import { DeleteSnapshotScheduleCommand, } from "./commands/DeleteSnapshotScheduleCommand";
import { DeleteTagsCommand } from "./commands/DeleteTagsCommand";
import { DeleteUsageLimitCommand, } from "./commands/DeleteUsageLimitCommand";
import { DescribeAccountAttributesCommand, } from "./commands/DescribeAccountAttributesCommand";
import { DescribeAuthenticationProfilesCommand, } from "./commands/DescribeAuthenticationProfilesCommand";
import { DescribeClusterDbRevisionsCommand, } from "./commands/DescribeClusterDbRevisionsCommand";
import { DescribeClusterParameterGroupsCommand, } from "./commands/DescribeClusterParameterGroupsCommand";
import { DescribeClusterParametersCommand, } from "./commands/DescribeClusterParametersCommand";
import { DescribeClustersCommand, } from "./commands/DescribeClustersCommand";
import { DescribeClusterSecurityGroupsCommand, } from "./commands/DescribeClusterSecurityGroupsCommand";
import { DescribeClusterSnapshotsCommand, } from "./commands/DescribeClusterSnapshotsCommand";
import { DescribeClusterSubnetGroupsCommand, } from "./commands/DescribeClusterSubnetGroupsCommand";
import { DescribeClusterTracksCommand, } from "./commands/DescribeClusterTracksCommand";
import { DescribeClusterVersionsCommand, } from "./commands/DescribeClusterVersionsCommand";
import { DescribeDataSharesCommand, } from "./commands/DescribeDataSharesCommand";
import { DescribeDataSharesForConsumerCommand, } from "./commands/DescribeDataSharesForConsumerCommand";
import { DescribeDataSharesForProducerCommand, } from "./commands/DescribeDataSharesForProducerCommand";
import { DescribeDefaultClusterParametersCommand, } from "./commands/DescribeDefaultClusterParametersCommand";
import { DescribeEndpointAccessCommand, } from "./commands/DescribeEndpointAccessCommand";
import { DescribeEndpointAuthorizationCommand, } from "./commands/DescribeEndpointAuthorizationCommand";
import { DescribeEventCategoriesCommand, } from "./commands/DescribeEventCategoriesCommand";
import { DescribeEventsCommand, } from "./commands/DescribeEventsCommand";
import { DescribeEventSubscriptionsCommand, } from "./commands/DescribeEventSubscriptionsCommand";
import { DescribeHsmClientCertificatesCommand, } from "./commands/DescribeHsmClientCertificatesCommand";
import { DescribeHsmConfigurationsCommand, } from "./commands/DescribeHsmConfigurationsCommand";
import { DescribeLoggingStatusCommand, } from "./commands/DescribeLoggingStatusCommand";
import { DescribeNodeConfigurationOptionsCommand, } from "./commands/DescribeNodeConfigurationOptionsCommand";
import { DescribeOrderableClusterOptionsCommand, } from "./commands/DescribeOrderableClusterOptionsCommand";
import { DescribePartnersCommand, } from "./commands/DescribePartnersCommand";
import { DescribeReservedNodeExchangeStatusCommand, } from "./commands/DescribeReservedNodeExchangeStatusCommand";
import { DescribeReservedNodeOfferingsCommand, } from "./commands/DescribeReservedNodeOfferingsCommand";
import { DescribeReservedNodesCommand, } from "./commands/DescribeReservedNodesCommand";
import { DescribeResizeCommand, } from "./commands/DescribeResizeCommand";
import { DescribeScheduledActionsCommand, } from "./commands/DescribeScheduledActionsCommand";
import { DescribeSnapshotCopyGrantsCommand, } from "./commands/DescribeSnapshotCopyGrantsCommand";
import { DescribeSnapshotSchedulesCommand, } from "./commands/DescribeSnapshotSchedulesCommand";
import { DescribeStorageCommand, } from "./commands/DescribeStorageCommand";
import { DescribeTableRestoreStatusCommand, } from "./commands/DescribeTableRestoreStatusCommand";
import { DescribeTagsCommand, } from "./commands/DescribeTagsCommand";
import { DescribeUsageLimitsCommand, } from "./commands/DescribeUsageLimitsCommand";
import { DisableLoggingCommand, } from "./commands/DisableLoggingCommand";
import { DisableSnapshotCopyCommand, } from "./commands/DisableSnapshotCopyCommand";
import { DisassociateDataShareConsumerCommand, } from "./commands/DisassociateDataShareConsumerCommand";
import { EnableLoggingCommand, } from "./commands/EnableLoggingCommand";
import { EnableSnapshotCopyCommand, } from "./commands/EnableSnapshotCopyCommand";
import { GetClusterCredentialsCommand, } from "./commands/GetClusterCredentialsCommand";
import { GetClusterCredentialsWithIAMCommand, } from "./commands/GetClusterCredentialsWithIAMCommand";
import { GetReservedNodeExchangeConfigurationOptionsCommand, } from "./commands/GetReservedNodeExchangeConfigurationOptionsCommand";
import { GetReservedNodeExchangeOfferingsCommand, } from "./commands/GetReservedNodeExchangeOfferingsCommand";
import { ModifyAquaConfigurationCommand, } from "./commands/ModifyAquaConfigurationCommand";
import { ModifyAuthenticationProfileCommand, } from "./commands/ModifyAuthenticationProfileCommand";
import { ModifyClusterCommand, } from "./commands/ModifyClusterCommand";
import { ModifyClusterDbRevisionCommand, } from "./commands/ModifyClusterDbRevisionCommand";
import { ModifyClusterIamRolesCommand, } from "./commands/ModifyClusterIamRolesCommand";
import { ModifyClusterMaintenanceCommand, } from "./commands/ModifyClusterMaintenanceCommand";
import { ModifyClusterParameterGroupCommand, } from "./commands/ModifyClusterParameterGroupCommand";
import { ModifyClusterSnapshotCommand, } from "./commands/ModifyClusterSnapshotCommand";
import { ModifyClusterSnapshotScheduleCommand, } from "./commands/ModifyClusterSnapshotScheduleCommand";
import { ModifyClusterSubnetGroupCommand, } from "./commands/ModifyClusterSubnetGroupCommand";
import { ModifyEndpointAccessCommand, } from "./commands/ModifyEndpointAccessCommand";
import { ModifyEventSubscriptionCommand, } from "./commands/ModifyEventSubscriptionCommand";
import { ModifyScheduledActionCommand, } from "./commands/ModifyScheduledActionCommand";
import { ModifySnapshotCopyRetentionPeriodCommand, } from "./commands/ModifySnapshotCopyRetentionPeriodCommand";
import { ModifySnapshotScheduleCommand, } from "./commands/ModifySnapshotScheduleCommand";
import { ModifyUsageLimitCommand, } from "./commands/ModifyUsageLimitCommand";
import { PauseClusterCommand, } from "./commands/PauseClusterCommand";
import { PurchaseReservedNodeOfferingCommand, } from "./commands/PurchaseReservedNodeOfferingCommand";
import { RebootClusterCommand, } from "./commands/RebootClusterCommand";
import { RejectDataShareCommand, } from "./commands/RejectDataShareCommand";
import { ResetClusterParameterGroupCommand, } from "./commands/ResetClusterParameterGroupCommand";
import { ResizeClusterCommand, } from "./commands/ResizeClusterCommand";
import { RestoreFromClusterSnapshotCommand, } from "./commands/RestoreFromClusterSnapshotCommand";
import { RestoreTableFromClusterSnapshotCommand, } from "./commands/RestoreTableFromClusterSnapshotCommand";
import { ResumeClusterCommand, } from "./commands/ResumeClusterCommand";
import { RevokeClusterSecurityGroupIngressCommand, } from "./commands/RevokeClusterSecurityGroupIngressCommand";
import { RevokeEndpointAccessCommand, } from "./commands/RevokeEndpointAccessCommand";
import { RevokeSnapshotAccessCommand, } from "./commands/RevokeSnapshotAccessCommand";
import { RotateEncryptionKeyCommand, } from "./commands/RotateEncryptionKeyCommand";
import { UpdatePartnerStatusCommand, } from "./commands/UpdatePartnerStatusCommand";
import { RedshiftClient } from "./RedshiftClient";
var Redshift = (function (_super) {
    __extends(Redshift, _super);
    function Redshift() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Redshift.prototype.acceptReservedNodeExchange = function (args, optionsOrCb, cb) {
        var command = new AcceptReservedNodeExchangeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.addPartner = function (args, optionsOrCb, cb) {
        var command = new AddPartnerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.associateDataShareConsumer = function (args, optionsOrCb, cb) {
        var command = new AssociateDataShareConsumerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.authorizeClusterSecurityGroupIngress = function (args, optionsOrCb, cb) {
        var command = new AuthorizeClusterSecurityGroupIngressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.authorizeDataShare = function (args, optionsOrCb, cb) {
        var command = new AuthorizeDataShareCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.authorizeEndpointAccess = function (args, optionsOrCb, cb) {
        var command = new AuthorizeEndpointAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.authorizeSnapshotAccess = function (args, optionsOrCb, cb) {
        var command = new AuthorizeSnapshotAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.batchDeleteClusterSnapshots = function (args, optionsOrCb, cb) {
        var command = new BatchDeleteClusterSnapshotsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.batchModifyClusterSnapshots = function (args, optionsOrCb, cb) {
        var command = new BatchModifyClusterSnapshotsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.cancelResize = function (args, optionsOrCb, cb) {
        var command = new CancelResizeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.copyClusterSnapshot = function (args, optionsOrCb, cb) {
        var command = new CopyClusterSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createAuthenticationProfile = function (args, optionsOrCb, cb) {
        var command = new CreateAuthenticationProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createCluster = function (args, optionsOrCb, cb) {
        var command = new CreateClusterCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createClusterParameterGroup = function (args, optionsOrCb, cb) {
        var command = new CreateClusterParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createClusterSecurityGroup = function (args, optionsOrCb, cb) {
        var command = new CreateClusterSecurityGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createClusterSnapshot = function (args, optionsOrCb, cb) {
        var command = new CreateClusterSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createClusterSubnetGroup = function (args, optionsOrCb, cb) {
        var command = new CreateClusterSubnetGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createEndpointAccess = function (args, optionsOrCb, cb) {
        var command = new CreateEndpointAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createEventSubscription = function (args, optionsOrCb, cb) {
        var command = new CreateEventSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createHsmClientCertificate = function (args, optionsOrCb, cb) {
        var command = new CreateHsmClientCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createHsmConfiguration = function (args, optionsOrCb, cb) {
        var command = new CreateHsmConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createScheduledAction = function (args, optionsOrCb, cb) {
        var command = new CreateScheduledActionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createSnapshotCopyGrant = function (args, optionsOrCb, cb) {
        var command = new CreateSnapshotCopyGrantCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createSnapshotSchedule = function (args, optionsOrCb, cb) {
        var command = new CreateSnapshotScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createTags = function (args, optionsOrCb, cb) {
        var command = new CreateTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.createUsageLimit = function (args, optionsOrCb, cb) {
        var command = new CreateUsageLimitCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deauthorizeDataShare = function (args, optionsOrCb, cb) {
        var command = new DeauthorizeDataShareCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteAuthenticationProfile = function (args, optionsOrCb, cb) {
        var command = new DeleteAuthenticationProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteCluster = function (args, optionsOrCb, cb) {
        var command = new DeleteClusterCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteClusterParameterGroup = function (args, optionsOrCb, cb) {
        var command = new DeleteClusterParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteClusterSecurityGroup = function (args, optionsOrCb, cb) {
        var command = new DeleteClusterSecurityGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteClusterSnapshot = function (args, optionsOrCb, cb) {
        var command = new DeleteClusterSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteClusterSubnetGroup = function (args, optionsOrCb, cb) {
        var command = new DeleteClusterSubnetGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteEndpointAccess = function (args, optionsOrCb, cb) {
        var command = new DeleteEndpointAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteEventSubscription = function (args, optionsOrCb, cb) {
        var command = new DeleteEventSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteHsmClientCertificate = function (args, optionsOrCb, cb) {
        var command = new DeleteHsmClientCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteHsmConfiguration = function (args, optionsOrCb, cb) {
        var command = new DeleteHsmConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deletePartner = function (args, optionsOrCb, cb) {
        var command = new DeletePartnerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteScheduledAction = function (args, optionsOrCb, cb) {
        var command = new DeleteScheduledActionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteSnapshotCopyGrant = function (args, optionsOrCb, cb) {
        var command = new DeleteSnapshotCopyGrantCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteSnapshotSchedule = function (args, optionsOrCb, cb) {
        var command = new DeleteSnapshotScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteTags = function (args, optionsOrCb, cb) {
        var command = new DeleteTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.deleteUsageLimit = function (args, optionsOrCb, cb) {
        var command = new DeleteUsageLimitCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeAccountAttributes = function (args, optionsOrCb, cb) {
        var command = new DescribeAccountAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeAuthenticationProfiles = function (args, optionsOrCb, cb) {
        var command = new DescribeAuthenticationProfilesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeClusterDbRevisions = function (args, optionsOrCb, cb) {
        var command = new DescribeClusterDbRevisionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeClusterParameterGroups = function (args, optionsOrCb, cb) {
        var command = new DescribeClusterParameterGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeClusterParameters = function (args, optionsOrCb, cb) {
        var command = new DescribeClusterParametersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeClusters = function (args, optionsOrCb, cb) {
        var command = new DescribeClustersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeClusterSecurityGroups = function (args, optionsOrCb, cb) {
        var command = new DescribeClusterSecurityGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeClusterSnapshots = function (args, optionsOrCb, cb) {
        var command = new DescribeClusterSnapshotsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeClusterSubnetGroups = function (args, optionsOrCb, cb) {
        var command = new DescribeClusterSubnetGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeClusterTracks = function (args, optionsOrCb, cb) {
        var command = new DescribeClusterTracksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeClusterVersions = function (args, optionsOrCb, cb) {
        var command = new DescribeClusterVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeDataShares = function (args, optionsOrCb, cb) {
        var command = new DescribeDataSharesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeDataSharesForConsumer = function (args, optionsOrCb, cb) {
        var command = new DescribeDataSharesForConsumerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeDataSharesForProducer = function (args, optionsOrCb, cb) {
        var command = new DescribeDataSharesForProducerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeDefaultClusterParameters = function (args, optionsOrCb, cb) {
        var command = new DescribeDefaultClusterParametersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeEndpointAccess = function (args, optionsOrCb, cb) {
        var command = new DescribeEndpointAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeEndpointAuthorization = function (args, optionsOrCb, cb) {
        var command = new DescribeEndpointAuthorizationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeEventCategories = function (args, optionsOrCb, cb) {
        var command = new DescribeEventCategoriesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeEvents = function (args, optionsOrCb, cb) {
        var command = new DescribeEventsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeEventSubscriptions = function (args, optionsOrCb, cb) {
        var command = new DescribeEventSubscriptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeHsmClientCertificates = function (args, optionsOrCb, cb) {
        var command = new DescribeHsmClientCertificatesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeHsmConfigurations = function (args, optionsOrCb, cb) {
        var command = new DescribeHsmConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeLoggingStatus = function (args, optionsOrCb, cb) {
        var command = new DescribeLoggingStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeNodeConfigurationOptions = function (args, optionsOrCb, cb) {
        var command = new DescribeNodeConfigurationOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeOrderableClusterOptions = function (args, optionsOrCb, cb) {
        var command = new DescribeOrderableClusterOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describePartners = function (args, optionsOrCb, cb) {
        var command = new DescribePartnersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeReservedNodeExchangeStatus = function (args, optionsOrCb, cb) {
        var command = new DescribeReservedNodeExchangeStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeReservedNodeOfferings = function (args, optionsOrCb, cb) {
        var command = new DescribeReservedNodeOfferingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeReservedNodes = function (args, optionsOrCb, cb) {
        var command = new DescribeReservedNodesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeResize = function (args, optionsOrCb, cb) {
        var command = new DescribeResizeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeScheduledActions = function (args, optionsOrCb, cb) {
        var command = new DescribeScheduledActionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeSnapshotCopyGrants = function (args, optionsOrCb, cb) {
        var command = new DescribeSnapshotCopyGrantsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeSnapshotSchedules = function (args, optionsOrCb, cb) {
        var command = new DescribeSnapshotSchedulesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeStorage = function (args, optionsOrCb, cb) {
        var command = new DescribeStorageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeTableRestoreStatus = function (args, optionsOrCb, cb) {
        var command = new DescribeTableRestoreStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeTags = function (args, optionsOrCb, cb) {
        var command = new DescribeTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.describeUsageLimits = function (args, optionsOrCb, cb) {
        var command = new DescribeUsageLimitsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.disableLogging = function (args, optionsOrCb, cb) {
        var command = new DisableLoggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.disableSnapshotCopy = function (args, optionsOrCb, cb) {
        var command = new DisableSnapshotCopyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.disassociateDataShareConsumer = function (args, optionsOrCb, cb) {
        var command = new DisassociateDataShareConsumerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.enableLogging = function (args, optionsOrCb, cb) {
        var command = new EnableLoggingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.enableSnapshotCopy = function (args, optionsOrCb, cb) {
        var command = new EnableSnapshotCopyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.getClusterCredentials = function (args, optionsOrCb, cb) {
        var command = new GetClusterCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.getClusterCredentialsWithIAM = function (args, optionsOrCb, cb) {
        var command = new GetClusterCredentialsWithIAMCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.getReservedNodeExchangeConfigurationOptions = function (args, optionsOrCb, cb) {
        var command = new GetReservedNodeExchangeConfigurationOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.getReservedNodeExchangeOfferings = function (args, optionsOrCb, cb) {
        var command = new GetReservedNodeExchangeOfferingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyAquaConfiguration = function (args, optionsOrCb, cb) {
        var command = new ModifyAquaConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyAuthenticationProfile = function (args, optionsOrCb, cb) {
        var command = new ModifyAuthenticationProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyCluster = function (args, optionsOrCb, cb) {
        var command = new ModifyClusterCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyClusterDbRevision = function (args, optionsOrCb, cb) {
        var command = new ModifyClusterDbRevisionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyClusterIamRoles = function (args, optionsOrCb, cb) {
        var command = new ModifyClusterIamRolesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyClusterMaintenance = function (args, optionsOrCb, cb) {
        var command = new ModifyClusterMaintenanceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyClusterParameterGroup = function (args, optionsOrCb, cb) {
        var command = new ModifyClusterParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyClusterSnapshot = function (args, optionsOrCb, cb) {
        var command = new ModifyClusterSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyClusterSnapshotSchedule = function (args, optionsOrCb, cb) {
        var command = new ModifyClusterSnapshotScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyClusterSubnetGroup = function (args, optionsOrCb, cb) {
        var command = new ModifyClusterSubnetGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyEndpointAccess = function (args, optionsOrCb, cb) {
        var command = new ModifyEndpointAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyEventSubscription = function (args, optionsOrCb, cb) {
        var command = new ModifyEventSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyScheduledAction = function (args, optionsOrCb, cb) {
        var command = new ModifyScheduledActionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifySnapshotCopyRetentionPeriod = function (args, optionsOrCb, cb) {
        var command = new ModifySnapshotCopyRetentionPeriodCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifySnapshotSchedule = function (args, optionsOrCb, cb) {
        var command = new ModifySnapshotScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.modifyUsageLimit = function (args, optionsOrCb, cb) {
        var command = new ModifyUsageLimitCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.pauseCluster = function (args, optionsOrCb, cb) {
        var command = new PauseClusterCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.purchaseReservedNodeOffering = function (args, optionsOrCb, cb) {
        var command = new PurchaseReservedNodeOfferingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.rebootCluster = function (args, optionsOrCb, cb) {
        var command = new RebootClusterCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.rejectDataShare = function (args, optionsOrCb, cb) {
        var command = new RejectDataShareCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.resetClusterParameterGroup = function (args, optionsOrCb, cb) {
        var command = new ResetClusterParameterGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.resizeCluster = function (args, optionsOrCb, cb) {
        var command = new ResizeClusterCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.restoreFromClusterSnapshot = function (args, optionsOrCb, cb) {
        var command = new RestoreFromClusterSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.restoreTableFromClusterSnapshot = function (args, optionsOrCb, cb) {
        var command = new RestoreTableFromClusterSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.resumeCluster = function (args, optionsOrCb, cb) {
        var command = new ResumeClusterCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.revokeClusterSecurityGroupIngress = function (args, optionsOrCb, cb) {
        var command = new RevokeClusterSecurityGroupIngressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.revokeEndpointAccess = function (args, optionsOrCb, cb) {
        var command = new RevokeEndpointAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.revokeSnapshotAccess = function (args, optionsOrCb, cb) {
        var command = new RevokeSnapshotAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.rotateEncryptionKey = function (args, optionsOrCb, cb) {
        var command = new RotateEncryptionKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Redshift.prototype.updatePartnerStatus = function (args, optionsOrCb, cb) {
        var command = new UpdatePartnerStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return Redshift;
}(RedshiftClient));
export { Redshift };
